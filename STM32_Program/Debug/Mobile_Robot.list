
Mobile_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080055b8  080055b8  000065b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b8  080057b8  000070bc  2**0
                  CONTENTS
  4 .ARM          00000000  080057b8  080057b8  000070bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b8  080057b8  000070bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080057c0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200000c0  0800587c  000070c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800587c  000073bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a65  00000000  00000000  000070e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001855  00000000  00000000  0000fb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  00011de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a65  00000000  00000000  000125d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9b6  00000000  00000000  0002a03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b6d  00000000  00000000  000359f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b8  00000000  00000000  000be5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	080055a0 	.word	0x080055a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	080055a0 	.word	0x080055a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <pulse_modulation>:
	double k_phi = 9.76e-3;
	double R_a = 4.35;

	double number = 0;

	void pulse_modulation(uint16_t *duty_cycle1, uint16_t *duty_cycle2) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, *duty_cycle1); // left
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <pulse_modulation+0x28>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, *duty_cycle2); // right
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <pulse_modulation+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000016c 	.word	0x2000016c

08000a78 <convert_v_to_pwm>:


	void convert_v_to_pwm(uint16_t *duty_cycle1, uint16_t *duty_cycle2, double voltage_left, double voltage_right) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	e9c7 2300 	strd	r2, r3, [r7]
		*duty_cycle1 = (int)((voltage_left / 12) * 1000);
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <convert_v_to_pwm+0x80>)
 8000a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a90:	f7ff fe44 	bl	800071c <__aeabi_ddiv>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	4610      	mov	r0, r2
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <convert_v_to_pwm+0x84>)
 8000aa2:	f7ff fd11 	bl	80004c8 <__aeabi_dmul>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff ffa5 	bl	80009fc <__aeabi_d2iz>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	801a      	strh	r2, [r3, #0]
		*duty_cycle2 = (int)((voltage_right / 12) * 1000);
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <convert_v_to_pwm+0x80>)
 8000ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ac4:	f7ff fe2a 	bl	800071c <__aeabi_ddiv>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4610      	mov	r0, r2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <convert_v_to_pwm+0x84>)
 8000ad6:	f7ff fcf7 	bl	80004c8 <__aeabi_dmul>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff ff8b 	bl	80009fc <__aeabi_d2iz>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	801a      	strh	r2, [r3, #0]
	}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40280000 	.word	0x40280000
 8000afc:	408f4000 	.word	0x408f4000

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b0a1      	sub	sp, #132	@ 0x84
 8000b06:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f001 fe18 	bl	800273c <HAL_Init>

  /* USER CODE BEGIN Init */

      //Controller parameters
      matrix K;
      allocate_matrix(&K, 3 ,1);
 8000b0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b10:	2201      	movs	r2, #1
 8000b12:	2103      	movs	r1, #3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fa73 	bl	8002000 <allocate_matrix>
      K.index[0][0] = 1;
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	4b89      	ldr	r3, [pc, #548]	@ (8000d48 <main+0x248>)
 8000b24:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[1][0] = 1;
 8000b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <main+0x248>)
 8000b34:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[2][0] = 1;
 8000b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	4b81      	ldr	r3, [pc, #516]	@ (8000d48 <main+0x248>)
 8000b44:	e9c1 2300 	strd	r2, r3, [r1]

      matrix K_4;
      allocate_matrix(&K_4, 2, 2);
 8000b48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fa55 	bl	8002000 <allocate_matrix>
      K_4.index[0][0] = 1;
 8000b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8000d48 <main+0x248>)
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
      K_4.index[1][1] = 1;
 8000b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b66:	3304      	adds	r3, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f103 0108 	add.w	r1, r3, #8
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	4b75      	ldr	r3, [pc, #468]	@ (8000d48 <main+0x248>)
 8000b74:	e9c1 2300 	strd	r2, r3, [r1]
      //.

      matrix v;
      allocate_matrix(&v, 2, 1);
 8000b78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fa3d 	bl	8002000 <allocate_matrix>

      matrix v_c;
      allocate_matrix(&v_c, 2, 1);
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fa36 	bl	8002000 <allocate_matrix>

      matrix v_c_old;
      allocate_matrix(&v_c_old, 2, 1);
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fa2f 	bl	8002000 <allocate_matrix>

      matrix u;
      allocate_matrix(&u, 2, 1);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fa28 	bl	8002000 <allocate_matrix>

      matrix tau;
      allocate_matrix(&tau, 2, 1);
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fa21 	bl	8002000 <allocate_matrix>

      virtual_control(&v_c_old, &K, &v_c, e_x, e_y, e_theta, v_r, w_r);
 8000bbe:	4b63      	ldr	r3, [pc, #396]	@ (8000d4c <main+0x24c>)
 8000bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc4:	4962      	ldr	r1, [pc, #392]	@ (8000d50 <main+0x250>)
 8000bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bca:	4c62      	ldr	r4, [pc, #392]	@ (8000d54 <main+0x254>)
 8000bcc:	cc30      	ldmia	r4, {r4, r5}
 8000bce:	4e62      	ldr	r6, [pc, #392]	@ (8000d58 <main+0x258>)
 8000bd0:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000bd4:	4e61      	ldr	r6, [pc, #388]	@ (8000d5c <main+0x25c>)
 8000bd6:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000bda:	f107 0e20 	add.w	lr, r7, #32
 8000bde:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 8000be2:	f107 0618 	add.w	r6, r7, #24
 8000be6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000bea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000bee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000bf6:	e9cd 2300 	strd	r2, r3, [sp]
 8000bfa:	4672      	mov	r2, lr
 8000bfc:	4661      	mov	r1, ip
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f000 fe1e 	bl	8001840 <virtual_control>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 fa68 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 fbd4 	bl	80013b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c0c:	f000 faa4 	bl	8001158 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c10:	f000 fafa 	bl	8001208 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c14:	f000 fb4c 	bl	80012b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Motor left
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4851      	ldr	r0, [pc, #324]	@ (8000d60 <main+0x260>)
 8000c1c:	f002 fcde 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8000c20:	2104      	movs	r1, #4
 8000c22:	4850      	ldr	r0, [pc, #320]	@ (8000d64 <main+0x264>)
 8000c24:	f002 fe1e 	bl	8003864 <HAL_TIM_Encoder_Start>
  // Motor right
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c28:	210c      	movs	r1, #12
 8000c2a:	484d      	ldr	r0, [pc, #308]	@ (8000d60 <main+0x260>)
 8000c2c:	f002 fcd6 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c30:	2104      	movs	r1, #4
 8000c32:	484d      	ldr	r0, [pc, #308]	@ (8000d68 <main+0x268>)
 8000c34:	f002 fe16 	bl	8003864 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  present_time = HAL_GetTick();
 8000c38:	f001 fdd8 	bl	80027ec <HAL_GetTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbc8 	bl	80003d4 <__aeabi_ui2d>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4948      	ldr	r1, [pc, #288]	@ (8000d6c <main+0x26c>)
 8000c4a:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
	  encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000c4e:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <main+0x264>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fbbd 	bl	80003d4 <__aeabi_ui2d>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4944      	ldr	r1, [pc, #272]	@ (8000d70 <main+0x270>)
 8000c60:	e9c1 2300 	strd	r2, r3, [r1]
	  double a = encoder_cnt1;
 8000c64:	4b42      	ldr	r3, [pc, #264]	@ (8000d70 <main+0x270>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	  encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <main+0x268>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbad 	bl	80003d4 <__aeabi_ui2d>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	493d      	ldr	r1, [pc, #244]	@ (8000d74 <main+0x274>)
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
	  double b = encoder_cnt2;
 8000c84:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <main+0x274>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	  if(HAL_GetTick() - present_time > sample_time) {
 8000c8e:	f001 fdad 	bl	80027ec <HAL_GetTick>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb9d 	bl	80003d4 <__aeabi_ui2d>
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <main+0x26c>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fa5a 	bl	8000158 <__aeabi_dsub>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4619      	mov	r1, r3
 8000cac:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <main+0x278>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fe99 	bl	80009e8 <__aeabi_dcmpgt>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 81d7 	beq.w	800106c <main+0x56c>
		  	if(encoder_cnt1 - encoder1_previous < 0) {
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <main+0x270>)
 8000cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <main+0x27c>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fa45 	bl	8000158 <__aeabi_dsub>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	f7ff fe65 	bl	80009ac <__aeabi_dcmplt>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d051      	beq.n	8000d8c <main+0x28c>
		  		left_angular_velocity = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <main+0x270>)
 8000cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cee:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <main+0x27c>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fa30 	bl	8000158 <__aeabi_dsub>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	a30f      	add	r3, pc, #60	@ (adr r3, 8000d40 <main+0x240>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fa29 	bl	800015c <__adddf3>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <main+0x280>)
 8000d18:	f7ff fd00 	bl	800071c <__aeabi_ddiv>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <main+0x284>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fbcd 	bl	80004c8 <__aeabi_dmul>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4915      	ldr	r1, [pc, #84]	@ (8000d88 <main+0x288>)
 8000d34:	e9c1 2300 	strd	r2, r3, [r1]
 8000d38:	e047      	b.n	8000dca <main+0x2ca>
 8000d3a:	bf00      	nop
 8000d3c:	f3af 8000 	nop.w
 8000d40:	00000000 	.word	0x00000000
 8000d44:	40efffe0 	.word	0x40efffe0
 8000d48:	3ff00000 	.word	0x3ff00000
 8000d4c:	200001f8 	.word	0x200001f8
 8000d50:	20000200 	.word	0x20000200
 8000d54:	20000208 	.word	0x20000208
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000016c 	.word	0x2000016c
 8000d64:	200000dc 	.word	0x200000dc
 8000d68:	20000124 	.word	0x20000124
 8000d6c:	20000260 	.word	0x20000260
 8000d70:	20000220 	.word	0x20000220
 8000d74:	20000228 	.word	0x20000228
 8000d78:	20000010 	.word	0x20000010
 8000d7c:	20000250 	.word	0x20000250
 8000d80:	4094a000 	.word	0x4094a000
 8000d84:	20000018 	.word	0x20000018
 8000d88:	200001d0 	.word	0x200001d0
		  	}
		  	else {
		  		left_angular_velocity = ((encoder_cnt1 - encoder1_previous) / 1320) * rate;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <main+0x350>)
 8000d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d92:	4b30      	ldr	r3, [pc, #192]	@ (8000e54 <main+0x354>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f7ff f9de 	bl	8000158 <__aeabi_dsub>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <main+0x358>)
 8000daa:	f7ff fcb7 	bl	800071c <__aeabi_ddiv>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <main+0x35c>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fb84 	bl	80004c8 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4926      	ldr	r1, [pc, #152]	@ (8000e60 <main+0x360>)
 8000dc6:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	if(encoder_cnt2 - encoder2_previous < 0) {
 8000dca:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <main+0x364>)
 8000dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd0:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <main+0x368>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	f7ff f9bf 	bl	8000158 <__aeabi_dsub>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	f7ff fddf 	bl	80009ac <__aeabi_dcmplt>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d03d      	beq.n	8000e70 <main+0x370>
		  		right_angular_velocity = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <main+0x350>)
 8000df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <main+0x354>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff f9aa 	bl	8000158 <__aeabi_dsub>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000e48 <main+0x348>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff f9a3 	bl	800015c <__adddf3>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <main+0x358>)
 8000e24:	f7ff fc7a 	bl	800071c <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <main+0x35c>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fb47 	bl	80004c8 <__aeabi_dmul>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	490b      	ldr	r1, [pc, #44]	@ (8000e6c <main+0x36c>)
 8000e40:	e9c1 2300 	strd	r2, r3, [r1]
 8000e44:	e033      	b.n	8000eae <main+0x3ae>
 8000e46:	bf00      	nop
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	40efffe0 	.word	0x40efffe0
 8000e50:	20000220 	.word	0x20000220
 8000e54:	20000250 	.word	0x20000250
 8000e58:	4094a000 	.word	0x4094a000
 8000e5c:	20000018 	.word	0x20000018
 8000e60:	200001d0 	.word	0x200001d0
 8000e64:	20000228 	.word	0x20000228
 8000e68:	20000258 	.word	0x20000258
 8000e6c:	200001d8 	.word	0x200001d8
		  	}
		  	else {
		  		right_angular_velocity = ((encoder_cnt2 - encoder2_previous) / 1320) * rate;
 8000e70:	4b7f      	ldr	r3, [pc, #508]	@ (8001070 <main+0x570>)
 8000e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e76:	4b7f      	ldr	r3, [pc, #508]	@ (8001074 <main+0x574>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff f96c 	bl	8000158 <__aeabi_dsub>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001078 <main+0x578>)
 8000e8e:	f7ff fc45 	bl	800071c <__aeabi_ddiv>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4b78      	ldr	r3, [pc, #480]	@ (800107c <main+0x57c>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fb12 	bl	80004c8 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4975      	ldr	r1, [pc, #468]	@ (8001080 <main+0x580>)
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	encoder_test_1 = encoder_cnt1 - encoder1_previous;
 8000eae:	4b75      	ldr	r3, [pc, #468]	@ (8001084 <main+0x584>)
 8000eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb4:	4b74      	ldr	r3, [pc, #464]	@ (8001088 <main+0x588>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff f94d 	bl	8000158 <__aeabi_dsub>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4972      	ldr	r1, [pc, #456]	@ (800108c <main+0x58c>)
 8000ec4:	e9c1 2300 	strd	r2, r3, [r1]
		  	encoder_test_2 = encoder_cnt2 - encoder2_previous;
 8000ec8:	4b69      	ldr	r3, [pc, #420]	@ (8001070 <main+0x570>)
 8000eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ece:	4b69      	ldr	r3, [pc, #420]	@ (8001074 <main+0x574>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff f940 	bl	8000158 <__aeabi_dsub>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	496c      	ldr	r1, [pc, #432]	@ (8001090 <main+0x590>)
 8000ede:	e9c1 2300 	strd	r2, r3, [r1]
		  	encoder1_previous = encoder_cnt1;
 8000ee2:	4b68      	ldr	r3, [pc, #416]	@ (8001084 <main+0x584>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	4967      	ldr	r1, [pc, #412]	@ (8001088 <main+0x588>)
 8000eea:	e9c1 2300 	strd	r2, r3, [r1]
		  	encoder2_previous = encoder_cnt2;
 8000eee:	4b60      	ldr	r3, [pc, #384]	@ (8001070 <main+0x570>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	495f      	ldr	r1, [pc, #380]	@ (8001074 <main+0x574>)
 8000ef6:	e9c1 2300 	strd	r2, r3, [r1]

	  		velocity(&v, left_angular_velocity, right_angular_velocity);
 8000efa:	4b66      	ldr	r3, [pc, #408]	@ (8001094 <main+0x594>)
 8000efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f00:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <main+0x580>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	f000 ff9e 	bl	8001e54 <velocity>
	  		error(x, y, theta, x_r, y_r, theta_r, &e_x, &e_y, &e_theta);
 8000f18:	4b5f      	ldr	r3, [pc, #380]	@ (8001098 <main+0x598>)
 8000f1a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800109c <main+0x59c>)
 8000f20:	cb18      	ldmia	r3, {r3, r4}
 8000f22:	e9c7 3400 	strd	r3, r4, [r7]
 8000f26:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <main+0x5a0>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	495d      	ldr	r1, [pc, #372]	@ (80010a4 <main+0x5a4>)
 8000f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f32:	4c5d      	ldr	r4, [pc, #372]	@ (80010a8 <main+0x5a8>)
 8000f34:	cc30      	ldmia	r4, {r4, r5}
 8000f36:	4e5d      	ldr	r6, [pc, #372]	@ (80010ac <main+0x5ac>)
 8000f38:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000f3c:	4e5c      	ldr	r6, [pc, #368]	@ (80010b0 <main+0x5b0>)
 8000f3e:	960a      	str	r6, [sp, #40]	@ 0x28
 8000f40:	4e5c      	ldr	r6, [pc, #368]	@ (80010b4 <main+0x5b4>)
 8000f42:	9609      	str	r6, [sp, #36]	@ 0x24
 8000f44:	4e5c      	ldr	r6, [pc, #368]	@ (80010b8 <main+0x5b8>)
 8000f46:	9608      	str	r6, [sp, #32]
 8000f48:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000f4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f54:	e9cd 2300 	strd	r2, r3, [sp]
 8000f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5c:	4650      	mov	r0, sl
 8000f5e:	4659      	mov	r1, fp
 8000f60:	f000 fbed 	bl	800173e <error>
	  		virtual_control(&v_c, &K, &v_c_old, e_x, e_y, e_theta, v_r, w_r);
 8000f64:	4b54      	ldr	r3, [pc, #336]	@ (80010b8 <main+0x5b8>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	4952      	ldr	r1, [pc, #328]	@ (80010b4 <main+0x5b4>)
 8000f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f70:	4c4f      	ldr	r4, [pc, #316]	@ (80010b0 <main+0x5b0>)
 8000f72:	cc30      	ldmia	r4, {r4, r5}
 8000f74:	4e51      	ldr	r6, [pc, #324]	@ (80010bc <main+0x5bc>)
 8000f76:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000f7a:	4e51      	ldr	r6, [pc, #324]	@ (80010c0 <main+0x5c0>)
 8000f7c:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000f80:	f107 0e18 	add.w	lr, r7, #24
 8000f84:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 8000f88:	f107 0620 	add.w	r6, r7, #32
 8000f8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000f90:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000f94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8000fa0:	4672      	mov	r2, lr
 8000fa2:	4661      	mov	r1, ip
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f000 fc4b 	bl	8001840 <virtual_control>
	  		control_signal(&u, &v_c, &v_c, &v, &K_4);
 8000faa:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000fae:	f107 0220 	add.w	r2, r7, #32
 8000fb2:	f107 0120 	add.w	r1, r7, #32
 8000fb6:	f107 0010 	add.w	r0, r7, #16
 8000fba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	f000 fccd 	bl	8001960 <control_signal>
	  		torque(theta, &v, &u, &tau);
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <main+0x5a0>)
 8000fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fcc:	f107 0410 	add.w	r4, r7, #16
 8000fd0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4623      	mov	r3, r4
 8000fdc:	f000 fe10 	bl	8001c00 <torque>
	  		voltage(&voltage_left, &voltage_right, left_angular_velocity, right_angular_velocity, &tau);
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <main+0x594>)
 8000fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <main+0x580>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f107 0408 	add.w	r4, r7, #8
 8000ff0:	9402      	str	r4, [sp, #8]
 8000ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4932      	ldr	r1, [pc, #200]	@ (80010c4 <main+0x5c4>)
 8000ffc:	4832      	ldr	r0, [pc, #200]	@ (80010c8 <main+0x5c8>)
 8000ffe:	f000 ff89 	bl	8001f14 <voltage>
	  		next_state(&v, &x, &y, &theta, &x_r, &y_r, &theta_r, w_r, v_r);
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <main+0x5c0>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	492c      	ldr	r1, [pc, #176]	@ (80010bc <main+0x5bc>)
 800100a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800100e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001012:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <main+0x5ac>)
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <main+0x5a8>)
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <main+0x5a4>)
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <main+0x5a0>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <main+0x59c>)
 800102a:	491b      	ldr	r1, [pc, #108]	@ (8001098 <main+0x598>)
 800102c:	4620      	mov	r0, r4
 800102e:	f000 fd09 	bl	8001a44 <next_state>
	  		convert_v_to_pwm(&duty_cycle1, &duty_cycle2, voltage_left, voltage_right);
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <main+0x5c8>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <main+0x5c4>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	e9cd 2300 	strd	r2, r3, [sp]
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4921      	ldr	r1, [pc, #132]	@ (80010cc <main+0x5cc>)
 8001048:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <main+0x5d0>)
 800104a:	f7ff fd15 	bl	8000a78 <convert_v_to_pwm>
	  		pulse_modulation(&duty_cycle1, &duty_cycle2);
 800104e:	491f      	ldr	r1, [pc, #124]	@ (80010cc <main+0x5cc>)
 8001050:	481f      	ldr	r0, [pc, #124]	@ (80010d0 <main+0x5d0>)
 8001052:	f7ff fcfb 	bl	8000a4c <pulse_modulation>
//
//	  		pulse_modulation_test();
	  		present_time = HAL_GetTick();
 8001056:	f001 fbc9 	bl	80027ec <HAL_GetTick>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f9b9 	bl	80003d4 <__aeabi_ui2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	491b      	ldr	r1, [pc, #108]	@ (80010d4 <main+0x5d4>)
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
  {
 800106c:	e5ef      	b.n	8000c4e <main+0x14e>
 800106e:	bf00      	nop
 8001070:	20000228 	.word	0x20000228
 8001074:	20000258 	.word	0x20000258
 8001078:	4094a000 	.word	0x4094a000
 800107c:	20000018 	.word	0x20000018
 8001080:	200001d8 	.word	0x200001d8
 8001084:	20000220 	.word	0x20000220
 8001088:	20000250 	.word	0x20000250
 800108c:	20000240 	.word	0x20000240
 8001090:	20000248 	.word	0x20000248
 8001094:	200001d0 	.word	0x200001d0
 8001098:	200001b8 	.word	0x200001b8
 800109c:	200001c0 	.word	0x200001c0
 80010a0:	200001c8 	.word	0x200001c8
 80010a4:	200001e0 	.word	0x200001e0
 80010a8:	200001e8 	.word	0x200001e8
 80010ac:	200001f0 	.word	0x200001f0
 80010b0:	20000208 	.word	0x20000208
 80010b4:	20000200 	.word	0x20000200
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000218 	.word	0x20000218
 80010c8:	20000210 	.word	0x20000210
 80010cc:	2000026a 	.word	0x2000026a
 80010d0:	20000268 	.word	0x20000268
 80010d4:	20000260 	.word	0x20000260

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	@ 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	@ 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 f9b0 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2310      	movs	r3, #16
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800110a:	2300      	movs	r3, #0
 800110c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800110e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fdd9 	bl	8002cd0 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001124:	f000 f98a 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f002 f847 	bl	80031d4 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800114c:	f000 f976 	bl	800143c <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3740      	adds	r7, #64	@ 0x40
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2224      	movs	r2, #36	@ 0x24
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f970 	bl	800444c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_TIM1_Init+0xa8>)
 8001176:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <MX_TIM1_Init+0xac>)
 8001178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_TIM1_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM1_Init+0xa8>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_TIM1_Init+0xa8>)
 8001188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_TIM1_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_TIM1_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_TIM1_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a0:	2303      	movs	r3, #3
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_TIM1_Init+0xa8>)
 80011cc:	f002 faa8 	bl	8003720 <HAL_TIM_Encoder_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011d6:	f000 f931 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_TIM1_Init+0xa8>)
 80011e8:	f002 fff8 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80011f2:	f000 f923 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	@ 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000dc 	.word	0x200000dc
 8001204:	40012c00 	.word	0x40012c00

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2224      	movs	r2, #36	@ 0x24
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f003 f918 	bl	800444c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_TIM2_Init+0xa4>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800122a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_TIM2_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_TIM2_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_TIM2_Init+0xa4>)
 800123a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_TIM2_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_TIM2_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124c:	2303      	movs	r3, #3
 800124e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_TIM2_Init+0xa4>)
 8001278:	f002 fa52 	bl	8003720 <HAL_TIM_Encoder_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001282:	f000 f8db 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_TIM2_Init+0xa4>)
 8001294:	f002 ffa2 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800129e:	f000 f8cd 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	@ 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000124 	.word	0x20000124

080012b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <MX_TIM4_Init+0xfc>)
 80012e2:	4a33      	ldr	r2, [pc, #204]	@ (80013b0 <MX_TIM4_Init+0x100>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <MX_TIM4_Init+0xfc>)
 80012e8:	2223      	movs	r2, #35	@ 0x23
 80012ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <MX_TIM4_Init+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <MX_TIM4_Init+0xfc>)
 80012f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <MX_TIM4_Init+0xfc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <MX_TIM4_Init+0xfc>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001306:	4829      	ldr	r0, [pc, #164]	@ (80013ac <MX_TIM4_Init+0xfc>)
 8001308:	f002 f8c0 	bl	800348c <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001312:	f000 f893 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001320:	4619      	mov	r1, r3
 8001322:	4822      	ldr	r0, [pc, #136]	@ (80013ac <MX_TIM4_Init+0xfc>)
 8001324:	f002 fbee 	bl	8003b04 <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800132e:	f000 f885 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001332:	481e      	ldr	r0, [pc, #120]	@ (80013ac <MX_TIM4_Init+0xfc>)
 8001334:	f002 f8f9 	bl	800352a <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800133e:	f000 f87d 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	4816      	ldr	r0, [pc, #88]	@ (80013ac <MX_TIM4_Init+0xfc>)
 8001352:	f002 ff43 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800135c:	f000 f86e 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	2360      	movs	r3, #96	@ 0x60
 8001362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2208      	movs	r2, #8
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_TIM4_Init+0xfc>)
 8001378:	f002 fb02 	bl	8003980 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001382:	f000 f85b 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	@ (80013ac <MX_TIM4_Init+0xfc>)
 800138e:	f002 faf7 	bl	8003980 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001398:	f000 f850 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <MX_TIM4_Init+0xfc>)
 800139e:	f000 f90d 	bl	80015bc <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	@ 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000016c 	.word	0x2000016c
 80013b0:	40000800 	.word	0x40000800

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a19      	ldr	r2, [pc, #100]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <MX_GPIO_Init+0x80>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_GPIO_Init+0x80>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CFG0_Pin CFG1_Pin CFG2_Pin */
  GPIO_InitStruct.Pin = CFG0_Pin|CFG1_Pin|CFG2_Pin;
 8001410:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4619      	mov	r1, r3
 8001424:	4804      	ldr	r0, [pc, #16]	@ (8001438 <MX_GPIO_Init+0x84>)
 8001426:	f001 facf 	bl	80029c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40010c00 	.word	0x40010c00

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <Error_Handler+0x8>

08001448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_MspInit+0x5c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <HAL_MspInit+0x5c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_MspInit+0x60>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <HAL_MspInit+0x60>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d125      	bne.n	8001518 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a29      	ldr	r2, [pc, #164]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN1_1_Pin|EN1_2_Pin;
 80014fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4619      	mov	r1, r3
 8001510:	481a      	ldr	r0, [pc, #104]	@ (800157c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001512:	f001 fa59 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	e028      	b.n	800156a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001520:	d123      	bne.n	800156a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN2_1_Pin|EN2_2_Pin;
 8001552:	2303      	movs	r3, #3
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155a:	2301      	movs	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001566:	f001 fa2f 	bl	80029c8 <HAL_GPIO_Init>
}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40012c00 	.word	0x40012c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40010800 	.word	0x40010800

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <HAL_TIM_Base_MspInit+0x34>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10b      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_TIM_Base_MspInit+0x38>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <HAL_TIM_Base_MspInit+0x38>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_TIM_Base_MspInit+0x38>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40000800 	.word	0x40000800
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <HAL_TIM_MspPostInit+0x5c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d118      	bne.n	800160e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_TIM_MspPostInit+0x60>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_TIM_MspPostInit+0x60>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_TIM_MspPostInit+0x60>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = MT1_Pin|MT2_Pin;
 80015f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_TIM_MspPostInit+0x64>)
 800160a:	f001 f9dd 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40000800 	.word	0x40000800
 800161c:	40021000 	.word	0x40021000
 8001620:	40010c00 	.word	0x40010c00

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f001 f8a8 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f002 fee6 	bl	800447c <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20005000 	.word	0x20005000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	2000026c 	.word	0x2000026c
 80016e4:	200003c0 	.word	0x200003c0

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff fff8 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	@ (8001728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016fa:	490c      	ldr	r1, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001710:	4c09      	ldr	r4, [pc, #36]	@ (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f002 feb3 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff f9ed 	bl	8000b00 <main>
  bx lr
 8001726:	4770      	bx	lr
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001730:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 8001734:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001738:	200003bc 	.word	0x200003bc

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>

0800173e <error>:




void error(double x, double y, double theta, double x_r, double y_r, double theta_r, double *e_x, double *e_y, double *e_theta)
{
 800173e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800174a:	e9c7 2300 	strd	r2, r3, [r7]
    *e_x = cos(theta) * (x_r - x) + sin(theta) * (y_r - y);
 800174e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001752:	f002 ff07 	bl	8004564 <cos>
 8001756:	4680      	mov	r8, r0
 8001758:	4689      	mov	r9, r1
 800175a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001762:	f7fe fcf9 	bl	8000158 <__aeabi_dsub>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4640      	mov	r0, r8
 800176c:	4649      	mov	r1, r9
 800176e:	f7fe feab 	bl	80004c8 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4692      	mov	sl, r2
 8001778:	469b      	mov	fp, r3
 800177a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800177e:	f002 ff37 	bl	80045f0 <sin>
 8001782:	4680      	mov	r8, r0
 8001784:	4689      	mov	r9, r1
 8001786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800178a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800178e:	f7fe fce3 	bl	8000158 <__aeabi_dsub>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4640      	mov	r0, r8
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fe95 	bl	80004c8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4650      	mov	r0, sl
 80017a4:	4659      	mov	r1, fp
 80017a6:	f7fe fcd9 	bl	800015c <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80017b0:	e9c1 2300 	strd	r2, r3, [r1]
    *e_y = (-1) * sin(theta) * (x_r - x) + cos(theta) * (y_r - y);
 80017b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017b8:	f002 ff1a 	bl	80045f0 <sin>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80017c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80017ce:	f7fe fcc3 	bl	8000158 <__aeabi_dsub>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fe75 	bl	80004c8 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017ea:	f002 febb 	bl	8004564 <cos>
 80017ee:	4604      	mov	r4, r0
 80017f0:	460d      	mov	r5, r1
 80017f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80017fa:	f7fe fcad 	bl	8000158 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe fe5f 	bl	80004c8 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4640      	mov	r0, r8
 8001810:	4649      	mov	r1, r9
 8001812:	f7fe fca3 	bl	800015c <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800181c:	e9c1 2300 	strd	r2, r3, [r1]
    *e_theta = theta_r - theta;
 8001820:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001824:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001828:	f7fe fc96 	bl	8000158 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001840 <virtual_control>:

// Caculate virtural control signal
// Must allocate v_c matrix and K matrix in the main program
void virtual_control(matrix *v_c, matrix *K, matrix *v_c_old, double e_x, double e_y, double e_theta, double v_r, double w_r)
{
 8001840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
    // Store the previous value of v_c
    v_c_old->index[0][0] = v_c->index[0][0];
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
    v_c_old->index[1][0] = v_c->index[1][0];
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3304      	adds	r3, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	3204      	adds	r2, #4
 8001870:	6811      	ldr	r1, [r2, #0]
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate new v_c
    v_c->index[0][0] = v_r * cos(e_theta) + K->index[0][0] * e_x;
 800187a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800187e:	f002 fe71 	bl	8004564 <cos>
 8001882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001886:	f7fe fe1f 	bl	80004c8 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4690      	mov	r8, r2
 8001890:	4699      	mov	r9, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018a0:	f7fe fe12 	bl	80004c8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681c      	ldr	r4, [r3, #0]
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4640      	mov	r0, r8
 80018b8:	4649      	mov	r1, r9
 80018ba:	f7fe fc4f 	bl	800015c <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9c4 2300 	strd	r2, r3, [r4]
    v_c->index[1][0] = w_r + K->index[1][0] * v_r * e_y + K->index[2][0] * v_r * sin(e_theta);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018d6:	f7fe fdf7 	bl	80004c8 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018e6:	f7fe fdef 	bl	80004c8 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018f6:	f7fe fc31 	bl	800015c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4690      	mov	r8, r2
 8001900:	4699      	mov	r9, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3308      	adds	r3, #8
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001912:	f7fe fdd9 	bl	80004c8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	461d      	mov	r5, r3
 800191e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001922:	f002 fe65 	bl	80045f0 <sin>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fdcb 	bl	80004c8 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3304      	adds	r3, #4
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4640      	mov	r0, r8
 8001948:	4649      	mov	r1, r9
 800194a:	f7fe fc07 	bl	800015c <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001960 <control_signal>:

// Calculate the control signal u
// Must allocate u matrix in the main program
void control_signal(matrix *u, matrix *v_c, matrix *v_c_old, matrix *v, matrix *K_4)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b08b      	sub	sp, #44	@ 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]

    double x  = (v_c->index[0][0] - v_c_old->index[0][0]) / sampling_interval;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fbe9 	bl	8000158 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <control_signal+0xe0>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fec2 	bl	800071c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double y  = (v_c->index[1][0] - v_c_old->index[1][0]) / sampling_interval;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3304      	adds	r3, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fbce 	bl	8000158 <__aeabi_dsub>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <control_signal+0xe0>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fea7 	bl	800071c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    subtraction(v_c, v);
 80019d6:	6839      	ldr	r1, [r7, #0]
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f000 fbbb 	bl	8002154 <subtraction>
    matrix C;
    mutiplication(K_4, v_c, &C);
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	461a      	mov	r2, r3
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019e8:	f000 fc46 	bl	8002278 <mutiplication>
    u->index[0][0] = x + C.index[0][0];
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019fe:	f7fe fbad 	bl	800015c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c4 2300 	strd	r2, r3, [r4]
    u->index[1][0] = y + C.index[1][0];
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a20:	f7fe fb9c 	bl	800015c <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c4 2300 	strd	r2, r3, [r4]
    
    deallocate_matrix(&C);
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fb1a 	bl	800206a <deallocate_matrix>
}
 8001a36:	bf00      	nop
 8001a38:	372c      	adds	r7, #44	@ 0x2c
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000020 	.word	0x20000020

08001a44 <next_state>:

// Calculate future coordinates of the robot
// Call after applying voltages to motors
void next_state(matrix *v, double *x, double *y, double *theta, double *x_r, double *y_r, double *theta_r, double w_r, double v_r)
{
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b090      	sub	sp, #64	@ 0x40
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
    double derivative_x = cos(*theta) * v->index[0][0];
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f002 fd82 	bl	8004564 <cos>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fd2d 	bl	80004c8 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double derivative_y = sin(*theta) * v->index[0][0];
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f002 fdb6 	bl	80045f0 <sin>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fd1b 	bl	80004c8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double derivative_theta = v->index[1][0];
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Calculate future coordinates
    *x = *x + sampling_interval * derivative_x;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ab0:	4b52      	ldr	r3, [pc, #328]	@ (8001bfc <next_state+0x1b8>)
 8001ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001aba:	f7fe fd05 	bl	80004c8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fb49 	bl	800015c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]
    *y = *y + sampling_interval * derivative_y;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ada:	4b48      	ldr	r3, [pc, #288]	@ (8001bfc <next_state+0x1b8>)
 8001adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ae4:	f7fe fcf0 	bl	80004c8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fb34 	bl	800015c <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
    *theta = *theta + sampling_interval * derivative_theta;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b04:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <next_state+0x1b8>)
 8001b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b0e:	f7fe fcdb 	bl	80004c8 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fb1f 	bl	800015c <__adddf3>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	6839      	ldr	r1, [r7, #0]
 8001b24:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_x_r = cos(*theta_r) * v_r;
 8001b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f002 fd17 	bl	8004564 <cos>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001b3e:	f7fe fcc3 	bl	80004c8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double derivative_y_r = sin(*theta_r) * v_r;
 8001b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f002 fd4c 	bl	80045f0 <sin>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001b60:	f7fe fcb2 	bl	80004c8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double derivative_theta_r = w_r;
 8001b6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b70:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Calculate future reference coordinates
    *x_r = *x_r + sampling_interval * derivative_x_r;
 8001b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <next_state+0x1b8>)
 8001b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b84:	f7fe fca0 	bl	80004c8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	4629      	mov	r1, r5
 8001b90:	f7fe fae4 	bl	800015c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b9a:	e9c1 2300 	strd	r2, r3, [r1]
    *y_r = *y_r + sampling_interval * derivative_y_r;
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <next_state+0x1b8>)
 8001ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bae:	f7fe fc8b 	bl	80004c8 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe facf 	bl	800015c <__adddf3>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
    *theta_r = *theta_r + sampling_interval * derivative_theta_r;
 8001bc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <next_state+0x1b8>)
 8001bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bd8:	f7fe fc76 	bl	80004c8 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4620      	mov	r0, r4
 8001be2:	4629      	mov	r1, r5
 8001be4:	f7fe faba 	bl	800015c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001bee:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001bf2:	bf00      	nop
 8001bf4:	3740      	adds	r7, #64	@ 0x40
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000020 	.word	0x20000020

08001c00 <torque>:

// Calculate torque signal
// Must allocate tau matrix in the main program
void torque(double theta, matrix *v, matrix *u, matrix *tau)
{
 8001c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c04:	b095      	sub	sp, #84	@ 0x54
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
double derivative_theta = v->index[1][0];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3304      	adds	r3, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
matrix M;
allocate_matrix(&M, 2, 2);
 8001c20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c24:	2202      	movs	r2, #2
 8001c26:	2102      	movs	r1, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f9e9 	bl	8002000 <allocate_matrix>
M.index[0][0] = m;
 8001c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	4b80      	ldr	r3, [pc, #512]	@ (8001e34 <torque+0x234>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	e9c1 2300 	strd	r2, r3, [r1]
M.index[1][1] = I;
 8001c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f103 0108 	add.w	r1, r3, #8
 8001c46:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <torque+0x238>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]

matrix V;
allocate_matrix(&V, 2, 2);
 8001c50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c54:	2202      	movs	r2, #2
 8001c56:	2102      	movs	r1, #2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f9d1 	bl	8002000 <allocate_matrix>
V.index[0][1] = m * d * derivative_theta;
 8001c5e:	4b75      	ldr	r3, [pc, #468]	@ (8001e34 <torque+0x234>)
 8001c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c64:	4b75      	ldr	r3, [pc, #468]	@ (8001e3c <torque+0x23c>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fc2d 	bl	80004c8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f103 0608 	add.w	r6, r3, #8
 8001c7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c82:	f7fe fc21 	bl	80004c8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9c6 2300 	strd	r2, r3, [r6]
V.index[1][0] = - m * d * derivative_theta;
 8001c8e:	4b69      	ldr	r3, [pc, #420]	@ (8001e34 <torque+0x234>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	4690      	mov	r8, r2
 8001c96:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001c9a:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <torque+0x23c>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	4640      	mov	r0, r8
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	f7fe fc10 	bl	80004c8 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	681e      	ldr	r6, [r3, #0]
 8001cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cba:	f7fe fc05 	bl	80004c8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9c6 2300 	strd	r2, r3, [r6]

matrix B;
allocate_matrix(&B, 2, 2);
 8001cc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cca:	2202      	movs	r2, #2
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f996 	bl	8002000 <allocate_matrix>
B.index[0][0] = B.index[0][1] = 1 / r;
 8001cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e40 <torque+0x240>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cdc:	6809      	ldr	r1, [r1, #0]
 8001cde:	f101 0608 	add.w	r6, r1, #8
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	4957      	ldr	r1, [pc, #348]	@ (8001e44 <torque+0x244>)
 8001ce8:	f7fe fd18 	bl	800071c <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c6 2300 	strd	r2, r3, [r6]
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001cfc:	e9c1 2300 	strd	r2, r3, [r1]
B.index[1][0] = R / r;
 8001d00:	4b51      	ldr	r3, [pc, #324]	@ (8001e48 <torque+0x248>)
 8001d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <torque+0x240>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8001d0e:	3604      	adds	r6, #4
 8001d10:	6836      	ldr	r6, [r6, #0]
 8001d12:	f7fe fd03 	bl	800071c <__aeabi_ddiv>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	e9c6 2300 	strd	r2, r3, [r6]
B.index[1][1] = - R / r;
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e48 <torque+0x248>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	4614      	mov	r4, r2
 8001d26:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001d2a:	4b45      	ldr	r3, [pc, #276]	@ (8001e40 <torque+0x240>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d32:	3104      	adds	r1, #4
 8001d34:	6809      	ldr	r1, [r1, #0]
 8001d36:	f101 0608 	add.w	r6, r1, #8
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fced 	bl	800071c <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	e9c6 2300 	strd	r2, r3, [r6]

matrix inv_B;
inverse(&B, &inv_B);
 8001d4a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fccf 	bl	80026f8 <inverse>
deallocate_matrix(&B);
 8001d5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f983 	bl	800206a <deallocate_matrix>

matrix M_u;
mutiplication(&M, u, &M_u);
 8001d64:	f107 0220 	add.w	r2, r7, #32
 8001d68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fa82 	bl	8002278 <mutiplication>
deallocate_matrix(&M);
 8001d74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f976 	bl	800206a <deallocate_matrix>

matrix V_v;
mutiplication(&V, v, &V_v);
 8001d7e:	f107 0218 	add.w	r2, r7, #24
 8001d82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa75 	bl	8002278 <mutiplication>
deallocate_matrix(&V);
 8001d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f969 	bl	800206a <deallocate_matrix>

addition(&M_u, &V_v);
 8001d98:	f107 0218 	add.w	r2, r7, #24
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f983 	bl	80020ae <addition>
deallocate_matrix(&V_v);
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f95c 	bl	800206a <deallocate_matrix>

matrix torque;
mutiplication(&inv_B, &M_u, &torque);
 8001db2:	f107 0210 	add.w	r2, r7, #16
 8001db6:	f107 0120 	add.w	r1, r7, #32
 8001dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fa5a 	bl	8002278 <mutiplication>
deallocate_matrix(&inv_B);
 8001dc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f94e 	bl	800206a <deallocate_matrix>
deallocate_matrix(&M_u);
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f949 	bl	800206a <deallocate_matrix>


tau->index[0][0] = torque.index[0][0];
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	6811      	ldr	r1, [r2, #0]
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	e9c1 2300 	strd	r2, r3, [r1]
tau->index[1][0] = torque.index[1][0];
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	3304      	adds	r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	3204      	adds	r2, #4
 8001df6:	6811      	ldr	r1, [r2, #0]
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9c1 2300 	strd	r2, r3, [r1]

t1 = torque.index[0][0];
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	4910      	ldr	r1, [pc, #64]	@ (8001e4c <torque+0x24c>)
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]
t2 = torque.index[1][0];
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3304      	adds	r3, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <torque+0x250>)
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]

deallocate_matrix(&torque);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f921 	bl	800206a <deallocate_matrix>
}
 8001e28:	bf00      	nop
 8001e2a:	3754      	adds	r7, #84	@ 0x54
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e32:	bf00      	nop
 8001e34:	20000048 	.word	0x20000048
 8001e38:	20000028 	.word	0x20000028
 8001e3c:	20000040 	.word	0x20000040
 8001e40:	20000030 	.word	0x20000030
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	20000038 	.word	0x20000038
 8001e4c:	20000230 	.word	0x20000230
 8001e50:	20000238 	.word	0x20000238

08001e54 <velocity>:

// Calculate the linear velocity and angular velocity of the vehicle
void velocity(matrix *v, double left_angular_velocity, double right_angular_velocity)
{
 8001e54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	e9c7 2300 	strd	r2, r3, [r7]
    v->index[0][0] = r / 2 * (left_angular_velocity + right_angular_velocity);
 8001e62:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <velocity+0xb8>)
 8001e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e70:	f7fe fc54 	bl	800071c <__aeabi_ddiv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4690      	mov	r8, r2
 8001e7a:	4699      	mov	r9, r3
 8001e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e84:	f7fe f96a 	bl	800015c <__adddf3>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681c      	ldr	r4, [r3, #0]
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	f7fe fb13 	bl	80004c8 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9c4 2300 	strd	r2, r3, [r4]
    v->index[1][0] = r / (2 * R) * (right_angular_velocity - left_angular_velocity);
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <velocity+0xb8>)
 8001eac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <velocity+0xbc>)
 8001eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	f7fe f94f 	bl	800015c <__adddf3>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f7fe fc29 	bl	800071c <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4690      	mov	r8, r2
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eda:	f7fe f93d 	bl	8000158 <__aeabi_dsub>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3304      	adds	r3, #4
 8001eec:	681c      	ldr	r4, [r3, #0]
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4640      	mov	r0, r8
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	f7fe fae7 	bl	80004c8 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f0c:	20000030 	.word	0x20000030
 8001f10:	20000038 	.word	0x20000038

08001f14 <voltage>:

 //Calculate voltage for the motor
void voltage(double *voltage_left, double *voltage_right, double left_angular_velocity, double right_angular_velocity, matrix *tau)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	e9c7 2300 	strd	r2, r3, [r7]

    *voltage_left = k_phi * left_angular_velocity * 30 + R_a * tau->index[1][0] / k_phi;
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <voltage+0xe0>)
 8001f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2c:	f7fe facc 	bl	80004c8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <voltage+0xe4>)
 8001f3e:	f7fe fac3 	bl	80004c8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4614      	mov	r4, r2
 8001f48:	461d      	mov	r5, r3
 8001f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f56:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <voltage+0xe8>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fab4 	bl	80004c8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <voltage+0xe0>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fbd5 	bl	800071c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe f8ef 	bl	800015c <__adddf3>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	e9c1 2300 	strd	r2, r3, [r1]
    *voltage_right = k_phi * right_angular_velocity * 30 + R_a * tau->index[0][0] / k_phi;
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <voltage+0xe0>)
 8001f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f92:	f7fe fa99 	bl	80004c8 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <voltage+0xe4>)
 8001fa4:	f7fe fa90 	bl	80004c8 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	461d      	mov	r5, r3
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <voltage+0xe8>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fa82 	bl	80004c8 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <voltage+0xe0>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fba3 	bl	800071c <__aeabi_ddiv>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe f8bd 	bl	800015c <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff4:	20000050 	.word	0x20000050
 8001ff8:	403e0000 	.word	0x403e0000
 8001ffc:	20000058 	.word	0x20000058

08002000 <allocate_matrix>:
#include "matrices_op2.h"

//Allocate memmory space and matrix A
void allocate_matrix(matrix *A, unsigned_int8 num_rows, unsigned_int8 num_columns)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
 800200c:	4613      	mov	r3, r2
 800200e:	70bb      	strb	r3, [r7, #2]
    A->index = (double **) malloc(sizeof(double *) * num_rows);
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4618      	mov	r0, r3
 8002016:	f002 f95b 	bl	80042d0 <malloc>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
    A->num_columns = num_columns;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	78ba      	ldrb	r2, [r7, #2]
 8002026:	711a      	strb	r2, [r3, #4]
    A->num_rows = num_rows;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	715a      	strb	r2, [r3, #5]

    for (int i = 0; i < A->num_rows; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e00f      	b.n	8002054 <allocate_matrix+0x54>
        A->index[i] = (double *) calloc(sizeof(double), A->num_columns);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	18d4      	adds	r4, r2, r3
 8002044:	2008      	movs	r0, #8
 8002046:	f002 f927 	bl	8004298 <calloc>
 800204a:	4603      	mov	r3, r0
 800204c:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < A->num_rows; i++)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	795b      	ldrb	r3, [r3, #5]
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4293      	cmp	r3, r2
 800205e:	dbe9      	blt.n	8002034 <allocate_matrix+0x34>
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}

0800206a <deallocate_matrix>:

//Deallocate memory space for matrix A
void deallocate_matrix(matrix *A)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < A->num_rows; i++){
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e00b      	b.n	8002090 <deallocate_matrix+0x26>
        free(A->index[i]);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f002 f92b 	bl	80042e0 <free>
    for (int i = 0; i < A->num_rows; i++){
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3301      	adds	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	795b      	ldrb	r3, [r3, #5]
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4293      	cmp	r3, r2
 800209a:	dbed      	blt.n	8002078 <deallocate_matrix+0xe>
    }
    free(A->index);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 f91d 	bl	80042e0 <free>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <addition>:
}

//Calculate addtion of matrix A and B
//Answer is directly assigned to A
void addition(matrix *A, matrix *B)
{
 80020ae:	b5b0      	push	{r4, r5, r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	795a      	ldrb	r2, [r3, #5]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	795b      	ldrb	r3, [r3, #5]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d143      	bne.n	800214c <addition+0x9e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	791a      	ldrb	r2, [r3, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	791b      	ldrb	r3, [r3, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d13d      	bne.n	800214c <addition+0x9e>
        return;
    
    //Calculate addition
    for (int i  = 0; i < A->num_rows; i++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e033      	b.n	800213e <addition+0x90>
        for (int j = 0; j < A->num_columns; j++){
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	e027      	b.n	800212c <addition+0x7e>
            A->index[i][j] += B->index[i][j];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	687c      	ldr	r4, [r7, #4]
 800210a:	6825      	ldr	r5, [r4, #0]
 800210c:	68fc      	ldr	r4, [r7, #12]
 800210e:	00a4      	lsls	r4, r4, #2
 8002110:	442c      	add	r4, r5
 8002112:	6825      	ldr	r5, [r4, #0]
 8002114:	68bc      	ldr	r4, [r7, #8]
 8002116:	00e4      	lsls	r4, r4, #3
 8002118:	442c      	add	r4, r5
 800211a:	f7fe f81f 	bl	800015c <__adddf3>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	791b      	ldrb	r3, [r3, #4]
 8002130:	461a      	mov	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4293      	cmp	r3, r2
 8002136:	dbd1      	blt.n	80020dc <addition+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	795b      	ldrb	r3, [r3, #5]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4293      	cmp	r3, r2
 8002148:	dbc5      	blt.n	80020d6 <addition+0x28>
 800214a:	e000      	b.n	800214e <addition+0xa0>
        return;
 800214c:	bf00      	nop
        }
    }
}
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}

08002154 <subtraction>:

//Calculate subtraction of matrix A and B (A - B)
//Answer is directly assigned to A
void subtraction(matrix *A, matrix *B)
{
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	795a      	ldrb	r2, [r3, #5]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	795b      	ldrb	r3, [r3, #5]
 8002166:	429a      	cmp	r2, r3
 8002168:	d143      	bne.n	80021f2 <subtraction+0x9e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	791a      	ldrb	r2, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d13d      	bne.n	80021f2 <subtraction+0x9e>
        return;
    
    //Calculate Subtraction
    for (int i  = 0; i < A->num_rows; i++){
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e033      	b.n	80021e4 <subtraction+0x90>
        for (int j = 0; j < A->num_columns; j++){
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	e027      	b.n	80021d2 <subtraction+0x7e>
            A->index[i][j] -= B->index[i][j];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	687c      	ldr	r4, [r7, #4]
 80021b0:	6825      	ldr	r5, [r4, #0]
 80021b2:	68fc      	ldr	r4, [r7, #12]
 80021b4:	00a4      	lsls	r4, r4, #2
 80021b6:	442c      	add	r4, r5
 80021b8:	6825      	ldr	r5, [r4, #0]
 80021ba:	68bc      	ldr	r4, [r7, #8]
 80021bc:	00e4      	lsls	r4, r4, #3
 80021be:	442c      	add	r4, r5
 80021c0:	f7fd ffca 	bl	8000158 <__aeabi_dsub>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3301      	adds	r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4293      	cmp	r3, r2
 80021dc:	dbd1      	blt.n	8002182 <subtraction+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	795b      	ldrb	r3, [r3, #5]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4293      	cmp	r3, r2
 80021ee:	dbc5      	blt.n	800217c <subtraction+0x28>
 80021f0:	e000      	b.n	80021f4 <subtraction+0xa0>
        return;
 80021f2:	bf00      	nop
        }
    }
}
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bdb0      	pop	{r4, r5, r7, pc}

080021fa <scalar_multiplication>:

//Scalar multiplication of matrix
////Answer is directly assigned to A
void scalar_multiplication(matrix *A, double scalar)
{
 80021fa:	b590      	push	{r4, r7, lr}
 80021fc:	b087      	sub	sp, #28
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	e9c7 2300 	strd	r2, r3, [r7]
    for (int i  = 0; i < A->num_rows; i++){
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e02a      	b.n	8002262 <scalar_multiplication+0x68>
        for (int j = 0; j < A->num_columns; j++){
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e01e      	b.n	8002250 <scalar_multiplication+0x56>
            A->index[i][j] *= scalar;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	18d4      	adds	r4, r2, r3
 800223a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223e:	f7fe f943 	bl	80004c8 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	3301      	adds	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	461a      	mov	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4293      	cmp	r3, r2
 800225a:	dbda      	blt.n	8002212 <scalar_multiplication+0x18>
    for (int i  = 0; i < A->num_rows; i++){
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	795b      	ldrb	r3, [r3, #5]
 8002266:	461a      	mov	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4293      	cmp	r3, r2
 800226c:	dbce      	blt.n	800220c <scalar_multiplication+0x12>
        }
    }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <mutiplication>:

//Calculate multiplication of matrix A and B
//Answer is directly assigned to Ans
void mutiplication(matrix *A, matrix *B, matrix *Ans)
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
    //Check for appropriate size
    if (A->num_columns != B->num_rows)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	791a      	ldrb	r2, [r3, #4]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	795b      	ldrb	r3, [r3, #5]
 800228c:	429a      	cmp	r2, r3
 800228e:	d166      	bne.n	800235e <mutiplication+0xe6>
        return;

    //Allocate memory space for answer
    allocate_matrix(Ans, A->num_rows, B->num_columns);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	7959      	ldrb	r1, [r3, #5]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	791b      	ldrb	r3, [r3, #4]
 8002298:	461a      	mov	r2, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff feb0 	bl	8002000 <allocate_matrix>

    //Perform multiplication
    for (int i = 0; i < Ans->num_rows; i++){
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	e054      	b.n	8002350 <mutiplication+0xd8>
        for(int j = 0; j < Ans->num_columns; j++){
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e048      	b.n	800233e <mutiplication+0xc6>
            for (int x = 0; x < A->num_columns; x++){
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e03c      	b.n	800232c <mutiplication+0xb4>
                Ans->index[i][j] += (A->index[i][x] * B->index[x][j]); 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f4:	f7fe f8e8 	bl	80004c8 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	18d6      	adds	r6, r2, r3
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fd ff1f 	bl	800015c <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	e9c6 2300 	strd	r2, r3, [r6]
            for (int x = 0; x < A->num_columns; x++){
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	461a      	mov	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	4293      	cmp	r3, r2
 8002336:	dbbc      	blt.n	80022b2 <mutiplication+0x3a>
        for(int j = 0; j < Ans->num_columns; j++){
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	3301      	adds	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	791b      	ldrb	r3, [r3, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4293      	cmp	r3, r2
 8002348:	dbb0      	blt.n	80022ac <mutiplication+0x34>
    for (int i = 0; i < Ans->num_rows; i++){
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	795b      	ldrb	r3, [r3, #5]
 8002354:	461a      	mov	r2, r3
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4293      	cmp	r3, r2
 800235a:	dba4      	blt.n	80022a6 <mutiplication+0x2e>
 800235c:	e000      	b.n	8002360 <mutiplication+0xe8>
        return;
 800235e:	bf00      	nop
            }
        }
    }
}
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002366 <transpose>:

//Perform transpose of A
void transpose(matrix *A, matrix *transpose_A)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
    allocate_matrix(transpose_A, A->num_columns, A->num_rows);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7919      	ldrb	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	795b      	ldrb	r3, [r3, #5]
 8002378:	461a      	mov	r2, r3
 800237a:	6838      	ldr	r0, [r7, #0]
 800237c:	f7ff fe40 	bl	8002000 <allocate_matrix>

    //Perform transpose operation
    for (int i = 0; i < transpose_A->num_rows; i++){
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e024      	b.n	80023d0 <transpose+0x6a>
        for (int j = 0; j < transpose_A->num_columns; j++){
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	e018      	b.n	80023be <transpose+0x58>
            transpose_A->index[i][j] = A->index[j][i];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6811      	ldr	r1, [r2, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	440a      	add	r2, r1
 80023a8:	6811      	ldr	r1, [r2, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	00d2      	lsls	r2, r2, #3
 80023ae:	4411      	add	r1, r2
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < transpose_A->num_columns; j++){
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4293      	cmp	r3, r2
 80023c8:	dbe0      	blt.n	800238c <transpose+0x26>
    for (int i = 0; i < transpose_A->num_rows; i++){
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	795b      	ldrb	r3, [r3, #5]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4293      	cmp	r3, r2
 80023da:	dbd4      	blt.n	8002386 <transpose+0x20>
        }
    }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <minor>:

void minor(matrix *major, matrix *minor, unsigned_int8 skip_row, unsigned_int8 skip_column)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	4611      	mov	r1, r2
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71bb      	strb	r3, [r7, #6]
    //Allocate memory space for minor
    allocate_matrix(minor, major->num_rows - 1, major->num_columns - 1);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	795b      	ldrb	r3, [r3, #5]
 8002400:	3b01      	subs	r3, #1
 8002402:	b2d9      	uxtb	r1, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	3b01      	subs	r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	68b8      	ldr	r0, [r7, #8]
 8002410:	f7ff fdf6 	bl	8002000 <allocate_matrix>

    int x = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]

    //Assign element to minor
    //Skip row skip_row
    //Skip column skip_column
    for (int i = 0; i < major->num_rows; i++){
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e038      	b.n	8002494 <minor+0xae>
        if (i != skip_row){
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	429a      	cmp	r2, r3
 8002428:	d030      	beq.n	800248c <minor+0xa6>
            for (int j = 0; j < major->num_columns; j++){
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	e021      	b.n	8002474 <minor+0x8e>
                if (j != skip_column){
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d019      	beq.n	800246c <minor+0x86>
                    minor->index[x][y] = major->index[i][j];
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	6811      	ldr	r1, [r2, #0]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	440a      	add	r2, r1
 8002454:	6811      	ldr	r1, [r2, #0]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	4411      	add	r1, r2
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	e9c1 2300 	strd	r2, r3, [r1]
                    y++;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	3301      	adds	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e000      	b.n	800246e <minor+0x88>
                } else {
                    continue;
 800246c:	bf00      	nop
            for (int j = 0; j < major->num_columns; j++){
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3301      	adds	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4293      	cmp	r3, r2
 800247e:	dbd7      	blt.n	8002430 <minor+0x4a>
                }
            }
            x++;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3301      	adds	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
            y = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e000      	b.n	800248e <minor+0xa8>
        } else {
            continue;
 800248c:	bf00      	nop
    for (int i = 0; i < major->num_rows; i++){
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	795b      	ldrb	r3, [r3, #5]
 8002498:	461a      	mov	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4293      	cmp	r3, r2
 800249e:	dbc0      	blt.n	8002422 <minor+0x3c>
        }
    }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <determinant>:

// Calculate the determinant of A
double determinant(matrix *A, unsigned_int8 expand_row)
{
 80024aa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
    double result = 0;
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    if (A->num_rows == 1 && A->num_columns == 1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	795b      	ldrb	r3, [r3, #5]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10d      	bne.n	80024e8 <determinant+0x3e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d109      	bne.n	80024e8 <determinant+0x3e>
        return result = A->index[0][0];
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80024e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e6:	e09a      	b.n	800261e <determinant+0x174>

    //Calculate determinant with chosen expand_row
    for (int j = 0; j < A->num_columns; j++){
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e08e      	b.n	800260c <determinant+0x162>
        
        //Create minor matrix
        matrix M;
        minor(A, &M, expand_row, j);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	f107 010c 	add.w	r1, r7, #12
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff74 	bl	80023e6 <minor>
        
        if ((expand_row + j) % 2 == 0){
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4413      	add	r3, r2
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d13a      	bne.n	8002582 <determinant+0xd8>
            result += (A->index[expand_row][j] == 0) ? (0) : (A->index[expand_row][j] * determinant(&M, 0));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	f7fe fa35 	bl	8000998 <__aeabi_dcmpeq>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d119      	bne.n	8002568 <determinant+0xbe>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ffaa 	bl	80024aa <determinant>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4640      	mov	r0, r8
 800255c:	4649      	mov	r1, r9
 800255e:	f7fd ffb3 	bl	80004c8 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	e003      	b.n	8002570 <determinant+0xc6>
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002574:	f7fd fdf2 	bl	800015c <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002580:	e03c      	b.n	80025fc <determinant+0x152>
        } else {
            result += (A->index[expand_row][j] == 0) ? (0) : ((-1) * A->index[expand_row][j] * determinant(&M, 0));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f7fe f9fa 	bl	8000998 <__aeabi_dcmpeq>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11c      	bne.n	80025e4 <determinant+0x13a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	4614      	mov	r4, r2
 80025c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff6c 	bl	80024aa <determinant>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd ff75 	bl	80004c8 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	e003      	b.n	80025ec <determinant+0x142>
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f0:	f7fd fdb4 	bl	800015c <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }

        //Deallocate minor matrix
        deallocate_matrix(&M);
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fd32 	bl	800206a <deallocate_matrix>
    for (int j = 0; j < A->num_columns; j++){
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	461a      	mov	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4293      	cmp	r3, r2
 8002616:	f6ff af6a 	blt.w	80024ee <determinant+0x44>
    }

    return result;
 800261a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800262a <adjoint>:

//Calculate adjoint matrix
void adjoint(matrix *A, matrix *Ans)
{
 800262a:	b5b0      	push	{r4, r5, r7, lr}
 800262c:	b088      	sub	sp, #32
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
    matrix temp;
    allocate_matrix(&temp, A->num_rows, A->num_columns);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7959      	ldrb	r1, [r3, #5]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	791a      	ldrb	r2, [r3, #4]
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fcdd 	bl	8002000 <allocate_matrix>
    for (int i = 0; i < temp.num_rows; i++){
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e040      	b.n	80026ce <adjoint+0xa4>
        for (int j = 0; j < temp.num_columns; j++){
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	e035      	b.n	80026be <adjoint+0x94>
            matrix M;
            minor(A, &M, i, j);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f107 0108 	add.w	r1, r7, #8
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fec1 	bl	80023e6 <minor>

            temp.index[i][j] = ((i + j) % 2 == 0) ? (determinant(&M, 0)) : ((-1) * determinant(&M, 0));
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4413      	add	r3, r2
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <adjoint+0x5a>
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff16 	bl	80024aa <determinant>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	e00a      	b.n	800269a <adjoint+0x70>
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff0d 	bl	80024aa <determinant>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4614      	mov	r4, r2
 8002696:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	e9c3 4500 	strd	r4, r5, [r3]
            
            //Deallocate minor matrix
            deallocate_matrix(&M);
 80026ae:	f107 0308 	add.w	r3, r7, #8
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fcd9 	bl	800206a <deallocate_matrix>
        for (int j = 0; j < temp.num_columns; j++){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	7d3b      	ldrb	r3, [r7, #20]
 80026c0:	461a      	mov	r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	dbc4      	blt.n	8002652 <adjoint+0x28>
    for (int i = 0; i < temp.num_rows; i++){
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	7d7b      	ldrb	r3, [r7, #21]
 80026d0:	461a      	mov	r2, r3
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	dbb9      	blt.n	800264c <adjoint+0x22>
        }
    }
    transpose(&temp, Ans);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fe41 	bl	8002366 <transpose>
    deallocate_matrix(&temp);
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fcbe 	bl	800206a <deallocate_matrix>
}
 80026ee:	bf00      	nop
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026f8 <inverse>:

void inverse(matrix *A, matrix *inverse_of_A)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    //Calculate determinant of A
    double determinant_of_A = determinant(A, 0);
 8002702:	2100      	movs	r1, #0
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fed0 	bl	80024aa <determinant>
 800270a:	e9c7 0102 	strd	r0, r1, [r7, #8]

    //Calculate adjoint matrix of A
    adjoint(A, inverse_of_A);
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff8a 	bl	800262a <adjoint>

    //Calculate inverse of A
    scalar_multiplication(inverse_of_A, 1 / determinant_of_A);
 8002716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	4906      	ldr	r1, [pc, #24]	@ (8002738 <inverse+0x40>)
 8002720:	f7fd fffc 	bl	800071c <__aeabi_ddiv>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	6838      	ldr	r0, [r7, #0]
 800272a:	f7ff fd66 	bl	80021fa <scalar_multiplication>
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	3ff00000 	.word	0x3ff00000

0800273c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002740:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <HAL_Init+0x28>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <HAL_Init+0x28>)
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f000 f907 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002752:	200f      	movs	r0, #15
 8002754:	f000 f808 	bl	8002768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002758:	f7fe fe76 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_InitTick+0x54>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_InitTick+0x58>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f911 	bl	80029ae <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f8e7 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	@ (80027c4 <HAL_InitTick+0x5c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000060 	.word	0x20000060
 80027c0:	20000068 	.word	0x20000068
 80027c4:	20000064 	.word	0x20000064

080027c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_IncTick+0x1c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_IncTick+0x20>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a03      	ldr	r2, [pc, #12]	@ (80027e8 <HAL_IncTick+0x20>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	20000068 	.word	0x20000068
 80027e8:	20000270 	.word	0x20000270

080027ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b02      	ldr	r3, [pc, #8]	@ (80027fc <HAL_GetTick+0x10>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000270 	.word	0x20000270

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	@ (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	@ (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff90 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff49 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff5e 	bl	8002848 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff90 	bl	80028b8 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5f 	bl	8002864 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffb0 	bl	800291c <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b08b      	sub	sp, #44	@ 0x2c
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029da:	e169      	b.n	8002cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029dc:	2201      	movs	r2, #1
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 8158 	bne.w	8002caa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002c68 <HAL_GPIO_Init+0x2a0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d05e      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a04:	4a98      	ldr	r2, [pc, #608]	@ (8002c68 <HAL_GPIO_Init+0x2a0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d875      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a0a:	4a98      	ldr	r2, [pc, #608]	@ (8002c6c <HAL_GPIO_Init+0x2a4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d058      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a10:	4a96      	ldr	r2, [pc, #600]	@ (8002c6c <HAL_GPIO_Init+0x2a4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d86f      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a16:	4a96      	ldr	r2, [pc, #600]	@ (8002c70 <HAL_GPIO_Init+0x2a8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d052      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a1c:	4a94      	ldr	r2, [pc, #592]	@ (8002c70 <HAL_GPIO_Init+0x2a8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d869      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a22:	4a94      	ldr	r2, [pc, #592]	@ (8002c74 <HAL_GPIO_Init+0x2ac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04c      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a28:	4a92      	ldr	r2, [pc, #584]	@ (8002c74 <HAL_GPIO_Init+0x2ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d863      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a2e:	4a92      	ldr	r2, [pc, #584]	@ (8002c78 <HAL_GPIO_Init+0x2b0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d046      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a34:	4a90      	ldr	r2, [pc, #576]	@ (8002c78 <HAL_GPIO_Init+0x2b0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d85d      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a3a:	2b12      	cmp	r3, #18
 8002a3c:	d82a      	bhi.n	8002a94 <HAL_GPIO_Init+0xcc>
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d859      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a42:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <HAL_GPIO_Init+0x80>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002ac3 	.word	0x08002ac3
 8002a4c:	08002a9d 	.word	0x08002a9d
 8002a50:	08002aaf 	.word	0x08002aaf
 8002a54:	08002af1 	.word	0x08002af1
 8002a58:	08002af7 	.word	0x08002af7
 8002a5c:	08002af7 	.word	0x08002af7
 8002a60:	08002af7 	.word	0x08002af7
 8002a64:	08002af7 	.word	0x08002af7
 8002a68:	08002af7 	.word	0x08002af7
 8002a6c:	08002af7 	.word	0x08002af7
 8002a70:	08002af7 	.word	0x08002af7
 8002a74:	08002af7 	.word	0x08002af7
 8002a78:	08002af7 	.word	0x08002af7
 8002a7c:	08002af7 	.word	0x08002af7
 8002a80:	08002af7 	.word	0x08002af7
 8002a84:	08002af7 	.word	0x08002af7
 8002a88:	08002af7 	.word	0x08002af7
 8002a8c:	08002aa5 	.word	0x08002aa5
 8002a90:	08002ab9 	.word	0x08002ab9
 8002a94:	4a79      	ldr	r2, [pc, #484]	@ (8002c7c <HAL_GPIO_Init+0x2b4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9a:	e02c      	b.n	8002af6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	623b      	str	r3, [r7, #32]
          break;
 8002aa2:	e029      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	623b      	str	r3, [r7, #32]
          break;
 8002aac:	e024      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	623b      	str	r3, [r7, #32]
          break;
 8002ab6:	e01f      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	330c      	adds	r3, #12
 8002abe:	623b      	str	r3, [r7, #32]
          break;
 8002ac0:	e01a      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aca:	2304      	movs	r3, #4
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e013      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	611a      	str	r2, [r3, #16]
          break;
 8002ae2:	e009      	b.n	8002af8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	615a      	str	r2, [r3, #20]
          break;
 8002aee:	e003      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
          break;
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          break;
 8002af6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2bff      	cmp	r3, #255	@ 0xff
 8002afc:	d801      	bhi.n	8002b02 <HAL_GPIO_Init+0x13a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	e001      	b.n	8002b06 <HAL_GPIO_Init+0x13e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2bff      	cmp	r3, #255	@ 0xff
 8002b0c:	d802      	bhi.n	8002b14 <HAL_GPIO_Init+0x14c>
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	e002      	b.n	8002b1a <HAL_GPIO_Init+0x152>
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	3b08      	subs	r3, #8
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	210f      	movs	r1, #15
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80b1 	beq.w	8002caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b48:	4b4d      	ldr	r3, [pc, #308]	@ (8002c80 <HAL_GPIO_Init+0x2b8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c80 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b4a      	ldr	r3, [pc, #296]	@ (8002c80 <HAL_GPIO_Init+0x2b8>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b60:	4a48      	ldr	r2, [pc, #288]	@ (8002c84 <HAL_GPIO_Init+0x2bc>)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	220f      	movs	r2, #15
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a40      	ldr	r2, [pc, #256]	@ (8002c88 <HAL_GPIO_Init+0x2c0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_GPIO_Init+0x1ec>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c8c <HAL_GPIO_Init+0x2c4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00d      	beq.n	8002bb0 <HAL_GPIO_Init+0x1e8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3e      	ldr	r2, [pc, #248]	@ (8002c90 <HAL_GPIO_Init+0x2c8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <HAL_GPIO_Init+0x1e4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c94 <HAL_GPIO_Init+0x2cc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_GPIO_Init+0x1e0>
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e006      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e004      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e002      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	f002 0203 	and.w	r2, r2, #3
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	4093      	lsls	r3, r2
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bc6:	492f      	ldr	r1, [pc, #188]	@ (8002c84 <HAL_GPIO_Init+0x2bc>)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002be0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	492c      	ldr	r1, [pc, #176]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bee:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	4928      	ldr	r1, [pc, #160]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c08:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	4922      	ldr	r1, [pc, #136]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60cb      	str	r3, [r1, #12]
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	491e      	ldr	r1, [pc, #120]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4918      	ldr	r1, [pc, #96]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c3e:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4914      	ldr	r1, [pc, #80]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d021      	beq.n	8002c9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c58:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	490e      	ldr	r1, [pc, #56]	@ (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]
 8002c64:	e021      	b.n	8002caa <HAL_GPIO_Init+0x2e2>
 8002c66:	bf00      	nop
 8002c68:	10320000 	.word	0x10320000
 8002c6c:	10310000 	.word	0x10310000
 8002c70:	10220000 	.word	0x10220000
 8002c74:	10210000 	.word	0x10210000
 8002c78:	10120000 	.word	0x10120000
 8002c7c:	10110000 	.word	0x10110000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	40010c00 	.word	0x40010c00
 8002c90:	40011000 	.word	0x40011000
 8002c94:	40011400 	.word	0x40011400
 8002c98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_GPIO_Init+0x304>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4909      	ldr	r1, [pc, #36]	@ (8002ccc <HAL_GPIO_Init+0x304>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f47f ae8e 	bne.w	80029dc <HAL_GPIO_Init+0x14>
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	372c      	adds	r7, #44	@ 0x2c
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e272      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8087 	beq.w	8002dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf0:	4b92      	ldr	r3, [pc, #584]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d00c      	beq.n	8002d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d112      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5e>
 8002d08:	4b8c      	ldr	r3, [pc, #560]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d14:	d10b      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d16:	4b89      	ldr	r3, [pc, #548]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d06c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x12c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d168      	bne.n	8002dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e24c      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x76>
 8002d38:	4b80      	ldr	r3, [pc, #512]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e02e      	b.n	8002da4 <HAL_RCC_OscConfig+0xd4>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x98>
 8002d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7a      	ldr	r2, [pc, #488]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b78      	ldr	r3, [pc, #480]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a77      	ldr	r2, [pc, #476]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0xd4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0xbc>
 8002d72:	4b72      	ldr	r3, [pc, #456]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a71      	ldr	r2, [pc, #452]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6e      	ldr	r2, [pc, #440]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0xd4>
 8002d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6a      	ldr	r2, [pc, #424]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a67      	ldr	r2, [pc, #412]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff fd1e 	bl	80027ec <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff fd1a 	bl	80027ec <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e200      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0xe4>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fd0a 	bl	80027ec <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff fd06 	bl	80027ec <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1ec      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x10c>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e16:	4b49      	ldr	r3, [pc, #292]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x18c>
 8002e22:	4b46      	ldr	r3, [pc, #280]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d116      	bne.n	8002e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	4b43      	ldr	r3, [pc, #268]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x176>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e1c0      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4939      	ldr	r1, [pc, #228]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	e03a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e64:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7ff fcbf 	bl	80027ec <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e72:	f7ff fcbb 	bl	80027ec <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1a1      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4927      	ldr	r1, [pc, #156]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea6:	4b26      	ldr	r3, [pc, #152]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff fc9e 	bl	80027ec <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7ff fc9a 	bl	80027ec <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e180      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03a      	beq.n	8002f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b17      	ldr	r3, [pc, #92]	@ (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7ff fc7e 	bl	80027ec <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7ff fc7a 	bl	80027ec <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e160      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f000 fa9c 	bl	8003450 <RCC_Delay>
 8002f18:	e01c      	b.n	8002f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7ff fc64 	bl	80027ec <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f26:	e00f      	b.n	8002f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f28:	f7ff fc60 	bl	80027ec <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d908      	bls.n	8002f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e146      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	42420000 	.word	0x42420000
 8002f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b92      	ldr	r3, [pc, #584]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e9      	bne.n	8002f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80a6 	beq.w	80030ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b8b      	ldr	r3, [pc, #556]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	4b88      	ldr	r3, [pc, #544]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a87      	ldr	r2, [pc, #540]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	61d3      	str	r3, [r2, #28]
 8002f7e:	4b85      	ldr	r3, [pc, #532]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	4b82      	ldr	r3, [pc, #520]	@ (8003198 <HAL_RCC_OscConfig+0x4c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d118      	bne.n	8002fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003198 <HAL_RCC_OscConfig+0x4c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003198 <HAL_RCC_OscConfig+0x4c8>)
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa6:	f7ff fc21 	bl	80027ec <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fae:	f7ff fc1d 	bl	80027ec <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b64      	cmp	r3, #100	@ 0x64
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e103      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	4b75      	ldr	r3, [pc, #468]	@ (8003198 <HAL_RCC_OscConfig+0x4c8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x312>
 8002fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6213      	str	r3, [r2, #32]
 8002fe0:	e02d      	b.n	800303e <HAL_RCC_OscConfig+0x36e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x334>
 8002fea:	4b6a      	ldr	r3, [pc, #424]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a69      	ldr	r2, [pc, #420]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	4b67      	ldr	r3, [pc, #412]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a66      	ldr	r2, [pc, #408]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	e01c      	b.n	800303e <HAL_RCC_OscConfig+0x36e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d10c      	bne.n	8003026 <HAL_RCC_OscConfig+0x356>
 800300c:	4b61      	ldr	r3, [pc, #388]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4a60      	ldr	r2, [pc, #384]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	6213      	str	r3, [r2, #32]
 8003018:	4b5e      	ldr	r3, [pc, #376]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a5d      	ldr	r2, [pc, #372]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	e00b      	b.n	800303e <HAL_RCC_OscConfig+0x36e>
 8003026:	4b5b      	ldr	r3, [pc, #364]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a5a      	ldr	r2, [pc, #360]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	4b58      	ldr	r3, [pc, #352]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a57      	ldr	r2, [pc, #348]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d015      	beq.n	8003072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7ff fbd1 	bl	80027ec <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7ff fbcd 	bl	80027ec <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0b1      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	4b4b      	ldr	r3, [pc, #300]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ee      	beq.n	800304e <HAL_RCC_OscConfig+0x37e>
 8003070:	e014      	b.n	800309c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7ff fbbb 	bl	80027ec <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7ff fbb7 	bl	80027ec <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e09b      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	4b40      	ldr	r3, [pc, #256]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ee      	bne.n	800307a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8087 	beq.w	80031c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b8:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d061      	beq.n	8003188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d146      	bne.n	800315a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	4b33      	ldr	r3, [pc, #204]	@ (800319c <HAL_RCC_OscConfig+0x4cc>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7ff fb8b 	bl	80027ec <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030da:	f7ff fb87 	bl	80027ec <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e06d      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ec:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003100:	d108      	bne.n	8003114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4921      	ldr	r1, [pc, #132]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a19      	ldr	r1, [r3, #32]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	430b      	orrs	r3, r1
 8003126:	491b      	ldr	r1, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_RCC_OscConfig+0x4cc>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7ff fb5b 	bl	80027ec <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313a:	f7ff fb57 	bl	80027ec <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e03d      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x46a>
 8003158:	e035      	b.n	80031c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_RCC_OscConfig+0x4cc>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7ff fb44 	bl	80027ec <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7ff fb40 	bl	80027ec <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e026      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x498>
 8003186:	e01e      	b.n	80031c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e019      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
 800319c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <HAL_RCC_OscConfig+0x500>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d0      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b67      	ldr	r3, [pc, #412]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4965      	ldr	r1, [pc, #404]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a58      	ldr	r2, [pc, #352]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800323a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d040      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b41      	ldr	r3, [pc, #260]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e073      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06b      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4936      	ldr	r1, [pc, #216]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7ff fa92 	bl	80027ec <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7ff fa8e 	bl	80027ec <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e053      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b27      	ldr	r3, [pc, #156]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d210      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b24      	ldr	r3, [pc, #144]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4922      	ldr	r1, [pc, #136]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334e:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1cc>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f9f0 	bl	8002768 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40022000 	.word	0x40022000
 8003398:	40021000 	.word	0x40021000
 800339c:	080055b8 	.word	0x080055b8
 80033a0:	20000060 	.word	0x20000060
 80033a4:	20000064 	.word	0x20000064

080033a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c2:	4b1e      	ldr	r3, [pc, #120]	@ (800343c <HAL_RCC_GetSysClockFreq+0x94>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x30>
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x36>
 80033d6:	e027      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d8:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x98>)
 80033da:	613b      	str	r3, [r7, #16]
      break;
 80033dc:	e027      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	0c9b      	lsrs	r3, r3, #18
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033f6:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_RCC_GetSysClockFreq+0x94>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0c5b      	lsrs	r3, r3, #17
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003402:	5cd3      	ldrb	r3, [r2, r3]
 8003404:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a0d      	ldr	r2, [pc, #52]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x98>)
 800340a:	fb03 f202 	mul.w	r2, r3, r2
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e004      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0c      	ldr	r2, [pc, #48]	@ (800344c <HAL_RCC_GetSysClockFreq+0xa4>)
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	613b      	str	r3, [r7, #16]
      break;
 8003426:	e002      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x98>)
 800342a:	613b      	str	r3, [r7, #16]
      break;
 800342c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342e:	693b      	ldr	r3, [r7, #16]
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	007a1200 	.word	0x007a1200
 8003444:	080055c8 	.word	0x080055c8
 8003448:	080055d8 	.word	0x080055d8
 800344c:	003d0900 	.word	0x003d0900

08003450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003458:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <RCC_Delay+0x34>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <RCC_Delay+0x38>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0a5b      	lsrs	r3, r3, #9
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800346c:	bf00      	nop
  }
  while (Delay --);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	60fa      	str	r2, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <RCC_Delay+0x1c>
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	20000060 	.word	0x20000060
 8003488:	10624dd3 	.word	0x10624dd3

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e041      	b.n	8003522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe f864 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fbe2 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e041      	b.n	80035c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f839 	bl	80035c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 fb93 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_TIM_PWM_Start+0x24>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e022      	b.n	8003646 <HAL_TIM_PWM_Start+0x6a>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b04      	cmp	r3, #4
 8003604:	d109      	bne.n	800361a <HAL_TIM_PWM_Start+0x3e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e015      	b.n	8003646 <HAL_TIM_PWM_Start+0x6a>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d109      	bne.n	8003634 <HAL_TIM_PWM_Start+0x58>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e008      	b.n	8003646 <HAL_TIM_PWM_Start+0x6a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e05e      	b.n	800370c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <HAL_TIM_PWM_Start+0x82>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800365c:	e013      	b.n	8003686 <HAL_TIM_PWM_Start+0xaa>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start+0x92>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800366c:	e00b      	b.n	8003686 <HAL_TIM_PWM_Start+0xaa>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start+0xa2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367c:	e003      	b.n	8003686 <HAL_TIM_PWM_Start+0xaa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	6839      	ldr	r1, [r7, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fd80 	bl	8004194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <HAL_TIM_PWM_Start+0x138>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d107      	bne.n	80036ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a18      	ldr	r2, [pc, #96]	@ (8003714 <HAL_TIM_PWM_Start+0x138>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_PWM_Start+0xfa>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_PWM_Start+0xfa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a14      	ldr	r2, [pc, #80]	@ (8003718 <HAL_TIM_PWM_Start+0x13c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_PWM_Start+0xfa>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a12      	ldr	r2, [pc, #72]	@ (800371c <HAL_TIM_PWM_Start+0x140>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d010      	beq.n	800370a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	e007      	b.n	800370a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800

08003720 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e093      	b.n	800385c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fd feaf 	bl	80014ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003764:	f023 0307 	bic.w	r3, r3, #7
 8003768:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 fa8d 	bl	8003c94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	4313      	orrs	r3, r2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037c0:	f023 030c 	bic.w	r3, r3, #12
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	4313      	orrs	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	011a      	lsls	r2, r3, #4
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	031b      	lsls	r3, r3, #12
 80037f0:	4313      	orrs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4313      	orrs	r3, r2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003874:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800387c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003884:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800388c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d110      	bne.n	80038b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d102      	bne.n	80038a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800389a:	7b7b      	ldrb	r3, [r7, #13]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d001      	beq.n	80038a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e069      	b.n	8003978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038b4:	e031      	b.n	800391a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d110      	bne.n	80038de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038c2:	7b3b      	ldrb	r3, [r7, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e055      	b.n	8003978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038dc:	e01d      	b.n	800391a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d108      	bne.n	80038f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e4:	7bbb      	ldrb	r3, [r7, #14]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ea:	7b7b      	ldrb	r3, [r7, #13]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d102      	bne.n	80038f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038f0:	7b3b      	ldrb	r3, [r7, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e03e      	b.n	8003978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_TIM_Encoder_Start+0xc4>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b04      	cmp	r3, #4
 8003924:	d008      	beq.n	8003938 <HAL_TIM_Encoder_Start+0xd4>
 8003926:	e00f      	b.n	8003948 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fc2f 	bl	8004194 <TIM_CCxChannelCmd>
      break;
 8003936:	e016      	b.n	8003966 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	2104      	movs	r1, #4
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fc27 	bl	8004194 <TIM_CCxChannelCmd>
      break;
 8003946:	e00e      	b.n	8003966 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fc1f 	bl	8004194 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	2104      	movs	r1, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fc18 	bl	8004194 <TIM_CCxChannelCmd>
      break;
 8003964:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800399a:	2302      	movs	r3, #2
 800399c:	e0ae      	b.n	8003afc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	f200 809f 	bhi.w	8003aec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ae:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003aed 	.word	0x08003aed
 80039bc:	08003aed 	.word	0x08003aed
 80039c0:	08003aed 	.word	0x08003aed
 80039c4:	08003a29 	.word	0x08003a29
 80039c8:	08003aed 	.word	0x08003aed
 80039cc:	08003aed 	.word	0x08003aed
 80039d0:	08003aed 	.word	0x08003aed
 80039d4:	08003a6b 	.word	0x08003a6b
 80039d8:	08003aed 	.word	0x08003aed
 80039dc:	08003aed 	.word	0x08003aed
 80039e0:	08003aed 	.word	0x08003aed
 80039e4:	08003aab 	.word	0x08003aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f9b2 	bl	8003d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0208 	orr.w	r2, r2, #8
 8003a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0204 	bic.w	r2, r2, #4
 8003a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6999      	ldr	r1, [r3, #24]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	619a      	str	r2, [r3, #24]
      break;
 8003a26:	e064      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f9f8 	bl	8003e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	021a      	lsls	r2, r3, #8
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	619a      	str	r2, [r3, #24]
      break;
 8003a68:	e043      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fa41 	bl	8003ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0208 	orr.w	r2, r2, #8
 8003a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0204 	bic.w	r2, r2, #4
 8003a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69d9      	ldr	r1, [r3, #28]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	61da      	str	r2, [r3, #28]
      break;
 8003aa8:	e023      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fa8b 	bl	8003fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	61da      	str	r2, [r3, #28]
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIM_ConfigClockSource+0x1c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0b4      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x186>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b58:	d03e      	beq.n	8003bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5e:	f200 8087 	bhi.w	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b66:	f000 8086 	beq.w	8003c76 <HAL_TIM_ConfigClockSource+0x172>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6e:	d87f      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b70      	cmp	r3, #112	@ 0x70
 8003b72:	d01a      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0xa6>
 8003b74:	2b70      	cmp	r3, #112	@ 0x70
 8003b76:	d87b      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b60      	cmp	r3, #96	@ 0x60
 8003b7a:	d050      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x11a>
 8003b7c:	2b60      	cmp	r3, #96	@ 0x60
 8003b7e:	d877      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b50      	cmp	r3, #80	@ 0x50
 8003b82:	d03c      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xfa>
 8003b84:	2b50      	cmp	r3, #80	@ 0x50
 8003b86:	d873      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d058      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x13a>
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	d86f      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b30      	cmp	r3, #48	@ 0x30
 8003b92:	d064      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	2b30      	cmp	r3, #48	@ 0x30
 8003b96:	d86b      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d060      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d867      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05c      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d05a      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ba8:	e062      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bba:	f000 facc 	bl	8004156 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
      break;
 8003bd6:	e04f      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003be8:	f000 fab5 	bl	8004156 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bfa:	609a      	str	r2, [r3, #8]
      break;
 8003bfc:	e03c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 fa2c 	bl	8004068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2150      	movs	r1, #80	@ 0x50
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fa83 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e02c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 fa4a 	bl	80040c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2160      	movs	r1, #96	@ 0x60
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa73 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e01c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f000 fa0c 	bl	8004068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2140      	movs	r1, #64	@ 0x40
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fa63 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e00c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fa5a 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003c6e:	e003      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      break;
 8003c74:	e000      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	@ (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb2:	d007      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a26      	ldr	r2, [pc, #152]	@ (8003d50 <TIM_Base_SetConfig+0xbc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a25      	ldr	r2, [pc, #148]	@ (8003d54 <TIM_Base_SetConfig+0xc0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d108      	bne.n	8003cd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	@ (8003d50 <TIM_Base_SetConfig+0xbc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	@ (8003d54 <TIM_Base_SetConfig+0xc0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a07      	ldr	r2, [pc, #28]	@ (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800

08003d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0201 	bic.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 0302 	bic.w	r3, r3, #2
 8003da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <TIM_OC1_SetConfig+0xc8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10c      	bne.n	8003dce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 0308 	bic.w	r3, r3, #8
 8003dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <TIM_OC1_SetConfig+0xc8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00

08003e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <TIM_OC2_SetConfig+0xd0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10d      	bne.n	8003ea0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <TIM_OC2_SetConfig+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d113      	bne.n	8003ed0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00

08003ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc8 <TIM_OC3_SetConfig+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10d      	bne.n	8003f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <TIM_OC3_SetConfig+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d113      	bne.n	8003fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a0f      	ldr	r2, [pc, #60]	@ (8004064 <TIM_OC4_SetConfig+0x98>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d109      	bne.n	8004040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40012c00 	.word	0x40012c00

08004068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0201 	bic.w	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 030a 	bic.w	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	031b      	lsls	r3, r3, #12
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	f043 0307 	orr.w	r3, r3, #7
 8004144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004170:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	431a      	orrs	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4313      	orrs	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2201      	movs	r2, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e046      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004240:	d009      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a12      	ldr	r2, [pc, #72]	@ (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a10      	ldr	r2, [pc, #64]	@ (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800

08004298 <calloc>:
 8004298:	4b02      	ldr	r3, [pc, #8]	@ (80042a4 <calloc+0xc>)
 800429a:	460a      	mov	r2, r1
 800429c:	4601      	mov	r1, r0
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	f000 b802 	b.w	80042a8 <_calloc_r>
 80042a4:	2000006c 	.word	0x2000006c

080042a8 <_calloc_r>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	fba1 5402 	umull	r5, r4, r1, r2
 80042ae:	b93c      	cbnz	r4, 80042c0 <_calloc_r+0x18>
 80042b0:	4629      	mov	r1, r5
 80042b2:	f000 f83f 	bl	8004334 <_malloc_r>
 80042b6:	4606      	mov	r6, r0
 80042b8:	b928      	cbnz	r0, 80042c6 <_calloc_r+0x1e>
 80042ba:	2600      	movs	r6, #0
 80042bc:	4630      	mov	r0, r6
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	220c      	movs	r2, #12
 80042c2:	6002      	str	r2, [r0, #0]
 80042c4:	e7f9      	b.n	80042ba <_calloc_r+0x12>
 80042c6:	462a      	mov	r2, r5
 80042c8:	4621      	mov	r1, r4
 80042ca:	f000 f8bf 	bl	800444c <memset>
 80042ce:	e7f5      	b.n	80042bc <_calloc_r+0x14>

080042d0 <malloc>:
 80042d0:	4b02      	ldr	r3, [pc, #8]	@ (80042dc <malloc+0xc>)
 80042d2:	4601      	mov	r1, r0
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f000 b82d 	b.w	8004334 <_malloc_r>
 80042da:	bf00      	nop
 80042dc:	2000006c 	.word	0x2000006c

080042e0 <free>:
 80042e0:	4b02      	ldr	r3, [pc, #8]	@ (80042ec <free+0xc>)
 80042e2:	4601      	mov	r1, r0
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	f000 b8f5 	b.w	80044d4 <_free_r>
 80042ea:	bf00      	nop
 80042ec:	2000006c 	.word	0x2000006c

080042f0 <sbrk_aligned>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004330 <sbrk_aligned+0x40>)
 80042f4:	460c      	mov	r4, r1
 80042f6:	6831      	ldr	r1, [r6, #0]
 80042f8:	4605      	mov	r5, r0
 80042fa:	b911      	cbnz	r1, 8004302 <sbrk_aligned+0x12>
 80042fc:	f000 f8ae 	bl	800445c <_sbrk_r>
 8004300:	6030      	str	r0, [r6, #0]
 8004302:	4621      	mov	r1, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f8a9 	bl	800445c <_sbrk_r>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	d103      	bne.n	8004316 <sbrk_aligned+0x26>
 800430e:	f04f 34ff 	mov.w	r4, #4294967295
 8004312:	4620      	mov	r0, r4
 8004314:	bd70      	pop	{r4, r5, r6, pc}
 8004316:	1cc4      	adds	r4, r0, #3
 8004318:	f024 0403 	bic.w	r4, r4, #3
 800431c:	42a0      	cmp	r0, r4
 800431e:	d0f8      	beq.n	8004312 <sbrk_aligned+0x22>
 8004320:	1a21      	subs	r1, r4, r0
 8004322:	4628      	mov	r0, r5
 8004324:	f000 f89a 	bl	800445c <_sbrk_r>
 8004328:	3001      	adds	r0, #1
 800432a:	d1f2      	bne.n	8004312 <sbrk_aligned+0x22>
 800432c:	e7ef      	b.n	800430e <sbrk_aligned+0x1e>
 800432e:	bf00      	nop
 8004330:	20000274 	.word	0x20000274

08004334 <_malloc_r>:
 8004334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004338:	1ccd      	adds	r5, r1, #3
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	2d00      	cmp	r5, #0
 8004348:	4606      	mov	r6, r0
 800434a:	db01      	blt.n	8004350 <_malloc_r+0x1c>
 800434c:	42a9      	cmp	r1, r5
 800434e:	d904      	bls.n	800435a <_malloc_r+0x26>
 8004350:	230c      	movs	r3, #12
 8004352:	6033      	str	r3, [r6, #0]
 8004354:	2000      	movs	r0, #0
 8004356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800435a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004430 <_malloc_r+0xfc>
 800435e:	f000 f869 	bl	8004434 <__malloc_lock>
 8004362:	f8d8 3000 	ldr.w	r3, [r8]
 8004366:	461c      	mov	r4, r3
 8004368:	bb44      	cbnz	r4, 80043bc <_malloc_r+0x88>
 800436a:	4629      	mov	r1, r5
 800436c:	4630      	mov	r0, r6
 800436e:	f7ff ffbf 	bl	80042f0 <sbrk_aligned>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	4604      	mov	r4, r0
 8004376:	d158      	bne.n	800442a <_malloc_r+0xf6>
 8004378:	f8d8 4000 	ldr.w	r4, [r8]
 800437c:	4627      	mov	r7, r4
 800437e:	2f00      	cmp	r7, #0
 8004380:	d143      	bne.n	800440a <_malloc_r+0xd6>
 8004382:	2c00      	cmp	r4, #0
 8004384:	d04b      	beq.n	800441e <_malloc_r+0xea>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	4639      	mov	r1, r7
 800438a:	4630      	mov	r0, r6
 800438c:	eb04 0903 	add.w	r9, r4, r3
 8004390:	f000 f864 	bl	800445c <_sbrk_r>
 8004394:	4581      	cmp	r9, r0
 8004396:	d142      	bne.n	800441e <_malloc_r+0xea>
 8004398:	6821      	ldr	r1, [r4, #0]
 800439a:	4630      	mov	r0, r6
 800439c:	1a6d      	subs	r5, r5, r1
 800439e:	4629      	mov	r1, r5
 80043a0:	f7ff ffa6 	bl	80042f0 <sbrk_aligned>
 80043a4:	3001      	adds	r0, #1
 80043a6:	d03a      	beq.n	800441e <_malloc_r+0xea>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	442b      	add	r3, r5
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	f8d8 3000 	ldr.w	r3, [r8]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	bb62      	cbnz	r2, 8004410 <_malloc_r+0xdc>
 80043b6:	f8c8 7000 	str.w	r7, [r8]
 80043ba:	e00f      	b.n	80043dc <_malloc_r+0xa8>
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	1b52      	subs	r2, r2, r5
 80043c0:	d420      	bmi.n	8004404 <_malloc_r+0xd0>
 80043c2:	2a0b      	cmp	r2, #11
 80043c4:	d917      	bls.n	80043f6 <_malloc_r+0xc2>
 80043c6:	1961      	adds	r1, r4, r5
 80043c8:	42a3      	cmp	r3, r4
 80043ca:	6025      	str	r5, [r4, #0]
 80043cc:	bf18      	it	ne
 80043ce:	6059      	strne	r1, [r3, #4]
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	bf08      	it	eq
 80043d4:	f8c8 1000 	streq.w	r1, [r8]
 80043d8:	5162      	str	r2, [r4, r5]
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	4630      	mov	r0, r6
 80043de:	f000 f82f 	bl	8004440 <__malloc_unlock>
 80043e2:	f104 000b 	add.w	r0, r4, #11
 80043e6:	1d23      	adds	r3, r4, #4
 80043e8:	f020 0007 	bic.w	r0, r0, #7
 80043ec:	1ac2      	subs	r2, r0, r3
 80043ee:	bf1c      	itt	ne
 80043f0:	1a1b      	subne	r3, r3, r0
 80043f2:	50a3      	strne	r3, [r4, r2]
 80043f4:	e7af      	b.n	8004356 <_malloc_r+0x22>
 80043f6:	6862      	ldr	r2, [r4, #4]
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	bf0c      	ite	eq
 80043fc:	f8c8 2000 	streq.w	r2, [r8]
 8004400:	605a      	strne	r2, [r3, #4]
 8004402:	e7eb      	b.n	80043dc <_malloc_r+0xa8>
 8004404:	4623      	mov	r3, r4
 8004406:	6864      	ldr	r4, [r4, #4]
 8004408:	e7ae      	b.n	8004368 <_malloc_r+0x34>
 800440a:	463c      	mov	r4, r7
 800440c:	687f      	ldr	r7, [r7, #4]
 800440e:	e7b6      	b.n	800437e <_malloc_r+0x4a>
 8004410:	461a      	mov	r2, r3
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	42a3      	cmp	r3, r4
 8004416:	d1fb      	bne.n	8004410 <_malloc_r+0xdc>
 8004418:	2300      	movs	r3, #0
 800441a:	6053      	str	r3, [r2, #4]
 800441c:	e7de      	b.n	80043dc <_malloc_r+0xa8>
 800441e:	230c      	movs	r3, #12
 8004420:	4630      	mov	r0, r6
 8004422:	6033      	str	r3, [r6, #0]
 8004424:	f000 f80c 	bl	8004440 <__malloc_unlock>
 8004428:	e794      	b.n	8004354 <_malloc_r+0x20>
 800442a:	6005      	str	r5, [r0, #0]
 800442c:	e7d6      	b.n	80043dc <_malloc_r+0xa8>
 800442e:	bf00      	nop
 8004430:	20000278 	.word	0x20000278

08004434 <__malloc_lock>:
 8004434:	4801      	ldr	r0, [pc, #4]	@ (800443c <__malloc_lock+0x8>)
 8004436:	f000 b84b 	b.w	80044d0 <__retarget_lock_acquire_recursive>
 800443a:	bf00      	nop
 800443c:	200003b8 	.word	0x200003b8

08004440 <__malloc_unlock>:
 8004440:	4801      	ldr	r0, [pc, #4]	@ (8004448 <__malloc_unlock+0x8>)
 8004442:	f000 b846 	b.w	80044d2 <__retarget_lock_release_recursive>
 8004446:	bf00      	nop
 8004448:	200003b8 	.word	0x200003b8

0800444c <memset>:
 800444c:	4603      	mov	r3, r0
 800444e:	4402      	add	r2, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <_sbrk_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	2300      	movs	r3, #0
 8004460:	4d05      	ldr	r5, [pc, #20]	@ (8004478 <_sbrk_r+0x1c>)
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fd f908 	bl	800167c <_sbrk>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_sbrk_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_sbrk_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	200003b4 	.word	0x200003b4

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	@ (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000006c 	.word	0x2000006c

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	2600      	movs	r6, #0
 800448c:	4d0c      	ldr	r5, [pc, #48]	@ (80044c0 <__libc_init_array+0x38>)
 800448e:	4c0d      	ldr	r4, [pc, #52]	@ (80044c4 <__libc_init_array+0x3c>)
 8004490:	1b64      	subs	r4, r4, r5
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	f001 f882 	bl	80055a0 <_init>
 800449c:	2600      	movs	r6, #0
 800449e:	4d0a      	ldr	r5, [pc, #40]	@ (80044c8 <__libc_init_array+0x40>)
 80044a0:	4c0a      	ldr	r4, [pc, #40]	@ (80044cc <__libc_init_array+0x44>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	080057b8 	.word	0x080057b8
 80044c4:	080057b8 	.word	0x080057b8
 80044c8:	080057b8 	.word	0x080057b8
 80044cc:	080057bc 	.word	0x080057bc

080044d0 <__retarget_lock_acquire_recursive>:
 80044d0:	4770      	bx	lr

080044d2 <__retarget_lock_release_recursive>:
 80044d2:	4770      	bx	lr

080044d4 <_free_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	2900      	cmp	r1, #0
 80044da:	d040      	beq.n	800455e <_free_r+0x8a>
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f0c      	subs	r4, r1, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfb8      	it	lt
 80044e6:	18e4      	addlt	r4, r4, r3
 80044e8:	f7ff ffa4 	bl	8004434 <__malloc_lock>
 80044ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <_free_r+0x8c>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	b933      	cbnz	r3, 8004500 <_free_r+0x2c>
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	4628      	mov	r0, r5
 80044f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fc:	f7ff bfa0 	b.w	8004440 <__malloc_unlock>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d908      	bls.n	8004516 <_free_r+0x42>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	bf01      	itttt	eq
 800450c:	6819      	ldreq	r1, [r3, #0]
 800450e:	685b      	ldreq	r3, [r3, #4]
 8004510:	1809      	addeq	r1, r1, r0
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	e7ed      	b.n	80044f2 <_free_r+0x1e>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x4c>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x42>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1850      	adds	r0, r2, r1
 8004524:	42a0      	cmp	r0, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x6c>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	4401      	add	r1, r0
 800452c:	1850      	adds	r0, r2, r1
 800452e:	4283      	cmp	r3, r0
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1e0      	bne.n	80044f6 <_free_r+0x22>
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4408      	add	r0, r1
 800453a:	6010      	str	r0, [r2, #0]
 800453c:	6053      	str	r3, [r2, #4]
 800453e:	e7da      	b.n	80044f6 <_free_r+0x22>
 8004540:	d902      	bls.n	8004548 <_free_r+0x74>
 8004542:	230c      	movs	r3, #12
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	e7d6      	b.n	80044f6 <_free_r+0x22>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	bf01      	itttt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	1809      	addeq	r1, r1, r0
 8004556:	6021      	streq	r1, [r4, #0]
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	6054      	str	r4, [r2, #4]
 800455c:	e7cb      	b.n	80044f6 <_free_r+0x22>
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000278 	.word	0x20000278

08004564 <cos>:
 8004564:	b530      	push	{r4, r5, lr}
 8004566:	4d20      	ldr	r5, [pc, #128]	@ (80045e8 <cos+0x84>)
 8004568:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800456c:	42ac      	cmp	r4, r5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	b087      	sub	sp, #28
 8004574:	d806      	bhi.n	8004584 <cos+0x20>
 8004576:	2200      	movs	r2, #0
 8004578:	2300      	movs	r3, #0
 800457a:	b007      	add	sp, #28
 800457c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004580:	f000 b87e 	b.w	8004680 <__kernel_cos>
 8004584:	4d19      	ldr	r5, [pc, #100]	@ (80045ec <cos+0x88>)
 8004586:	42ac      	cmp	r4, r5
 8004588:	d903      	bls.n	8004592 <cos+0x2e>
 800458a:	f7fb fde5 	bl	8000158 <__aeabi_dsub>
 800458e:	b007      	add	sp, #28
 8004590:	bd30      	pop	{r4, r5, pc}
 8004592:	aa02      	add	r2, sp, #8
 8004594:	f000 f9ec 	bl	8004970 <__ieee754_rem_pio2>
 8004598:	f000 0003 	and.w	r0, r0, #3
 800459c:	2801      	cmp	r0, #1
 800459e:	d009      	beq.n	80045b4 <cos+0x50>
 80045a0:	2802      	cmp	r0, #2
 80045a2:	d011      	beq.n	80045c8 <cos+0x64>
 80045a4:	b9b8      	cbnz	r0, 80045d6 <cos+0x72>
 80045a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ae:	f000 f867 	bl	8004680 <__kernel_cos>
 80045b2:	e7ec      	b.n	800458e <cos+0x2a>
 80045b4:	9000      	str	r0, [sp, #0]
 80045b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045be:	f000 f91f 	bl	8004800 <__kernel_sin>
 80045c2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80045c6:	e7e2      	b.n	800458e <cos+0x2a>
 80045c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d0:	f000 f856 	bl	8004680 <__kernel_cos>
 80045d4:	e7f5      	b.n	80045c2 <cos+0x5e>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045e2:	f000 f90d 	bl	8004800 <__kernel_sin>
 80045e6:	e7d2      	b.n	800458e <cos+0x2a>
 80045e8:	3fe921fb 	.word	0x3fe921fb
 80045ec:	7fefffff 	.word	0x7fefffff

080045f0 <sin>:
 80045f0:	b530      	push	{r4, r5, lr}
 80045f2:	4d20      	ldr	r5, [pc, #128]	@ (8004674 <sin+0x84>)
 80045f4:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80045f8:	42ac      	cmp	r4, r5
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	b087      	sub	sp, #28
 8004600:	d806      	bhi.n	8004610 <sin+0x20>
 8004602:	2300      	movs	r3, #0
 8004604:	2200      	movs	r2, #0
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2300      	movs	r3, #0
 800460a:	f000 f8f9 	bl	8004800 <__kernel_sin>
 800460e:	e004      	b.n	800461a <sin+0x2a>
 8004610:	4d19      	ldr	r5, [pc, #100]	@ (8004678 <sin+0x88>)
 8004612:	42ac      	cmp	r4, r5
 8004614:	d903      	bls.n	800461e <sin+0x2e>
 8004616:	f7fb fd9f 	bl	8000158 <__aeabi_dsub>
 800461a:	b007      	add	sp, #28
 800461c:	bd30      	pop	{r4, r5, pc}
 800461e:	aa02      	add	r2, sp, #8
 8004620:	f000 f9a6 	bl	8004970 <__ieee754_rem_pio2>
 8004624:	f000 0003 	and.w	r0, r0, #3
 8004628:	2801      	cmp	r0, #1
 800462a:	d009      	beq.n	8004640 <sin+0x50>
 800462c:	2802      	cmp	r0, #2
 800462e:	d00e      	beq.n	800464e <sin+0x5e>
 8004630:	b9c0      	cbnz	r0, 8004664 <sin+0x74>
 8004632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004636:	2301      	movs	r3, #1
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800463e:	e7e4      	b.n	800460a <sin+0x1a>
 8004640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004648:	f000 f81a 	bl	8004680 <__kernel_cos>
 800464c:	e7e5      	b.n	800461a <sin+0x2a>
 800464e:	2301      	movs	r3, #1
 8004650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800465a:	f000 f8d1 	bl	8004800 <__kernel_sin>
 800465e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004662:	e7da      	b.n	800461a <sin+0x2a>
 8004664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800466c:	f000 f808 	bl	8004680 <__kernel_cos>
 8004670:	e7f5      	b.n	800465e <sin+0x6e>
 8004672:	bf00      	nop
 8004674:	3fe921fb 	.word	0x3fe921fb
 8004678:	7fefffff 	.word	0x7fefffff
 800467c:	00000000 	.word	0x00000000

08004680 <__kernel_cos>:
 8004680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004688:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800468c:	4680      	mov	r8, r0
 800468e:	4689      	mov	r9, r1
 8004690:	e9cd 2300 	strd	r2, r3, [sp]
 8004694:	d204      	bcs.n	80046a0 <__kernel_cos+0x20>
 8004696:	f7fc f9b1 	bl	80009fc <__aeabi_d2iz>
 800469a:	2800      	cmp	r0, #0
 800469c:	f000 8086 	beq.w	80047ac <__kernel_cos+0x12c>
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	4640      	mov	r0, r8
 80046a6:	4649      	mov	r1, r9
 80046a8:	f7fb ff0e 	bl	80004c8 <__aeabi_dmul>
 80046ac:	2200      	movs	r2, #0
 80046ae:	4b4e      	ldr	r3, [pc, #312]	@ (80047e8 <__kernel_cos+0x168>)
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
 80046b4:	f7fb ff08 	bl	80004c8 <__aeabi_dmul>
 80046b8:	a33f      	add	r3, pc, #252	@ (adr r3, 80047b8 <__kernel_cos+0x138>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	4682      	mov	sl, r0
 80046c0:	468b      	mov	fp, r1
 80046c2:	4620      	mov	r0, r4
 80046c4:	4629      	mov	r1, r5
 80046c6:	f7fb feff 	bl	80004c8 <__aeabi_dmul>
 80046ca:	a33d      	add	r3, pc, #244	@ (adr r3, 80047c0 <__kernel_cos+0x140>)
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f7fb fd44 	bl	800015c <__adddf3>
 80046d4:	4622      	mov	r2, r4
 80046d6:	462b      	mov	r3, r5
 80046d8:	f7fb fef6 	bl	80004c8 <__aeabi_dmul>
 80046dc:	a33a      	add	r3, pc, #232	@ (adr r3, 80047c8 <__kernel_cos+0x148>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb fd39 	bl	8000158 <__aeabi_dsub>
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	f7fb feed 	bl	80004c8 <__aeabi_dmul>
 80046ee:	a338      	add	r3, pc, #224	@ (adr r3, 80047d0 <__kernel_cos+0x150>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb fd32 	bl	800015c <__adddf3>
 80046f8:	4622      	mov	r2, r4
 80046fa:	462b      	mov	r3, r5
 80046fc:	f7fb fee4 	bl	80004c8 <__aeabi_dmul>
 8004700:	a335      	add	r3, pc, #212	@ (adr r3, 80047d8 <__kernel_cos+0x158>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb fd27 	bl	8000158 <__aeabi_dsub>
 800470a:	4622      	mov	r2, r4
 800470c:	462b      	mov	r3, r5
 800470e:	f7fb fedb 	bl	80004c8 <__aeabi_dmul>
 8004712:	a333      	add	r3, pc, #204	@ (adr r3, 80047e0 <__kernel_cos+0x160>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb fd20 	bl	800015c <__adddf3>
 800471c:	4622      	mov	r2, r4
 800471e:	462b      	mov	r3, r5
 8004720:	f7fb fed2 	bl	80004c8 <__aeabi_dmul>
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	f7fb fece 	bl	80004c8 <__aeabi_dmul>
 800472c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004730:	4604      	mov	r4, r0
 8004732:	460d      	mov	r5, r1
 8004734:	4640      	mov	r0, r8
 8004736:	4649      	mov	r1, r9
 8004738:	f7fb fec6 	bl	80004c8 <__aeabi_dmul>
 800473c:	460b      	mov	r3, r1
 800473e:	4602      	mov	r2, r0
 8004740:	4629      	mov	r1, r5
 8004742:	4620      	mov	r0, r4
 8004744:	f7fb fd08 	bl	8000158 <__aeabi_dsub>
 8004748:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <__kernel_cos+0x16c>)
 800474a:	4680      	mov	r8, r0
 800474c:	429e      	cmp	r6, r3
 800474e:	4689      	mov	r9, r1
 8004750:	d80e      	bhi.n	8004770 <__kernel_cos+0xf0>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4650      	mov	r0, sl
 8004758:	4659      	mov	r1, fp
 800475a:	f7fb fcfd 	bl	8000158 <__aeabi_dsub>
 800475e:	4602      	mov	r2, r0
 8004760:	2000      	movs	r0, #0
 8004762:	460b      	mov	r3, r1
 8004764:	4922      	ldr	r1, [pc, #136]	@ (80047f0 <__kernel_cos+0x170>)
 8004766:	f7fb fcf7 	bl	8000158 <__aeabi_dsub>
 800476a:	b003      	add	sp, #12
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	2400      	movs	r4, #0
 8004772:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <__kernel_cos+0x174>)
 8004774:	4622      	mov	r2, r4
 8004776:	429e      	cmp	r6, r3
 8004778:	bf8c      	ite	hi
 800477a:	4d1f      	ldrhi	r5, [pc, #124]	@ (80047f8 <__kernel_cos+0x178>)
 800477c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004780:	462b      	mov	r3, r5
 8004782:	2000      	movs	r0, #0
 8004784:	491a      	ldr	r1, [pc, #104]	@ (80047f0 <__kernel_cos+0x170>)
 8004786:	f7fb fce7 	bl	8000158 <__aeabi_dsub>
 800478a:	4622      	mov	r2, r4
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	462b      	mov	r3, r5
 8004792:	4650      	mov	r0, sl
 8004794:	4659      	mov	r1, fp
 8004796:	f7fb fcdf 	bl	8000158 <__aeabi_dsub>
 800479a:	4642      	mov	r2, r8
 800479c:	464b      	mov	r3, r9
 800479e:	f7fb fcdb 	bl	8000158 <__aeabi_dsub>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4630      	mov	r0, r6
 80047a8:	4639      	mov	r1, r7
 80047aa:	e7dc      	b.n	8004766 <__kernel_cos+0xe6>
 80047ac:	2000      	movs	r0, #0
 80047ae:	4910      	ldr	r1, [pc, #64]	@ (80047f0 <__kernel_cos+0x170>)
 80047b0:	e7db      	b.n	800476a <__kernel_cos+0xea>
 80047b2:	bf00      	nop
 80047b4:	f3af 8000 	nop.w
 80047b8:	be8838d4 	.word	0xbe8838d4
 80047bc:	bda8fae9 	.word	0xbda8fae9
 80047c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80047c4:	3e21ee9e 	.word	0x3e21ee9e
 80047c8:	809c52ad 	.word	0x809c52ad
 80047cc:	3e927e4f 	.word	0x3e927e4f
 80047d0:	19cb1590 	.word	0x19cb1590
 80047d4:	3efa01a0 	.word	0x3efa01a0
 80047d8:	16c15177 	.word	0x16c15177
 80047dc:	3f56c16c 	.word	0x3f56c16c
 80047e0:	5555554c 	.word	0x5555554c
 80047e4:	3fa55555 	.word	0x3fa55555
 80047e8:	3fe00000 	.word	0x3fe00000
 80047ec:	3fd33332 	.word	0x3fd33332
 80047f0:	3ff00000 	.word	0x3ff00000
 80047f4:	3fe90000 	.word	0x3fe90000
 80047f8:	3fd20000 	.word	0x3fd20000
 80047fc:	00000000 	.word	0x00000000

08004800 <__kernel_sin>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	461f      	mov	r7, r3
 8004806:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800480a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	4616      	mov	r6, r2
 8004814:	b085      	sub	sp, #20
 8004816:	d203      	bcs.n	8004820 <__kernel_sin+0x20>
 8004818:	f7fc f8f0 	bl	80009fc <__aeabi_d2iz>
 800481c:	2800      	cmp	r0, #0
 800481e:	d051      	beq.n	80048c4 <__kernel_sin+0xc4>
 8004820:	4622      	mov	r2, r4
 8004822:	462b      	mov	r3, r5
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fe4e 	bl	80004c8 <__aeabi_dmul>
 800482c:	4682      	mov	sl, r0
 800482e:	468b      	mov	fp, r1
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f7fb fe46 	bl	80004c8 <__aeabi_dmul>
 800483c:	a33e      	add	r3, pc, #248	@ (adr r3, 8004938 <__kernel_sin+0x138>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	4680      	mov	r8, r0
 8004844:	4689      	mov	r9, r1
 8004846:	4650      	mov	r0, sl
 8004848:	4659      	mov	r1, fp
 800484a:	f7fb fe3d 	bl	80004c8 <__aeabi_dmul>
 800484e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004940 <__kernel_sin+0x140>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fc80 	bl	8000158 <__aeabi_dsub>
 8004858:	4652      	mov	r2, sl
 800485a:	465b      	mov	r3, fp
 800485c:	f7fb fe34 	bl	80004c8 <__aeabi_dmul>
 8004860:	a339      	add	r3, pc, #228	@ (adr r3, 8004948 <__kernel_sin+0x148>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb fc79 	bl	800015c <__adddf3>
 800486a:	4652      	mov	r2, sl
 800486c:	465b      	mov	r3, fp
 800486e:	f7fb fe2b 	bl	80004c8 <__aeabi_dmul>
 8004872:	a337      	add	r3, pc, #220	@ (adr r3, 8004950 <__kernel_sin+0x150>)
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb fc6e 	bl	8000158 <__aeabi_dsub>
 800487c:	4652      	mov	r2, sl
 800487e:	465b      	mov	r3, fp
 8004880:	f7fb fe22 	bl	80004c8 <__aeabi_dmul>
 8004884:	a334      	add	r3, pc, #208	@ (adr r3, 8004958 <__kernel_sin+0x158>)
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f7fb fc67 	bl	800015c <__adddf3>
 800488e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004890:	e9cd 0100 	strd	r0, r1, [sp]
 8004894:	b9db      	cbnz	r3, 80048ce <__kernel_sin+0xce>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4650      	mov	r0, sl
 800489c:	4659      	mov	r1, fp
 800489e:	f7fb fe13 	bl	80004c8 <__aeabi_dmul>
 80048a2:	a32f      	add	r3, pc, #188	@ (adr r3, 8004960 <__kernel_sin+0x160>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fc56 	bl	8000158 <__aeabi_dsub>
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	f7fb fe0a 	bl	80004c8 <__aeabi_dmul>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4620      	mov	r0, r4
 80048ba:	4629      	mov	r1, r5
 80048bc:	f7fb fc4e 	bl	800015c <__adddf3>
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	4620      	mov	r0, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	b005      	add	sp, #20
 80048ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ce:	2200      	movs	r2, #0
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <__kernel_sin+0x168>)
 80048d6:	f7fb fdf7 	bl	80004c8 <__aeabi_dmul>
 80048da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e2:	4640      	mov	r0, r8
 80048e4:	4649      	mov	r1, r9
 80048e6:	f7fb fdef 	bl	80004c8 <__aeabi_dmul>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f2:	f7fb fc31 	bl	8000158 <__aeabi_dsub>
 80048f6:	4652      	mov	r2, sl
 80048f8:	465b      	mov	r3, fp
 80048fa:	f7fb fde5 	bl	80004c8 <__aeabi_dmul>
 80048fe:	4632      	mov	r2, r6
 8004900:	463b      	mov	r3, r7
 8004902:	f7fb fc29 	bl	8000158 <__aeabi_dsub>
 8004906:	a316      	add	r3, pc, #88	@ (adr r3, 8004960 <__kernel_sin+0x160>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	4606      	mov	r6, r0
 800490e:	460f      	mov	r7, r1
 8004910:	4640      	mov	r0, r8
 8004912:	4649      	mov	r1, r9
 8004914:	f7fb fdd8 	bl	80004c8 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4630      	mov	r0, r6
 800491e:	4639      	mov	r1, r7
 8004920:	f7fb fc1c 	bl	800015c <__adddf3>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fc14 	bl	8000158 <__aeabi_dsub>
 8004930:	e7c6      	b.n	80048c0 <__kernel_sin+0xc0>
 8004932:	bf00      	nop
 8004934:	f3af 8000 	nop.w
 8004938:	5acfd57c 	.word	0x5acfd57c
 800493c:	3de5d93a 	.word	0x3de5d93a
 8004940:	8a2b9ceb 	.word	0x8a2b9ceb
 8004944:	3e5ae5e6 	.word	0x3e5ae5e6
 8004948:	57b1fe7d 	.word	0x57b1fe7d
 800494c:	3ec71de3 	.word	0x3ec71de3
 8004950:	19c161d5 	.word	0x19c161d5
 8004954:	3f2a01a0 	.word	0x3f2a01a0
 8004958:	1110f8a6 	.word	0x1110f8a6
 800495c:	3f811111 	.word	0x3f811111
 8004960:	55555549 	.word	0x55555549
 8004964:	3fc55555 	.word	0x3fc55555
 8004968:	3fe00000 	.word	0x3fe00000
 800496c:	00000000 	.word	0x00000000

08004970 <__ieee754_rem_pio2>:
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	4bc4      	ldr	r3, [pc, #784]	@ (8004c88 <__ieee754_rem_pio2+0x318>)
 8004976:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800497a:	b08d      	sub	sp, #52	@ 0x34
 800497c:	4598      	cmp	r8, r3
 800497e:	4606      	mov	r6, r0
 8004980:	460f      	mov	r7, r1
 8004982:	4614      	mov	r4, r2
 8004984:	9104      	str	r1, [sp, #16]
 8004986:	d807      	bhi.n	8004998 <__ieee754_rem_pio2+0x28>
 8004988:	e9c2 6700 	strd	r6, r7, [r2]
 800498c:	2300      	movs	r3, #0
 800498e:	2200      	movs	r2, #0
 8004990:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004994:	2500      	movs	r5, #0
 8004996:	e026      	b.n	80049e6 <__ieee754_rem_pio2+0x76>
 8004998:	4bbc      	ldr	r3, [pc, #752]	@ (8004c8c <__ieee754_rem_pio2+0x31c>)
 800499a:	4598      	cmp	r8, r3
 800499c:	d876      	bhi.n	8004a8c <__ieee754_rem_pio2+0x11c>
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	4dbb      	ldr	r5, [pc, #748]	@ (8004c90 <__ieee754_rem_pio2+0x320>)
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e0>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	dd38      	ble.n	8004a1e <__ieee754_rem_pio2+0xae>
 80049ac:	f7fb fbd4 	bl	8000158 <__aeabi_dsub>
 80049b0:	45a8      	cmp	r8, r5
 80049b2:	4606      	mov	r6, r0
 80049b4:	460f      	mov	r7, r1
 80049b6:	d01a      	beq.n	80049ee <__ieee754_rem_pio2+0x7e>
 80049b8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004c58 <__ieee754_rem_pio2+0x2e8>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fbcb 	bl	8000158 <__aeabi_dsub>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4680      	mov	r8, r0
 80049c8:	4689      	mov	r9, r1
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	f7fb fbc3 	bl	8000158 <__aeabi_dsub>
 80049d2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004c58 <__ieee754_rem_pio2+0x2e8>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f7fb fbbe 	bl	8000158 <__aeabi_dsub>
 80049dc:	2501      	movs	r5, #1
 80049de:	e9c4 8900 	strd	r8, r9, [r4]
 80049e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049e6:	4628      	mov	r0, r5
 80049e8:	b00d      	add	sp, #52	@ 0x34
 80049ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ee:	a39c      	add	r3, pc, #624	@ (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f0>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f7fb fbb0 	bl	8000158 <__aeabi_dsub>
 80049f8:	a39b      	add	r3, pc, #620	@ (adr r3, 8004c68 <__ieee754_rem_pio2+0x2f8>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	4606      	mov	r6, r0
 8004a00:	460f      	mov	r7, r1
 8004a02:	f7fb fba9 	bl	8000158 <__aeabi_dsub>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4680      	mov	r8, r0
 8004a0c:	4689      	mov	r9, r1
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4639      	mov	r1, r7
 8004a12:	f7fb fba1 	bl	8000158 <__aeabi_dsub>
 8004a16:	a394      	add	r3, pc, #592	@ (adr r3, 8004c68 <__ieee754_rem_pio2+0x2f8>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	e7dc      	b.n	80049d8 <__ieee754_rem_pio2+0x68>
 8004a1e:	f7fb fb9d 	bl	800015c <__adddf3>
 8004a22:	45a8      	cmp	r8, r5
 8004a24:	4606      	mov	r6, r0
 8004a26:	460f      	mov	r7, r1
 8004a28:	d018      	beq.n	8004a5c <__ieee754_rem_pio2+0xec>
 8004a2a:	a38b      	add	r3, pc, #556	@ (adr r3, 8004c58 <__ieee754_rem_pio2+0x2e8>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fb94 	bl	800015c <__adddf3>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4680      	mov	r8, r0
 8004a3a:	4689      	mov	r9, r1
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	4639      	mov	r1, r7
 8004a40:	f7fb fb8a 	bl	8000158 <__aeabi_dsub>
 8004a44:	a384      	add	r3, pc, #528	@ (adr r3, 8004c58 <__ieee754_rem_pio2+0x2e8>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f7fb fb87 	bl	800015c <__adddf3>
 8004a4e:	f04f 35ff 	mov.w	r5, #4294967295
 8004a52:	e9c4 8900 	strd	r8, r9, [r4]
 8004a56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a5a:	e7c4      	b.n	80049e6 <__ieee754_rem_pio2+0x76>
 8004a5c:	a380      	add	r3, pc, #512	@ (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f0>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f7fb fb7b 	bl	800015c <__adddf3>
 8004a66:	a380      	add	r3, pc, #512	@ (adr r3, 8004c68 <__ieee754_rem_pio2+0x2f8>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	460f      	mov	r7, r1
 8004a70:	f7fb fb74 	bl	800015c <__adddf3>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4680      	mov	r8, r0
 8004a7a:	4689      	mov	r9, r1
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	4639      	mov	r1, r7
 8004a80:	f7fb fb6a 	bl	8000158 <__aeabi_dsub>
 8004a84:	a378      	add	r3, pc, #480	@ (adr r3, 8004c68 <__ieee754_rem_pio2+0x2f8>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	e7de      	b.n	8004a4a <__ieee754_rem_pio2+0xda>
 8004a8c:	4b81      	ldr	r3, [pc, #516]	@ (8004c94 <__ieee754_rem_pio2+0x324>)
 8004a8e:	4598      	cmp	r8, r3
 8004a90:	f200 80cf 	bhi.w	8004c32 <__ieee754_rem_pio2+0x2c2>
 8004a94:	f000 f962 	bl	8004d5c <fabs>
 8004a98:	a375      	add	r3, pc, #468	@ (adr r3, 8004c70 <__ieee754_rem_pio2+0x300>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	f7fb fd11 	bl	80004c8 <__aeabi_dmul>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8004c98 <__ieee754_rem_pio2+0x328>)
 8004aaa:	f7fb fb57 	bl	800015c <__adddf3>
 8004aae:	f7fb ffa5 	bl	80009fc <__aeabi_d2iz>
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	f7fb fc9e 	bl	80003f4 <__aeabi_i2d>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ac0:	a363      	add	r3, pc, #396	@ (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e0>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fcff 	bl	80004c8 <__aeabi_dmul>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4630      	mov	r0, r6
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	f7fb fb41 	bl	8000158 <__aeabi_dsub>
 8004ad6:	a360      	add	r3, pc, #384	@ (adr r3, 8004c58 <__ieee754_rem_pio2+0x2e8>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	4682      	mov	sl, r0
 8004ade:	468b      	mov	fp, r1
 8004ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae4:	f7fb fcf0 	bl	80004c8 <__aeabi_dmul>
 8004ae8:	2d1f      	cmp	r5, #31
 8004aea:	4606      	mov	r6, r0
 8004aec:	460f      	mov	r7, r1
 8004aee:	dc0c      	bgt.n	8004b0a <__ieee754_rem_pio2+0x19a>
 8004af0:	4b6a      	ldr	r3, [pc, #424]	@ (8004c9c <__ieee754_rem_pio2+0x32c>)
 8004af2:	1e6a      	subs	r2, r5, #1
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	4543      	cmp	r3, r8
 8004afa:	d006      	beq.n	8004b0a <__ieee754_rem_pio2+0x19a>
 8004afc:	4632      	mov	r2, r6
 8004afe:	463b      	mov	r3, r7
 8004b00:	4650      	mov	r0, sl
 8004b02:	4659      	mov	r1, fp
 8004b04:	f7fb fb28 	bl	8000158 <__aeabi_dsub>
 8004b08:	e00e      	b.n	8004b28 <__ieee754_rem_pio2+0x1b8>
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	4650      	mov	r0, sl
 8004b10:	4659      	mov	r1, fp
 8004b12:	f7fb fb21 	bl	8000158 <__aeabi_dsub>
 8004b16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b20:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	dc02      	bgt.n	8004b2e <__ieee754_rem_pio2+0x1be>
 8004b28:	e9c4 0100 	strd	r0, r1, [r4]
 8004b2c:	e039      	b.n	8004ba2 <__ieee754_rem_pio2+0x232>
 8004b2e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f0>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b38:	f7fb fcc6 	bl	80004c8 <__aeabi_dmul>
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	460f      	mov	r7, r1
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7fb fb06 	bl	8000158 <__aeabi_dsub>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4680      	mov	r8, r0
 8004b52:	4689      	mov	r9, r1
 8004b54:	4650      	mov	r0, sl
 8004b56:	4659      	mov	r1, fp
 8004b58:	f7fb fafe 	bl	8000158 <__aeabi_dsub>
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463b      	mov	r3, r7
 8004b60:	f7fb fafa 	bl	8000158 <__aeabi_dsub>
 8004b64:	a340      	add	r3, pc, #256	@ (adr r3, 8004c68 <__ieee754_rem_pio2+0x2f8>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b72:	f7fb fca9 	bl	80004c8 <__aeabi_dmul>
 8004b76:	4632      	mov	r2, r6
 8004b78:	463b      	mov	r3, r7
 8004b7a:	f7fb faed 	bl	8000158 <__aeabi_dsub>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4606      	mov	r6, r0
 8004b84:	460f      	mov	r7, r1
 8004b86:	4640      	mov	r0, r8
 8004b88:	4649      	mov	r1, r9
 8004b8a:	f7fb fae5 	bl	8000158 <__aeabi_dsub>
 8004b8e:	9a05      	ldr	r2, [sp, #20]
 8004b90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b31      	cmp	r3, #49	@ 0x31
 8004b98:	dc20      	bgt.n	8004bdc <__ieee754_rem_pio2+0x26c>
 8004b9a:	46c2      	mov	sl, r8
 8004b9c:	46cb      	mov	fp, r9
 8004b9e:	e9c4 0100 	strd	r0, r1, [r4]
 8004ba2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004ba6:	4650      	mov	r0, sl
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	4659      	mov	r1, fp
 8004bae:	f7fb fad3 	bl	8000158 <__aeabi_dsub>
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	f7fb facf 	bl	8000158 <__aeabi_dsub>
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f6bf af10 	bge.w	80049e6 <__ieee754_rem_pio2+0x76>
 8004bc6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bd0:	f8c4 8000 	str.w	r8, [r4]
 8004bd4:	60a0      	str	r0, [r4, #8]
 8004bd6:	60e3      	str	r3, [r4, #12]
 8004bd8:	426d      	negs	r5, r5
 8004bda:	e704      	b.n	80049e6 <__ieee754_rem_pio2+0x76>
 8004bdc:	a326      	add	r3, pc, #152	@ (adr r3, 8004c78 <__ieee754_rem_pio2+0x308>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004be6:	f7fb fc6f 	bl	80004c8 <__aeabi_dmul>
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	f7fb faaf 	bl	8000158 <__aeabi_dsub>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4682      	mov	sl, r0
 8004c00:	468b      	mov	fp, r1
 8004c02:	4640      	mov	r0, r8
 8004c04:	4649      	mov	r1, r9
 8004c06:	f7fb faa7 	bl	8000158 <__aeabi_dsub>
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	f7fb faa3 	bl	8000158 <__aeabi_dsub>
 8004c12:	a31b      	add	r3, pc, #108	@ (adr r3, 8004c80 <__ieee754_rem_pio2+0x310>)
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	4606      	mov	r6, r0
 8004c1a:	460f      	mov	r7, r1
 8004c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c20:	f7fb fc52 	bl	80004c8 <__aeabi_dmul>
 8004c24:	4632      	mov	r2, r6
 8004c26:	463b      	mov	r3, r7
 8004c28:	f7fb fa96 	bl	8000158 <__aeabi_dsub>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460f      	mov	r7, r1
 8004c30:	e764      	b.n	8004afc <__ieee754_rem_pio2+0x18c>
 8004c32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <__ieee754_rem_pio2+0x330>)
 8004c34:	4598      	cmp	r8, r3
 8004c36:	d935      	bls.n	8004ca4 <__ieee754_rem_pio2+0x334>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	f7fb fa8c 	bl	8000158 <__aeabi_dsub>
 8004c40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c44:	e9c4 0100 	strd	r0, r1, [r4]
 8004c48:	e6a4      	b.n	8004994 <__ieee754_rem_pio2+0x24>
 8004c4a:	bf00      	nop
 8004c4c:	f3af 8000 	nop.w
 8004c50:	54400000 	.word	0x54400000
 8004c54:	3ff921fb 	.word	0x3ff921fb
 8004c58:	1a626331 	.word	0x1a626331
 8004c5c:	3dd0b461 	.word	0x3dd0b461
 8004c60:	1a600000 	.word	0x1a600000
 8004c64:	3dd0b461 	.word	0x3dd0b461
 8004c68:	2e037073 	.word	0x2e037073
 8004c6c:	3ba3198a 	.word	0x3ba3198a
 8004c70:	6dc9c883 	.word	0x6dc9c883
 8004c74:	3fe45f30 	.word	0x3fe45f30
 8004c78:	2e000000 	.word	0x2e000000
 8004c7c:	3ba3198a 	.word	0x3ba3198a
 8004c80:	252049c1 	.word	0x252049c1
 8004c84:	397b839a 	.word	0x397b839a
 8004c88:	3fe921fb 	.word	0x3fe921fb
 8004c8c:	4002d97b 	.word	0x4002d97b
 8004c90:	3ff921fb 	.word	0x3ff921fb
 8004c94:	413921fb 	.word	0x413921fb
 8004c98:	3fe00000 	.word	0x3fe00000
 8004c9c:	080055dc 	.word	0x080055dc
 8004ca0:	7fefffff 	.word	0x7fefffff
 8004ca4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004ca8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004cac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	f7fb fea3 	bl	80009fc <__aeabi_d2iz>
 8004cb6:	f7fb fb9d 	bl	80003f4 <__aeabi_i2d>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cc6:	f7fb fa47 	bl	8000158 <__aeabi_dsub>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <__ieee754_rem_pio2+0x3e4>)
 8004cce:	f7fb fbfb 	bl	80004c8 <__aeabi_dmul>
 8004cd2:	460f      	mov	r7, r1
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	f7fb fe91 	bl	80009fc <__aeabi_d2iz>
 8004cda:	f7fb fb8b 	bl	80003f4 <__aeabi_i2d>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cea:	f7fb fa35 	bl	8000158 <__aeabi_dsub>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4b18      	ldr	r3, [pc, #96]	@ (8004d54 <__ieee754_rem_pio2+0x3e4>)
 8004cf2:	f7fb fbe9 	bl	80004c8 <__aeabi_dmul>
 8004cf6:	f04f 0803 	mov.w	r8, #3
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	2700      	movs	r7, #0
 8004cfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004d02:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004d06:	4632      	mov	r2, r6
 8004d08:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	46c2      	mov	sl, r8
 8004d10:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d14:	f7fb fe40 	bl	8000998 <__aeabi_dcmpeq>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d1f4      	bne.n	8004d06 <__ieee754_rem_pio2+0x396>
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d58 <__ieee754_rem_pio2+0x3e8>)
 8004d1e:	462a      	mov	r2, r5
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	2302      	movs	r3, #2
 8004d24:	4621      	mov	r1, r4
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	a806      	add	r0, sp, #24
 8004d2a:	4653      	mov	r3, sl
 8004d2c:	f000 f892 	bl	8004e54 <__kernel_rem_pio2>
 8004d30:	9b04      	ldr	r3, [sp, #16]
 8004d32:	4605      	mov	r5, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f6bf ae56 	bge.w	80049e6 <__ieee754_rem_pio2+0x76>
 8004d3a:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004d3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d42:	e9c4 2300 	strd	r2, r3, [r4]
 8004d46:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004d4a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004d52:	e741      	b.n	8004bd8 <__ieee754_rem_pio2+0x268>
 8004d54:	41700000 	.word	0x41700000
 8004d58:	0800565c 	.word	0x0800565c

08004d5c <fabs>:
 8004d5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004d60:	4619      	mov	r1, r3
 8004d62:	4770      	bx	lr
 8004d64:	0000      	movs	r0, r0
	...

08004d68 <scalbn>:
 8004d68:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d72:	4683      	mov	fp, r0
 8004d74:	468c      	mov	ip, r1
 8004d76:	460b      	mov	r3, r1
 8004d78:	b982      	cbnz	r2, 8004d9c <scalbn+0x34>
 8004d7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	d039      	beq.n	8004df6 <scalbn+0x8e>
 8004d82:	4b2f      	ldr	r3, [pc, #188]	@ (8004e40 <scalbn+0xd8>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	f7fb fb9f 	bl	80004c8 <__aeabi_dmul>
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e44 <scalbn+0xdc>)
 8004d8c:	4683      	mov	fp, r0
 8004d8e:	429e      	cmp	r6, r3
 8004d90:	468c      	mov	ip, r1
 8004d92:	da0d      	bge.n	8004db0 <scalbn+0x48>
 8004d94:	a326      	add	r3, pc, #152	@ (adr r3, 8004e30 <scalbn+0xc8>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	e01b      	b.n	8004dd4 <scalbn+0x6c>
 8004d9c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004da0:	42ba      	cmp	r2, r7
 8004da2:	d109      	bne.n	8004db8 <scalbn+0x50>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f7fb f9d9 	bl	800015c <__adddf3>
 8004daa:	4683      	mov	fp, r0
 8004dac:	468c      	mov	ip, r1
 8004dae:	e022      	b.n	8004df6 <scalbn+0x8e>
 8004db0:	460b      	mov	r3, r1
 8004db2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004db6:	3a36      	subs	r2, #54	@ 0x36
 8004db8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004dbc:	428e      	cmp	r6, r1
 8004dbe:	dd0c      	ble.n	8004dda <scalbn+0x72>
 8004dc0:	a31d      	add	r3, pc, #116	@ (adr r3, 8004e38 <scalbn+0xd0>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	461c      	mov	r4, r3
 8004dc8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8004dcc:	f361 74df 	bfi	r4, r1, #31, #1
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	481d      	ldr	r0, [pc, #116]	@ (8004e48 <scalbn+0xe0>)
 8004dd4:	f7fb fb78 	bl	80004c8 <__aeabi_dmul>
 8004dd8:	e7e7      	b.n	8004daa <scalbn+0x42>
 8004dda:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004dde:	4432      	add	r2, r6
 8004de0:	428a      	cmp	r2, r1
 8004de2:	dced      	bgt.n	8004dc0 <scalbn+0x58>
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	dd0a      	ble.n	8004dfe <scalbn+0x96>
 8004de8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004dec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004df0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004df4:	46ac      	mov	ip, r5
 8004df6:	4658      	mov	r0, fp
 8004df8:	4661      	mov	r1, ip
 8004dfa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004dfe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004e02:	da09      	bge.n	8004e18 <scalbn+0xb0>
 8004e04:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004e08:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004e0c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004e10:	480e      	ldr	r0, [pc, #56]	@ (8004e4c <scalbn+0xe4>)
 8004e12:	f041 011f 	orr.w	r1, r1, #31
 8004e16:	e7bd      	b.n	8004d94 <scalbn+0x2c>
 8004e18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004e1c:	3236      	adds	r2, #54	@ 0x36
 8004e1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004e22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e26:	4658      	mov	r0, fp
 8004e28:	4629      	mov	r1, r5
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <scalbn+0xe8>)
 8004e2e:	e7d1      	b.n	8004dd4 <scalbn+0x6c>
 8004e30:	c2f8f359 	.word	0xc2f8f359
 8004e34:	01a56e1f 	.word	0x01a56e1f
 8004e38:	8800759c 	.word	0x8800759c
 8004e3c:	7e37e43c 	.word	0x7e37e43c
 8004e40:	43500000 	.word	0x43500000
 8004e44:	ffff3cb0 	.word	0xffff3cb0
 8004e48:	8800759c 	.word	0x8800759c
 8004e4c:	c2f8f359 	.word	0xc2f8f359
 8004e50:	3c900000 	.word	0x3c900000

08004e54 <__kernel_rem_pio2>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004e5c:	9308      	str	r3, [sp, #32]
 8004e5e:	9104      	str	r1, [sp, #16]
 8004e60:	4bb6      	ldr	r3, [pc, #728]	@ (800513c <__kernel_rem_pio2+0x2e8>)
 8004e62:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8004e64:	f112 0f14 	cmn.w	r2, #20
 8004e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e6c:	bfa8      	it	ge
 8004e6e:	1ed4      	subge	r4, r2, #3
 8004e70:	9302      	str	r3, [sp, #8]
 8004e72:	9b08      	ldr	r3, [sp, #32]
 8004e74:	bfb8      	it	lt
 8004e76:	2400      	movlt	r4, #0
 8004e78:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e7c:	9306      	str	r3, [sp, #24]
 8004e7e:	bfa4      	itt	ge
 8004e80:	2318      	movge	r3, #24
 8004e82:	fb94 f4f3 	sdivge	r4, r4, r3
 8004e86:	f06f 0317 	mvn.w	r3, #23
 8004e8a:	fb04 3303 	mla	r3, r4, r3, r3
 8004e8e:	eb03 0a02 	add.w	sl, r3, r2
 8004e92:	9a06      	ldr	r2, [sp, #24]
 8004e94:	9b02      	ldr	r3, [sp, #8]
 8004e96:	1aa7      	subs	r7, r4, r2
 8004e98:	eb03 0802 	add.w	r8, r3, r2
 8004e9c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004e9e:	2500      	movs	r5, #0
 8004ea0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004eaa:	ae20      	add	r6, sp, #128	@ 0x80
 8004eac:	4545      	cmp	r5, r8
 8004eae:	dd14      	ble.n	8004eda <__kernel_rem_pio2+0x86>
 8004eb0:	f04f 0800 	mov.w	r8, #0
 8004eb4:	9a08      	ldr	r2, [sp, #32]
 8004eb6:	ab20      	add	r3, sp, #128	@ 0x80
 8004eb8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004ebc:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8004ec0:	9b02      	ldr	r3, [sp, #8]
 8004ec2:	4598      	cmp	r8, r3
 8004ec4:	dc35      	bgt.n	8004f32 <__kernel_rem_pio2+0xde>
 8004ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f1a3 0908 	sub.w	r9, r3, #8
 8004ece:	2300      	movs	r3, #0
 8004ed0:	462f      	mov	r7, r5
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	e9cd 2300 	strd	r2, r3, [sp]
 8004ed8:	e01f      	b.n	8004f1a <__kernel_rem_pio2+0xc6>
 8004eda:	42ef      	cmn	r7, r5
 8004edc:	d40b      	bmi.n	8004ef6 <__kernel_rem_pio2+0xa2>
 8004ede:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ee2:	e9cd 2300 	strd	r2, r3, [sp]
 8004ee6:	f7fb fa85 	bl	80003f4 <__aeabi_i2d>
 8004eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eee:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	e7da      	b.n	8004eac <__kernel_rem_pio2+0x58>
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	e7f8      	b.n	8004eee <__kernel_rem_pio2+0x9a>
 8004efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f00:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004f04:	f7fb fae0 	bl	80004c8 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f10:	f7fb f924 	bl	800015c <__adddf3>
 8004f14:	e9cd 0100 	strd	r0, r1, [sp]
 8004f18:	3601      	adds	r6, #1
 8004f1a:	9b06      	ldr	r3, [sp, #24]
 8004f1c:	3f08      	subs	r7, #8
 8004f1e:	429e      	cmp	r6, r3
 8004f20:	ddec      	ble.n	8004efc <__kernel_rem_pio2+0xa8>
 8004f22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f26:	f108 0801 	add.w	r8, r8, #1
 8004f2a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004f2e:	3508      	adds	r5, #8
 8004f30:	e7c6      	b.n	8004ec0 <__kernel_rem_pio2+0x6c>
 8004f32:	9b02      	ldr	r3, [sp, #8]
 8004f34:	aa0c      	add	r2, sp, #48	@ 0x30
 8004f36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f3c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004f3e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004f42:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f48:	ab98      	add	r3, sp, #608	@ 0x260
 8004f4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f4e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8004f52:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004f54:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f58:	ae0c      	add	r6, sp, #48	@ 0x30
 8004f5a:	4698      	mov	r8, r3
 8004f5c:	46b1      	mov	r9, r6
 8004f5e:	465f      	mov	r7, fp
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	2f00      	cmp	r7, #0
 8004f64:	f1a8 0808 	sub.w	r8, r8, #8
 8004f68:	dc71      	bgt.n	800504e <__kernel_rem_pio2+0x1fa>
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	f7ff fefa 	bl	8004d68 <scalbn>
 8004f74:	2200      	movs	r2, #0
 8004f76:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	f7fb faa3 	bl	80004c8 <__aeabi_dmul>
 8004f82:	f000 fa8d 	bl	80054a0 <floor>
 8004f86:	2200      	movs	r2, #0
 8004f88:	4b6d      	ldr	r3, [pc, #436]	@ (8005140 <__kernel_rem_pio2+0x2ec>)
 8004f8a:	f7fb fa9d 	bl	80004c8 <__aeabi_dmul>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb f8df 	bl	8000158 <__aeabi_dsub>
 8004f9a:	460d      	mov	r5, r1
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	f7fb fd2d 	bl	80009fc <__aeabi_d2iz>
 8004fa2:	9005      	str	r0, [sp, #20]
 8004fa4:	f7fb fa26 	bl	80003f4 <__aeabi_i2d>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4620      	mov	r0, r4
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f7fb f8d2 	bl	8000158 <__aeabi_dsub>
 8004fb4:	f1ba 0f00 	cmp.w	sl, #0
 8004fb8:	4680      	mov	r8, r0
 8004fba:	4689      	mov	r9, r1
 8004fbc:	dd6d      	ble.n	800509a <__kernel_rem_pio2+0x246>
 8004fbe:	f10b 31ff 	add.w	r1, fp, #4294967295
 8004fc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004fc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004fc8:	9c05      	ldr	r4, [sp, #20]
 8004fca:	f1ca 0018 	rsb	r0, sl, #24
 8004fce:	fa43 f200 	asr.w	r2, r3, r0
 8004fd2:	4414      	add	r4, r2
 8004fd4:	4082      	lsls	r2, r0
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	aa0c      	add	r2, sp, #48	@ 0x30
 8004fda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004fde:	f1ca 0217 	rsb	r2, sl, #23
 8004fe2:	9405      	str	r4, [sp, #20]
 8004fe4:	4113      	asrs	r3, r2
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	9b00      	ldr	r3, [sp, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd64      	ble.n	80050b8 <__kernel_rem_pio2+0x264>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	9b05      	ldr	r3, [sp, #20]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	4593      	cmp	fp, r2
 8004ffe:	f300 80ab 	bgt.w	8005158 <__kernel_rem_pio2+0x304>
 8005002:	f1ba 0f00 	cmp.w	sl, #0
 8005006:	dd07      	ble.n	8005018 <__kernel_rem_pio2+0x1c4>
 8005008:	f1ba 0f01 	cmp.w	sl, #1
 800500c:	f000 80b2 	beq.w	8005174 <__kernel_rem_pio2+0x320>
 8005010:	f1ba 0f02 	cmp.w	sl, #2
 8005014:	f000 80b9 	beq.w	800518a <__kernel_rem_pio2+0x336>
 8005018:	9b00      	ldr	r3, [sp, #0]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d14c      	bne.n	80050b8 <__kernel_rem_pio2+0x264>
 800501e:	4642      	mov	r2, r8
 8005020:	464b      	mov	r3, r9
 8005022:	2000      	movs	r0, #0
 8005024:	4947      	ldr	r1, [pc, #284]	@ (8005144 <__kernel_rem_pio2+0x2f0>)
 8005026:	f7fb f897 	bl	8000158 <__aeabi_dsub>
 800502a:	4680      	mov	r8, r0
 800502c:	4689      	mov	r9, r1
 800502e:	2c00      	cmp	r4, #0
 8005030:	d042      	beq.n	80050b8 <__kernel_rem_pio2+0x264>
 8005032:	4652      	mov	r2, sl
 8005034:	2000      	movs	r0, #0
 8005036:	4943      	ldr	r1, [pc, #268]	@ (8005144 <__kernel_rem_pio2+0x2f0>)
 8005038:	f7ff fe96 	bl	8004d68 <scalbn>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb f888 	bl	8000158 <__aeabi_dsub>
 8005048:	4680      	mov	r8, r0
 800504a:	4689      	mov	r9, r1
 800504c:	e034      	b.n	80050b8 <__kernel_rem_pio2+0x264>
 800504e:	2200      	movs	r2, #0
 8005050:	4b3d      	ldr	r3, [pc, #244]	@ (8005148 <__kernel_rem_pio2+0x2f4>)
 8005052:	4620      	mov	r0, r4
 8005054:	4629      	mov	r1, r5
 8005056:	f7fb fa37 	bl	80004c8 <__aeabi_dmul>
 800505a:	f7fb fccf 	bl	80009fc <__aeabi_d2iz>
 800505e:	f7fb f9c9 	bl	80003f4 <__aeabi_i2d>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	e9cd 2300 	strd	r2, r3, [sp]
 800506a:	2200      	movs	r2, #0
 800506c:	4b37      	ldr	r3, [pc, #220]	@ (800514c <__kernel_rem_pio2+0x2f8>)
 800506e:	f7fb fa2b 	bl	80004c8 <__aeabi_dmul>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4620      	mov	r0, r4
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb f86d 	bl	8000158 <__aeabi_dsub>
 800507e:	f7fb fcbd 	bl	80009fc <__aeabi_d2iz>
 8005082:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005086:	f849 0b04 	str.w	r0, [r9], #4
 800508a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800508e:	f7fb f865 	bl	800015c <__adddf3>
 8005092:	3f01      	subs	r7, #1
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
 8005098:	e763      	b.n	8004f62 <__kernel_rem_pio2+0x10e>
 800509a:	d106      	bne.n	80050aa <__kernel_rem_pio2+0x256>
 800509c:	f10b 33ff 	add.w	r3, fp, #4294967295
 80050a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80050a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a6:	15db      	asrs	r3, r3, #23
 80050a8:	e79d      	b.n	8004fe6 <__kernel_rem_pio2+0x192>
 80050aa:	2200      	movs	r2, #0
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <__kernel_rem_pio2+0x2fc>)
 80050ae:	f7fb fc91 	bl	80009d4 <__aeabi_dcmpge>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d13f      	bne.n	8005136 <__kernel_rem_pio2+0x2e2>
 80050b6:	9000      	str	r0, [sp, #0]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4640      	mov	r0, r8
 80050be:	4649      	mov	r1, r9
 80050c0:	f7fb fc6a 	bl	8000998 <__aeabi_dcmpeq>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f000 80af 	beq.w	8005228 <__kernel_rem_pio2+0x3d4>
 80050ca:	2200      	movs	r2, #0
 80050cc:	f10b 33ff 	add.w	r3, fp, #4294967295
 80050d0:	9902      	ldr	r1, [sp, #8]
 80050d2:	428b      	cmp	r3, r1
 80050d4:	da61      	bge.n	800519a <__kernel_rem_pio2+0x346>
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	d076      	beq.n	80051c8 <__kernel_rem_pio2+0x374>
 80050da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050de:	ab0c      	add	r3, sp, #48	@ 0x30
 80050e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80050e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f6      	beq.n	80050da <__kernel_rem_pio2+0x286>
 80050ec:	4652      	mov	r2, sl
 80050ee:	2000      	movs	r0, #0
 80050f0:	4914      	ldr	r1, [pc, #80]	@ (8005144 <__kernel_rem_pio2+0x2f0>)
 80050f2:	f7ff fe39 	bl	8004d68 <scalbn>
 80050f6:	465d      	mov	r5, fp
 80050f8:	4606      	mov	r6, r0
 80050fa:	460f      	mov	r7, r1
 80050fc:	f04f 0900 	mov.w	r9, #0
 8005100:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005102:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8005148 <__kernel_rem_pio2+0x2f4>
 8005106:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800510a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800510e:	2d00      	cmp	r5, #0
 8005110:	f280 80c0 	bge.w	8005294 <__kernel_rem_pio2+0x440>
 8005114:	465d      	mov	r5, fp
 8005116:	2d00      	cmp	r5, #0
 8005118:	f2c0 80f0 	blt.w	80052fc <__kernel_rem_pio2+0x4a8>
 800511c:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <__kernel_rem_pio2+0x300>)
 800511e:	f04f 0900 	mov.w	r9, #0
 8005122:	9306      	str	r3, [sp, #24]
 8005124:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005126:	f04f 0a00 	mov.w	sl, #0
 800512a:	2700      	movs	r7, #0
 800512c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8005130:	ebab 0605 	sub.w	r6, fp, r5
 8005134:	e0d6      	b.n	80052e4 <__kernel_rem_pio2+0x490>
 8005136:	2302      	movs	r3, #2
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	e758      	b.n	8004fee <__kernel_rem_pio2+0x19a>
 800513c:	080057a8 	.word	0x080057a8
 8005140:	40200000 	.word	0x40200000
 8005144:	3ff00000 	.word	0x3ff00000
 8005148:	3e700000 	.word	0x3e700000
 800514c:	41700000 	.word	0x41700000
 8005150:	3fe00000 	.word	0x3fe00000
 8005154:	08005768 	.word	0x08005768
 8005158:	f856 3b04 	ldr.w	r3, [r6], #4
 800515c:	b944      	cbnz	r4, 8005170 <__kernel_rem_pio2+0x31c>
 800515e:	b123      	cbz	r3, 800516a <__kernel_rem_pio2+0x316>
 8005160:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005164:	f846 3c04 	str.w	r3, [r6, #-4]
 8005168:	2301      	movs	r3, #1
 800516a:	461c      	mov	r4, r3
 800516c:	3201      	adds	r2, #1
 800516e:	e745      	b.n	8004ffc <__kernel_rem_pio2+0x1a8>
 8005170:	1acb      	subs	r3, r1, r3
 8005172:	e7f7      	b.n	8005164 <__kernel_rem_pio2+0x310>
 8005174:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005178:	ab0c      	add	r3, sp, #48	@ 0x30
 800517a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005182:	a90c      	add	r1, sp, #48	@ 0x30
 8005184:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005188:	e746      	b.n	8005018 <__kernel_rem_pio2+0x1c4>
 800518a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800518e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005198:	e7f3      	b.n	8005182 <__kernel_rem_pio2+0x32e>
 800519a:	a90c      	add	r1, sp, #48	@ 0x30
 800519c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	430a      	orrs	r2, r1
 80051a4:	e794      	b.n	80050d0 <__kernel_rem_pio2+0x27c>
 80051a6:	3401      	adds	r4, #1
 80051a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	d0fa      	beq.n	80051a6 <__kernel_rem_pio2+0x352>
 80051b0:	9b08      	ldr	r3, [sp, #32]
 80051b2:	aa20      	add	r2, sp, #128	@ 0x80
 80051b4:	445b      	add	r3, fp
 80051b6:	f10b 0801 	add.w	r8, fp, #1
 80051ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80051be:	445c      	add	r4, fp
 80051c0:	4544      	cmp	r4, r8
 80051c2:	da04      	bge.n	80051ce <__kernel_rem_pio2+0x37a>
 80051c4:	46a3      	mov	fp, r4
 80051c6:	e6bf      	b.n	8004f48 <__kernel_rem_pio2+0xf4>
 80051c8:	2401      	movs	r4, #1
 80051ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051cc:	e7ec      	b.n	80051a8 <__kernel_rem_pio2+0x354>
 80051ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051d0:	46ab      	mov	fp, r5
 80051d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80051d6:	f7fb f90d 	bl	80003f4 <__aeabi_i2d>
 80051da:	f04f 0900 	mov.w	r9, #0
 80051de:	2600      	movs	r6, #0
 80051e0:	2700      	movs	r7, #0
 80051e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e4:	e9c5 0100 	strd	r0, r1, [r5]
 80051e8:	3b08      	subs	r3, #8
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	9b06      	ldr	r3, [sp, #24]
 80051ee:	4599      	cmp	r9, r3
 80051f0:	dd07      	ble.n	8005202 <__kernel_rem_pio2+0x3ae>
 80051f2:	9b07      	ldr	r3, [sp, #28]
 80051f4:	f108 0801 	add.w	r8, r8, #1
 80051f8:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 80051fc:	3508      	adds	r5, #8
 80051fe:	9307      	str	r3, [sp, #28]
 8005200:	e7de      	b.n	80051c0 <__kernel_rem_pio2+0x36c>
 8005202:	9900      	ldr	r1, [sp, #0]
 8005204:	f109 0901 	add.w	r9, r9, #1
 8005208:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800520c:	9100      	str	r1, [sp, #0]
 800520e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8005212:	f7fb f959 	bl	80004c8 <__aeabi_dmul>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fa ff9d 	bl	800015c <__adddf3>
 8005222:	4606      	mov	r6, r0
 8005224:	460f      	mov	r7, r1
 8005226:	e7e1      	b.n	80051ec <__kernel_rem_pio2+0x398>
 8005228:	f1ca 0200 	rsb	r2, sl, #0
 800522c:	4640      	mov	r0, r8
 800522e:	4649      	mov	r1, r9
 8005230:	f7ff fd9a 	bl	8004d68 <scalbn>
 8005234:	2200      	movs	r2, #0
 8005236:	4b97      	ldr	r3, [pc, #604]	@ (8005494 <__kernel_rem_pio2+0x640>)
 8005238:	4604      	mov	r4, r0
 800523a:	460d      	mov	r5, r1
 800523c:	f7fb fbca 	bl	80009d4 <__aeabi_dcmpge>
 8005240:	b300      	cbz	r0, 8005284 <__kernel_rem_pio2+0x430>
 8005242:	2200      	movs	r2, #0
 8005244:	4b94      	ldr	r3, [pc, #592]	@ (8005498 <__kernel_rem_pio2+0x644>)
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb f93d 	bl	80004c8 <__aeabi_dmul>
 800524e:	f7fb fbd5 	bl	80009fc <__aeabi_d2iz>
 8005252:	4606      	mov	r6, r0
 8005254:	f7fb f8ce 	bl	80003f4 <__aeabi_i2d>
 8005258:	2200      	movs	r2, #0
 800525a:	4b8e      	ldr	r3, [pc, #568]	@ (8005494 <__kernel_rem_pio2+0x640>)
 800525c:	f7fb f934 	bl	80004c8 <__aeabi_dmul>
 8005260:	460b      	mov	r3, r1
 8005262:	4602      	mov	r2, r0
 8005264:	4629      	mov	r1, r5
 8005266:	4620      	mov	r0, r4
 8005268:	f7fa ff76 	bl	8000158 <__aeabi_dsub>
 800526c:	f7fb fbc6 	bl	80009fc <__aeabi_d2iz>
 8005270:	ab0c      	add	r3, sp, #48	@ 0x30
 8005272:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005276:	f10b 0b01 	add.w	fp, fp, #1
 800527a:	f10a 0a18 	add.w	sl, sl, #24
 800527e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005282:	e733      	b.n	80050ec <__kernel_rem_pio2+0x298>
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb fbb8 	bl	80009fc <__aeabi_d2iz>
 800528c:	ab0c      	add	r3, sp, #48	@ 0x30
 800528e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005292:	e72b      	b.n	80050ec <__kernel_rem_pio2+0x298>
 8005294:	ab0c      	add	r3, sp, #48	@ 0x30
 8005296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800529a:	f7fb f8ab 	bl	80003f4 <__aeabi_i2d>
 800529e:	4632      	mov	r2, r6
 80052a0:	463b      	mov	r3, r7
 80052a2:	f7fb f911 	bl	80004c8 <__aeabi_dmul>
 80052a6:	464a      	mov	r2, r9
 80052a8:	e868 0102 	strd	r0, r1, [r8], #-8
 80052ac:	4653      	mov	r3, sl
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fb f909 	bl	80004c8 <__aeabi_dmul>
 80052b6:	3d01      	subs	r5, #1
 80052b8:	4606      	mov	r6, r0
 80052ba:	460f      	mov	r7, r1
 80052bc:	e727      	b.n	800510e <__kernel_rem_pio2+0x2ba>
 80052be:	f8dd c018 	ldr.w	ip, [sp, #24]
 80052c2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80052c6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80052ca:	f8cd c018 	str.w	ip, [sp, #24]
 80052ce:	f7fb f8fb 	bl	80004c8 <__aeabi_dmul>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4648      	mov	r0, r9
 80052d8:	4651      	mov	r1, sl
 80052da:	f7fa ff3f 	bl	800015c <__adddf3>
 80052de:	4681      	mov	r9, r0
 80052e0:	468a      	mov	sl, r1
 80052e2:	3701      	adds	r7, #1
 80052e4:	9b02      	ldr	r3, [sp, #8]
 80052e6:	429f      	cmp	r7, r3
 80052e8:	dc01      	bgt.n	80052ee <__kernel_rem_pio2+0x49a>
 80052ea:	42be      	cmp	r6, r7
 80052ec:	dae7      	bge.n	80052be <__kernel_rem_pio2+0x46a>
 80052ee:	ab48      	add	r3, sp, #288	@ 0x120
 80052f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80052f4:	e9c6 9a00 	strd	r9, sl, [r6]
 80052f8:	3d01      	subs	r5, #1
 80052fa:	e70c      	b.n	8005116 <__kernel_rem_pio2+0x2c2>
 80052fc:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80052fe:	2b02      	cmp	r3, #2
 8005300:	dc09      	bgt.n	8005316 <__kernel_rem_pio2+0x4c2>
 8005302:	2b00      	cmp	r3, #0
 8005304:	dc2c      	bgt.n	8005360 <__kernel_rem_pio2+0x50c>
 8005306:	d04e      	beq.n	80053a6 <__kernel_rem_pio2+0x552>
 8005308:	9b05      	ldr	r3, [sp, #20]
 800530a:	f003 0007 	and.w	r0, r3, #7
 800530e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005318:	2b03      	cmp	r3, #3
 800531a:	d1f5      	bne.n	8005308 <__kernel_rem_pio2+0x4b4>
 800531c:	ab48      	add	r3, sp, #288	@ 0x120
 800531e:	441c      	add	r4, r3
 8005320:	4625      	mov	r5, r4
 8005322:	46da      	mov	sl, fp
 8005324:	f1ba 0f00 	cmp.w	sl, #0
 8005328:	dc63      	bgt.n	80053f2 <__kernel_rem_pio2+0x59e>
 800532a:	4625      	mov	r5, r4
 800532c:	46da      	mov	sl, fp
 800532e:	f1ba 0f01 	cmp.w	sl, #1
 8005332:	dc7b      	bgt.n	800542c <__kernel_rem_pio2+0x5d8>
 8005334:	2000      	movs	r0, #0
 8005336:	2100      	movs	r1, #0
 8005338:	f1bb 0f01 	cmp.w	fp, #1
 800533c:	f300 8093 	bgt.w	8005466 <__kernel_rem_pio2+0x612>
 8005340:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005344:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005348:	9b00      	ldr	r3, [sp, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f040 8092 	bne.w	8005474 <__kernel_rem_pio2+0x620>
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	e9c3 7800 	strd	r7, r8, [r3]
 8005356:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800535a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800535e:	e7d3      	b.n	8005308 <__kernel_rem_pio2+0x4b4>
 8005360:	465d      	mov	r5, fp
 8005362:	2000      	movs	r0, #0
 8005364:	2100      	movs	r1, #0
 8005366:	ab48      	add	r3, sp, #288	@ 0x120
 8005368:	441c      	add	r4, r3
 800536a:	2d00      	cmp	r5, #0
 800536c:	da32      	bge.n	80053d4 <__kernel_rem_pio2+0x580>
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d035      	beq.n	80053e0 <__kernel_rem_pio2+0x58c>
 8005374:	4602      	mov	r2, r0
 8005376:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800537a:	9c04      	ldr	r4, [sp, #16]
 800537c:	2501      	movs	r5, #1
 800537e:	e9c4 2300 	strd	r2, r3, [r4]
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800538a:	f7fa fee5 	bl	8000158 <__aeabi_dsub>
 800538e:	ac48      	add	r4, sp, #288	@ 0x120
 8005390:	45ab      	cmp	fp, r5
 8005392:	da28      	bge.n	80053e6 <__kernel_rem_pio2+0x592>
 8005394:	9b00      	ldr	r3, [sp, #0]
 8005396:	b113      	cbz	r3, 800539e <__kernel_rem_pio2+0x54a>
 8005398:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800539c:	4619      	mov	r1, r3
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80053a4:	e7b0      	b.n	8005308 <__kernel_rem_pio2+0x4b4>
 80053a6:	2000      	movs	r0, #0
 80053a8:	2100      	movs	r1, #0
 80053aa:	ab48      	add	r3, sp, #288	@ 0x120
 80053ac:	441c      	add	r4, r3
 80053ae:	f1bb 0f00 	cmp.w	fp, #0
 80053b2:	da08      	bge.n	80053c6 <__kernel_rem_pio2+0x572>
 80053b4:	9b00      	ldr	r3, [sp, #0]
 80053b6:	b113      	cbz	r3, 80053be <__kernel_rem_pio2+0x56a>
 80053b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053bc:	4619      	mov	r1, r3
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	e9c3 0100 	strd	r0, r1, [r3]
 80053c4:	e7a0      	b.n	8005308 <__kernel_rem_pio2+0x4b4>
 80053c6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80053ca:	f7fa fec7 	bl	800015c <__adddf3>
 80053ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053d2:	e7ec      	b.n	80053ae <__kernel_rem_pio2+0x55a>
 80053d4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80053d8:	f7fa fec0 	bl	800015c <__adddf3>
 80053dc:	3d01      	subs	r5, #1
 80053de:	e7c4      	b.n	800536a <__kernel_rem_pio2+0x516>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	e7c9      	b.n	800537a <__kernel_rem_pio2+0x526>
 80053e6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80053ea:	f7fa feb7 	bl	800015c <__adddf3>
 80053ee:	3501      	adds	r5, #1
 80053f0:	e7ce      	b.n	8005390 <__kernel_rem_pio2+0x53c>
 80053f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053f6:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005402:	f7fa feab 	bl	800015c <__adddf3>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	4640      	mov	r0, r8
 8005410:	4649      	mov	r1, r9
 8005412:	f7fa fea1 	bl	8000158 <__aeabi_dsub>
 8005416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800541a:	f7fa fe9f 	bl	800015c <__adddf3>
 800541e:	e865 0102 	strd	r0, r1, [r5], #-8
 8005422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005426:	e9c5 6700 	strd	r6, r7, [r5]
 800542a:	e77b      	b.n	8005324 <__kernel_rem_pio2+0x4d0>
 800542c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005430:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800543c:	f7fa fe8e 	bl	800015c <__adddf3>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	4640      	mov	r0, r8
 800544a:	4649      	mov	r1, r9
 800544c:	f7fa fe84 	bl	8000158 <__aeabi_dsub>
 8005450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005454:	f7fa fe82 	bl	800015c <__adddf3>
 8005458:	e865 0102 	strd	r0, r1, [r5], #-8
 800545c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005460:	e9c5 6700 	strd	r6, r7, [r5]
 8005464:	e763      	b.n	800532e <__kernel_rem_pio2+0x4da>
 8005466:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800546a:	f7fa fe77 	bl	800015c <__adddf3>
 800546e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005472:	e761      	b.n	8005338 <__kernel_rem_pio2+0x4e4>
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	9a04      	ldr	r2, [sp, #16]
 8005478:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800547c:	601f      	str	r7, [r3, #0]
 800547e:	605c      	str	r4, [r3, #4]
 8005480:	609d      	str	r5, [r3, #8]
 8005482:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005486:	60d3      	str	r3, [r2, #12]
 8005488:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800548c:	6110      	str	r0, [r2, #16]
 800548e:	6153      	str	r3, [r2, #20]
 8005490:	e73a      	b.n	8005308 <__kernel_rem_pio2+0x4b4>
 8005492:	bf00      	nop
 8005494:	41700000 	.word	0x41700000
 8005498:	3e700000 	.word	0x3e700000
 800549c:	00000000 	.word	0x00000000

080054a0 <floor>:
 80054a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80054a8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80054ac:	2e13      	cmp	r6, #19
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	460c      	mov	r4, r1
 80054b4:	4605      	mov	r5, r0
 80054b6:	4680      	mov	r8, r0
 80054b8:	dc35      	bgt.n	8005526 <floor+0x86>
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	da17      	bge.n	80054ee <floor+0x4e>
 80054be:	a334      	add	r3, pc, #208	@ (adr r3, 8005590 <floor+0xf0>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fa fe4a 	bl	800015c <__adddf3>
 80054c8:	2200      	movs	r2, #0
 80054ca:	2300      	movs	r3, #0
 80054cc:	f7fb fa8c 	bl	80009e8 <__aeabi_dcmpgt>
 80054d0:	b150      	cbz	r0, 80054e8 <floor+0x48>
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	da57      	bge.n	8005586 <floor+0xe6>
 80054d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80054da:	432c      	orrs	r4, r5
 80054dc:	2500      	movs	r5, #0
 80054de:	42ac      	cmp	r4, r5
 80054e0:	4c2d      	ldr	r4, [pc, #180]	@ (8005598 <floor+0xf8>)
 80054e2:	bf08      	it	eq
 80054e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80054e8:	4623      	mov	r3, r4
 80054ea:	462a      	mov	r2, r5
 80054ec:	e024      	b.n	8005538 <floor+0x98>
 80054ee:	4f2b      	ldr	r7, [pc, #172]	@ (800559c <floor+0xfc>)
 80054f0:	4137      	asrs	r7, r6
 80054f2:	ea01 0c07 	and.w	ip, r1, r7
 80054f6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80054fa:	d01d      	beq.n	8005538 <floor+0x98>
 80054fc:	a324      	add	r3, pc, #144	@ (adr r3, 8005590 <floor+0xf0>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fe2b 	bl	800015c <__adddf3>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	f7fb fa6d 	bl	80009e8 <__aeabi_dcmpgt>
 800550e:	2800      	cmp	r0, #0
 8005510:	d0ea      	beq.n	80054e8 <floor+0x48>
 8005512:	2c00      	cmp	r4, #0
 8005514:	bfbe      	ittt	lt
 8005516:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800551a:	4133      	asrlt	r3, r6
 800551c:	18e4      	addlt	r4, r4, r3
 800551e:	2500      	movs	r5, #0
 8005520:	ea24 0407 	bic.w	r4, r4, r7
 8005524:	e7e0      	b.n	80054e8 <floor+0x48>
 8005526:	2e33      	cmp	r6, #51	@ 0x33
 8005528:	dd0a      	ble.n	8005540 <floor+0xa0>
 800552a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800552e:	d103      	bne.n	8005538 <floor+0x98>
 8005530:	f7fa fe14 	bl	800015c <__adddf3>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4610      	mov	r0, r2
 800553a:	4619      	mov	r1, r3
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005540:	f04f 3cff 	mov.w	ip, #4294967295
 8005544:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005548:	fa2c f707 	lsr.w	r7, ip, r7
 800554c:	4207      	tst	r7, r0
 800554e:	d0f3      	beq.n	8005538 <floor+0x98>
 8005550:	a30f      	add	r3, pc, #60	@ (adr r3, 8005590 <floor+0xf0>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fa fe01 	bl	800015c <__adddf3>
 800555a:	2200      	movs	r2, #0
 800555c:	2300      	movs	r3, #0
 800555e:	f7fb fa43 	bl	80009e8 <__aeabi_dcmpgt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d0c0      	beq.n	80054e8 <floor+0x48>
 8005566:	2c00      	cmp	r4, #0
 8005568:	da0a      	bge.n	8005580 <floor+0xe0>
 800556a:	2e14      	cmp	r6, #20
 800556c:	d101      	bne.n	8005572 <floor+0xd2>
 800556e:	3401      	adds	r4, #1
 8005570:	e006      	b.n	8005580 <floor+0xe0>
 8005572:	2301      	movs	r3, #1
 8005574:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005578:	40b3      	lsls	r3, r6
 800557a:	441d      	add	r5, r3
 800557c:	4545      	cmp	r5, r8
 800557e:	d3f6      	bcc.n	800556e <floor+0xce>
 8005580:	ea25 0507 	bic.w	r5, r5, r7
 8005584:	e7b0      	b.n	80054e8 <floor+0x48>
 8005586:	2500      	movs	r5, #0
 8005588:	462c      	mov	r4, r5
 800558a:	e7ad      	b.n	80054e8 <floor+0x48>
 800558c:	f3af 8000 	nop.w
 8005590:	8800759c 	.word	0x8800759c
 8005594:	7e37e43c 	.word	0x7e37e43c
 8005598:	bff00000 	.word	0xbff00000
 800559c:	000fffff 	.word	0x000fffff

080055a0 <_init>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

080055ac <_fini>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr
