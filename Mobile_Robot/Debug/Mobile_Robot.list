
Mobile_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003610  08003610  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003610  08003610  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003618  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000078  0800368c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800368c  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b71a  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e8  00000000  00000000  0002b7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000971  00000000  00000000  0002ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179ae  00000000  00000000  0002e761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc27  00000000  00000000  0004610f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a78b  00000000  00000000  00053d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000375c  00000000  00000000  000de4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e1c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080035cc 	.word	0x080035cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080035cc 	.word	0x080035cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <pulse_modulation>:
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <pulse_modulation+0x20>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <pulse_modulation+0x20>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000124 	.word	0x20000124

08000a20 <main>:
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	2202      	movs	r2, #2
 8000a26:	2102      	movs	r1, #2
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <main+0x218>)
 8000a2a:	f000 fdb0 	bl	800158e <allocate_matrix>
 8000a2e:	4b82      	ldr	r3, [pc, #520]	; (8000c38 <main+0x218>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	4b81      	ldr	r3, [pc, #516]	; (8000c3c <main+0x21c>)
 8000a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8000a3e:	4b7e      	ldr	r3, [pc, #504]	; (8000c38 <main+0x218>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3304      	adds	r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 0108 	add.w	r1, r3, #8
 8000a4a:	4b7c      	ldr	r3, [pc, #496]	; (8000c3c <main+0x21c>)
 8000a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a50:	e9c1 2300 	strd	r2, r3, [r1]
 8000a54:	2201      	movs	r2, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	4879      	ldr	r0, [pc, #484]	; (8000c40 <main+0x220>)
 8000a5a:	f000 fd98 	bl	800158e <allocate_matrix>
 8000a5e:	4b78      	ldr	r3, [pc, #480]	; (8000c40 <main+0x220>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6819      	ldr	r1, [r3, #0]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	4b76      	ldr	r3, [pc, #472]	; (8000c44 <main+0x224>)
 8000a6a:	e9c1 2300 	strd	r2, r3, [r1]
 8000a6e:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <main+0x220>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3304      	adds	r3, #4
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	4b72      	ldr	r3, [pc, #456]	; (8000c44 <main+0x224>)
 8000a7c:	e9c1 2300 	strd	r2, r3, [r1]
 8000a80:	4b6f      	ldr	r3, [pc, #444]	; (8000c40 <main+0x220>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3308      	adds	r3, #8
 8000a86:	6819      	ldr	r1, [r3, #0]
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <main+0x224>)
 8000a8e:	e9c1 2300 	strd	r2, r3, [r1]
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	486c      	ldr	r0, [pc, #432]	; (8000c48 <main+0x228>)
 8000a98:	f000 fd79 	bl	800158e <allocate_matrix>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	486a      	ldr	r0, [pc, #424]	; (8000c4c <main+0x22c>)
 8000aa2:	f000 fd74 	bl	800158e <allocate_matrix>
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4869      	ldr	r0, [pc, #420]	; (8000c50 <main+0x230>)
 8000aac:	f000 fd6f 	bl	800158e <allocate_matrix>
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4867      	ldr	r0, [pc, #412]	; (8000c54 <main+0x234>)
 8000ab6:	f000 fd6a 	bl	800158e <allocate_matrix>
 8000aba:	2201      	movs	r2, #1
 8000abc:	2102      	movs	r1, #2
 8000abe:	4866      	ldr	r0, [pc, #408]	; (8000c58 <main+0x238>)
 8000ac0:	f000 fd65 	bl	800158e <allocate_matrix>
 8000ac4:	f000 fd98 	bl	80015f8 <HAL_Init>
 8000ac8:	f000 f9b8 	bl	8000e3c <SystemClock_Config>
 8000acc:	f000 fb4e 	bl	800116c <MX_GPIO_Init>
 8000ad0:	f000 f9f4 	bl	8000ebc <MX_TIM1_Init>
 8000ad4:	f000 fa4a 	bl	8000f6c <MX_TIM2_Init>
 8000ad8:	f000 fa9c 	bl	8001014 <MX_TIM4_Init>
 8000adc:	f000 fb1c 	bl	8001118 <MX_USART2_UART_Init>
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	485e      	ldr	r0, [pc, #376]	; (8000c5c <main+0x23c>)
 8000ae4:	f001 fd22 	bl	800252c <HAL_TIM_PWM_Start>
 8000ae8:	2104      	movs	r1, #4
 8000aea:	485d      	ldr	r0, [pc, #372]	; (8000c60 <main+0x240>)
 8000aec:	f001 fe62 	bl	80027b4 <HAL_TIM_Encoder_Start>
 8000af0:	210c      	movs	r1, #12
 8000af2:	485a      	ldr	r0, [pc, #360]	; (8000c5c <main+0x23c>)
 8000af4:	f001 fd1a 	bl	800252c <HAL_TIM_PWM_Start>
 8000af8:	2104      	movs	r1, #4
 8000afa:	485a      	ldr	r0, [pc, #360]	; (8000c64 <main+0x244>)
 8000afc:	f001 fe5a 	bl	80027b4 <HAL_TIM_Encoder_Start>
 8000b00:	2200      	movs	r2, #0
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	4858      	ldr	r0, [pc, #352]	; (8000c68 <main+0x248>)
 8000b06:	f001 f841 	bl	8001b8c <HAL_GPIO_WritePin>
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	4856      	ldr	r0, [pc, #344]	; (8000c68 <main+0x248>)
 8000b10:	f001 f83c 	bl	8001b8c <HAL_GPIO_WritePin>
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	4853      	ldr	r0, [pc, #332]	; (8000c68 <main+0x248>)
 8000b1a:	f001 f837 	bl	8001b8c <HAL_GPIO_WritePin>
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2110      	movs	r1, #16
 8000b22:	4851      	ldr	r0, [pc, #324]	; (8000c68 <main+0x248>)
 8000b24:	f001 f832 	bl	8001b8c <HAL_GPIO_WritePin>
 8000b28:	f000 fdbe 	bl	80016a8 <HAL_GetTick>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fc50 	bl	80003d4 <__aeabi_ui2d>
 8000b34:	4602      	mov	r2, r0
 8000b36:	460b      	mov	r3, r1
 8000b38:	494c      	ldr	r1, [pc, #304]	; (8000c6c <main+0x24c>)
 8000b3a:	e9c1 2300 	strd	r2, r3, [r1]
 8000b3e:	4b48      	ldr	r3, [pc, #288]	; (8000c60 <main+0x240>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fc45 	bl	80003d4 <__aeabi_ui2d>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4948      	ldr	r1, [pc, #288]	; (8000c70 <main+0x250>)
 8000b50:	e9c1 2300 	strd	r2, r3, [r1]
 8000b54:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <main+0x244>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fc3a 	bl	80003d4 <__aeabi_ui2d>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4943      	ldr	r1, [pc, #268]	; (8000c74 <main+0x254>)
 8000b66:	e9c1 2300 	strd	r2, r3, [r1]
 8000b6a:	f000 fd9d 	bl	80016a8 <HAL_GetTick>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fc2f 	bl	80003d4 <__aeabi_ui2d>
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <main+0x24c>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	f7ff faec 	bl	8000158 <__aeabi_dsub>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <main+0x258>)
 8000b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8e:	f7ff ff2b 	bl	80009e8 <__aeabi_dcmpgt>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 812f 	beq.w	8000df8 <main+0x3d8>
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <main+0x250>)
 8000b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ba0:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <main+0x25c>)
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f7ff fad7 	bl	8000158 <__aeabi_dsub>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	f7ff fef7 	bl	80009ac <__aeabi_dcmplt>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d063      	beq.n	8000c8c <main+0x26c>
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <main+0x250>)
 8000bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <main+0x25c>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fac2 	bl	8000158 <__aeabi_dsub>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	a312      	add	r3, pc, #72	; (adr r3, 8000c28 <main+0x208>)
 8000bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be2:	f7ff fabb 	bl	800015c <__adddf3>
 8000be6:	4602      	mov	r2, r0
 8000be8:	460b      	mov	r3, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <main+0x260>)
 8000bf4:	f7ff fd92 	bl	800071c <__aeabi_ddiv>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <main+0x264>)
 8000c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c06:	f7ff fc5f 	bl	80004c8 <__aeabi_dmul>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4610      	mov	r0, r2
 8000c10:	4619      	mov	r1, r3
 8000c12:	a307      	add	r3, pc, #28	; (adr r3, 8000c30 <main+0x210>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fc56 	bl	80004c8 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4919      	ldr	r1, [pc, #100]	; (8000c88 <main+0x268>)
 8000c22:	e9c1 2300 	strd	r2, r3, [r1]
 8000c26:	e059      	b.n	8000cdc <main+0x2bc>
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	40efffe0 	.word	0x40efffe0
 8000c30:	51eb851f 	.word	0x51eb851f
 8000c34:	40191eb8 	.word	0x40191eb8
 8000c38:	200001f8 	.word	0x200001f8
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	20000200 	.word	0x20000200
 8000c44:	3ff00000 	.word	0x3ff00000
 8000c48:	20000228 	.word	0x20000228
 8000c4c:	20000208 	.word	0x20000208
 8000c50:	20000220 	.word	0x20000220
 8000c54:	20000210 	.word	0x20000210
 8000c58:	20000218 	.word	0x20000218
 8000c5c:	20000124 	.word	0x20000124
 8000c60:	20000094 	.word	0x20000094
 8000c64:	200000dc 	.word	0x200000dc
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	200001e8 	.word	0x200001e8
 8000c70:	200001b8 	.word	0x200001b8
 8000c74:	200001c0 	.word	0x200001c0
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	200001c8 	.word	0x200001c8
 8000c80:	4094a000 	.word	0x4094a000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	200001d8 	.word	0x200001d8
 8000c8c:	4b60      	ldr	r3, [pc, #384]	; (8000e10 <main+0x3f0>)
 8000c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c92:	4b60      	ldr	r3, [pc, #384]	; (8000e14 <main+0x3f4>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fa5e 	bl	8000158 <__aeabi_dsub>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <main+0x3f8>)
 8000caa:	f7ff fd37 	bl	800071c <__aeabi_ddiv>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <main+0x3fc>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fc04 	bl	80004c8 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	a34d      	add	r3, pc, #308	; (adr r3, 8000e00 <main+0x3e0>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fbfb 	bl	80004c8 <__aeabi_dmul>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4952      	ldr	r1, [pc, #328]	; (8000e20 <main+0x400>)
 8000cd8:	e9c1 2300 	strd	r2, r3, [r1]
 8000cdc:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <main+0x404>)
 8000cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <main+0x408>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fa36 	bl	8000158 <__aeabi_dsub>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f7ff fe56 	bl	80009ac <__aeabi_dcmplt>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d031      	beq.n	8000d6a <main+0x34a>
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <main+0x404>)
 8000d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d0c:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <main+0x408>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	f7ff fa21 	bl	8000158 <__aeabi_dsub>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	a33a      	add	r3, pc, #232	; (adr r3, 8000e08 <main+0x3e8>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fa1a 	bl	800015c <__adddf3>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <main+0x3f8>)
 8000d36:	f7ff fcf1 	bl	800071c <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <main+0x3fc>)
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fbbe 	bl	80004c8 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	a32a      	add	r3, pc, #168	; (adr r3, 8000e00 <main+0x3e0>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	f7ff fbb5 	bl	80004c8 <__aeabi_dmul>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4932      	ldr	r1, [pc, #200]	; (8000e2c <main+0x40c>)
 8000d64:	e9c1 2300 	strd	r2, r3, [r1]
 8000d68:	e027      	b.n	8000dba <main+0x39a>
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <main+0x404>)
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <main+0x408>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff f9ef 	bl	8000158 <__aeabi_dsub>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <main+0x3f8>)
 8000d88:	f7ff fcc8 	bl	800071c <__aeabi_ddiv>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <main+0x3fc>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fb95 	bl	80004c8 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	a316      	add	r3, pc, #88	; (adr r3, 8000e00 <main+0x3e0>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fb8c 	bl	80004c8 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	491d      	ldr	r1, [pc, #116]	; (8000e2c <main+0x40c>)
 8000db6:	e9c1 2300 	strd	r2, r3, [r1]
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <main+0x3f0>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	4914      	ldr	r1, [pc, #80]	; (8000e14 <main+0x3f4>)
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <main+0x404>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	4916      	ldr	r1, [pc, #88]	; (8000e28 <main+0x408>)
 8000dce:	e9c1 2300 	strd	r2, r3, [r1]
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <main+0x410>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <main+0x414>)
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe0d 	bl	80009fc <pulse_modulation>
 8000de2:	f000 fc61 	bl	80016a8 <HAL_GetTick>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff faf3 	bl	80003d4 <__aeabi_ui2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4911      	ldr	r1, [pc, #68]	; (8000e38 <main+0x418>)
 8000df4:	e9c1 2300 	strd	r2, r3, [r1]
 8000df8:	e6a1      	b.n	8000b3e <main+0x11e>
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	51eb851f 	.word	0x51eb851f
 8000e04:	40191eb8 	.word	0x40191eb8
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40efffe0 	.word	0x40efffe0
 8000e10:	200001b8 	.word	0x200001b8
 8000e14:	200001c8 	.word	0x200001c8
 8000e18:	4094a000 	.word	0x4094a000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200001d8 	.word	0x200001d8
 8000e24:	200001c0 	.word	0x200001c0
 8000e28:	200001d0 	.word	0x200001d0
 8000e2c:	200001e0 	.word	0x200001e0
 8000e30:	200001f0 	.word	0x200001f0
 8000e34:	200001f4 	.word	0x200001f4
 8000e38:	200001e8 	.word	0x200001e8

08000e3c <SystemClock_Config>:
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	; 0x40
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2228      	movs	r2, #40	; 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fb7a 	bl	8003544 <memset>
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e66:	2310      	movs	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fe9d 	bl	8001bbc <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x50>
 8000e88:	f000 f9ba 	bl	8001200 <Error_Handler>
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	2302      	movs	r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 f90b 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x78>
 8000eb0:	f000 f9a6 	bl	8001200 <Error_Handler>
 8000eb4:	bf00      	nop
 8000eb6:	3740      	adds	r7, #64	; 0x40
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <MX_TIM1_Init>:
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2224      	movs	r2, #36	; 0x24
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fb3a 	bl	8003544 <memset>
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_TIM1_Init+0xac>)
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	2303      	movs	r3, #3
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000f30:	f001 fb9e 	bl	8002670 <HAL_TIM_Encoder_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM1_Init+0x82>
 8000f3a:	f000 f961 	bl	8001200 <Error_Handler>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM1_Init+0xa8>)
 8000f4c:	f002 f8ee 	bl	800312c <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x9e>
 8000f56:	f000 f953 	bl	8001200 <Error_Handler>
 8000f5a:	bf00      	nop
 8000f5c:	3730      	adds	r7, #48	; 0x30
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000094 	.word	0x20000094
 8000f68:	40012c00 	.word	0x40012c00

08000f6c <MX_TIM2_Init>:
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2224      	movs	r2, #36	; 0x24
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fae2 	bl	8003544 <memset>
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000fdc:	f001 fb48 	bl	8002670 <HAL_TIM_Encoder_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x7e>
 8000fe6:	f000 f90b 	bl	8001200 <Error_Handler>
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM2_Init+0xa4>)
 8000ff8:	f002 f898 	bl	800312c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x9a>
 8001002:	f000 f8fd 	bl	8001200 <Error_Handler>
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	; 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000dc 	.word	0x200000dc

08001014 <MX_TIM4_Init>:
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001046:	4a33      	ldr	r2, [pc, #204]	; (8001114 <MX_TIM4_Init+0x100>)
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <MX_TIM4_Init+0xfc>)
 800104c:	2223      	movs	r2, #35	; 0x23
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
 800106a:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_TIM4_Init+0xfc>)
 800106c:	f001 f9b6 	bl	80023dc <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM4_Init+0x66>
 8001076:	f000 f8c3 	bl	8001200 <Error_Handler>
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001084:	4619      	mov	r1, r3
 8001086:	4822      	ldr	r0, [pc, #136]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001088:	f001 fce4 	bl	8002a54 <HAL_TIM_ConfigClockSource>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM4_Init+0x82>
 8001092:	f000 f8b5 	bl	8001200 <Error_Handler>
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001098:	f001 f9ef 	bl	800247a <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM4_Init+0x92>
 80010a2:	f000 f8ad 	bl	8001200 <Error_Handler>
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	4619      	mov	r1, r3
 80010b4:	4816      	ldr	r0, [pc, #88]	; (8001110 <MX_TIM4_Init+0xfc>)
 80010b6:	f002 f839 	bl	800312c <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM4_Init+0xb0>
 80010c0:	f000 f89e 	bl	8001200 <Error_Handler>
 80010c4:	2360      	movs	r3, #96	; 0x60
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2208      	movs	r2, #8
 80010d8:	4619      	mov	r1, r3
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_TIM4_Init+0xfc>)
 80010dc:	f001 fbf8 	bl	80028d0 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM4_Init+0xd6>
 80010e6:	f000 f88b 	bl	8001200 <Error_Handler>
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	220c      	movs	r2, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM4_Init+0xfc>)
 80010f2:	f001 fbed 	bl	80028d0 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0xec>
 80010fc:	f000 f880 	bl	8001200 <Error_Handler>
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM4_Init+0xfc>)
 8001102:	f000 f93d 	bl	8001380 <HAL_TIM_MspPostInit>
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	; 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000124 	.word	0x20000124
 8001114:	40000800 	.word	0x40000800

08001118 <MX_USART2_UART_Init>:
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_USART2_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001150:	f002 f84a 	bl	80031e8 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART2_UART_Init+0x46>
 800115a:	f000 f851 	bl	8001200 <Error_Handler>
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000016c 	.word	0x2000016c
 8001168:	40004400 	.word	0x40004400

0800116c <MX_GPIO_Init>:
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_GPIO_Init+0x8c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_GPIO_Init+0x8c>)
 8001186:	f043 0320 	orr.w	r3, r3, #32
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_GPIO_Init+0x8c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_GPIO_Init+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <MX_GPIO_Init+0x8c>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_GPIO_Init+0x8c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_GPIO_Init+0x8c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <MX_GPIO_Init+0x8c>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_GPIO_Init+0x8c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	21f0      	movs	r1, #240	; 0xf0
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <MX_GPIO_Init+0x90>)
 80011ce:	f000 fcdd 	bl	8001b8c <HAL_GPIO_WritePin>
 80011d2:	23f0      	movs	r3, #240	; 0xf0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	2303      	movs	r3, #3
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_GPIO_Init+0x90>)
 80011ea:	f000 fb4b 	bl	8001884 <HAL_GPIO_Init>
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010c00 	.word	0x40010c00

08001200 <Error_Handler>:
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
 8001204:	b672      	cpsid	i
 8001206:	bf00      	nop
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_MspInit+0x5c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_MspInit+0x5c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_MspInit+0x60>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_MspInit+0x60>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6053      	str	r3, [r2, #4]
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000

08001270 <HAL_TIM_Encoder_MspInit>:
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <HAL_TIM_Encoder_MspInit+0xc8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d125      	bne.n	80012dc <HAL_TIM_Encoder_MspInit+0x6c>
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	4619      	mov	r1, r3
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <HAL_TIM_Encoder_MspInit+0xd0>)
 80012d6:	f000 fad5 	bl	8001884 <HAL_GPIO_Init>
 80012da:	e028      	b.n	800132e <HAL_TIM_Encoder_MspInit+0xbe>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d123      	bne.n	800132e <HAL_TIM_Encoder_MspInit+0xbe>
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6193      	str	r3, [r2, #24]
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_TIM_Encoder_MspInit+0xcc>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_TIM_Encoder_MspInit+0xd0>)
 800132a:	f000 faab 	bl	8001884 <HAL_GPIO_Init>
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40012c00 	.word	0x40012c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800

08001344 <HAL_TIM_Base_MspInit>:
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x34>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10b      	bne.n	800136e <HAL_TIM_Base_MspInit+0x2a>
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_TIM_Base_MspInit+0x38>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_TIM_Base_MspInit+0x38>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_TIM_Base_MspInit+0x38>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40000800 	.word	0x40000800
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_MspPostInit>:
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_TIM_MspPostInit+0x5c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d118      	bne.n	80013d2 <HAL_TIM_MspPostInit+0x52>
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_TIM_MspPostInit+0x60>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_TIM_MspPostInit+0x60>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_TIM_MspPostInit+0x60>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	2302      	movs	r3, #2
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_TIM_MspPostInit+0x64>)
 80013ce:	f000 fa59 	bl	8001884 <HAL_GPIO_Init>
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40000800 	.word	0x40000800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <HAL_UART_MspInit>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_UART_MspInit+0x88>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d12f      	bne.n	8001468 <HAL_UART_MspInit+0x80>
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_UART_MspInit+0x8c>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_UART_MspInit+0x8c>)
 800140e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001412:	61d3      	str	r3, [r2, #28]
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x8c>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_UART_MspInit+0x8c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_UART_MspInit+0x8c>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_MspInit+0x8c>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2304      	movs	r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	2302      	movs	r3, #2
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	2303      	movs	r3, #3
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <HAL_UART_MspInit+0x90>)
 800144c:	f000 fa1a 	bl	8001884 <HAL_GPIO_Init>
 8001450:	2308      	movs	r3, #8
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001464:	f000 fa0e 	bl	8001884 <HAL_GPIO_Init>
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40004400 	.word	0x40004400
 8001474:	40021000 	.word	0x40021000
 8001478:	40010800 	.word	0x40010800

0800147c <NMI_Handler>:
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	f000 f8df 	bl	8001684 <HAL_IncTick>
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f002 f83a 	bl	8003574 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20005000 	.word	0x20005000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000230 	.word	0x20000230
 8001534:	20000380 	.word	0x20000380

08001538 <SystemInit>:
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <Reset_Handler>:
 8001544:	f7ff fff8 	bl	8001538 <SystemInit>
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <LoopFillZerobss+0xe>)
 800154a:	490c      	ldr	r1, [pc, #48]	; (800157c <LoopFillZerobss+0x12>)
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <LoopFillZerobss+0x16>)
 800154e:	2300      	movs	r3, #0
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:
 8001552:	58d4      	ldr	r4, [r2, r3]
 8001554:	50c4      	str	r4, [r0, r3]
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:
 8001558:	18c4      	adds	r4, r0, r3
 800155a:	428c      	cmp	r4, r1
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <LoopFillZerobss+0x1a>)
 8001560:	4c09      	ldr	r4, [pc, #36]	; (8001588 <LoopFillZerobss+0x1e>)
 8001562:	2300      	movs	r3, #0
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:
 800156a:	42a2      	cmp	r2, r4
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>
 800156e:	f002 f807 	bl	8003580 <__libc_init_array>
 8001572:	f7ff fa55 	bl	8000a20 <main>
 8001576:	4770      	bx	lr
 8001578:	20000000 	.word	0x20000000
 800157c:	20000074 	.word	0x20000074
 8001580:	08003618 	.word	0x08003618
 8001584:	20000078 	.word	0x20000078
 8001588:	20000380 	.word	0x20000380

0800158c <ADC1_2_IRQHandler>:
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>

0800158e <allocate_matrix>:
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
 800159a:	4613      	mov	r3, r2
 800159c:	70bb      	strb	r3, [r7, #2]
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 ff1a 	bl	80033dc <malloc>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	78ba      	ldrb	r2, [r7, #2]
 80015b4:	711a      	strb	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	715a      	strb	r2, [r3, #5]
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e00f      	b.n	80015e2 <allocate_matrix+0x54>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	4619      	mov	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	18d4      	adds	r4, r2, r3
 80015d2:	2008      	movs	r0, #8
 80015d4:	f001 fee6 	bl	80033a4 <calloc>
 80015d8:	4603      	mov	r3, r0
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	795b      	ldrb	r3, [r3, #5]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	dbe9      	blt.n	80015c2 <allocate_matrix+0x34>
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f907 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fdfa 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f911 	bl	800186a <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f8e7 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000018 	.word	0x20000018
 800167c:	20000020 	.word	0x20000020
 8001680:	2000001c 	.word	0x2000001c

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000020 	.word	0x20000020
 80016a4:	20000234 	.word	0x20000234

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000234 	.word	0x20000234

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff90 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff49 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5e 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff90 	bl	8001774 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5f 	bl	8001720 <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e169      	b.n	8001b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001898:	2201      	movs	r2, #1
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8158 	bne.w	8001b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a9a      	ldr	r2, [pc, #616]	; (8001b24 <HAL_GPIO_Init+0x2a0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018c0:	4a98      	ldr	r2, [pc, #608]	; (8001b24 <HAL_GPIO_Init+0x2a0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d875      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018c6:	4a98      	ldr	r2, [pc, #608]	; (8001b28 <HAL_GPIO_Init+0x2a4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d058      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018cc:	4a96      	ldr	r2, [pc, #600]	; (8001b28 <HAL_GPIO_Init+0x2a4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d86f      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018d2:	4a96      	ldr	r2, [pc, #600]	; (8001b2c <HAL_GPIO_Init+0x2a8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d052      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018d8:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_GPIO_Init+0x2a8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d869      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018de:	4a94      	ldr	r2, [pc, #592]	; (8001b30 <HAL_GPIO_Init+0x2ac>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04c      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018e4:	4a92      	ldr	r2, [pc, #584]	; (8001b30 <HAL_GPIO_Init+0x2ac>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d863      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018ea:	4a92      	ldr	r2, [pc, #584]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d046      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018f0:	4a90      	ldr	r2, [pc, #576]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d85d      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d82a      	bhi.n	8001950 <HAL_GPIO_Init+0xcc>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d859      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <HAL_GPIO_Init+0x80>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	0800197f 	.word	0x0800197f
 8001908:	08001959 	.word	0x08001959
 800190c:	0800196b 	.word	0x0800196b
 8001910:	080019ad 	.word	0x080019ad
 8001914:	080019b3 	.word	0x080019b3
 8001918:	080019b3 	.word	0x080019b3
 800191c:	080019b3 	.word	0x080019b3
 8001920:	080019b3 	.word	0x080019b3
 8001924:	080019b3 	.word	0x080019b3
 8001928:	080019b3 	.word	0x080019b3
 800192c:	080019b3 	.word	0x080019b3
 8001930:	080019b3 	.word	0x080019b3
 8001934:	080019b3 	.word	0x080019b3
 8001938:	080019b3 	.word	0x080019b3
 800193c:	080019b3 	.word	0x080019b3
 8001940:	080019b3 	.word	0x080019b3
 8001944:	080019b3 	.word	0x080019b3
 8001948:	08001961 	.word	0x08001961
 800194c:	08001975 	.word	0x08001975
 8001950:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <HAL_GPIO_Init+0x2b4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001956:	e02c      	b.n	80019b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e029      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	3304      	adds	r3, #4
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e024      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	3308      	adds	r3, #8
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e01f      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	330c      	adds	r3, #12
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e01a      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001986:	2304      	movs	r3, #4
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e013      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001994:	2308      	movs	r3, #8
 8001996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	611a      	str	r2, [r3, #16]
          break;
 800199e:	e009      	b.n	80019b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a0:	2308      	movs	r3, #8
 80019a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	615a      	str	r2, [r3, #20]
          break;
 80019aa:	e003      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          break;
 80019b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d801      	bhi.n	80019be <HAL_GPIO_Init+0x13a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_Init+0x13e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d802      	bhi.n	80019d0 <HAL_GPIO_Init+0x14c>
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x152>
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	3b08      	subs	r3, #8
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	210f      	movs	r1, #15
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80b1 	beq.w	8001b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a04:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a40      	ldr	r2, [pc, #256]	; (8001b44 <HAL_GPIO_Init+0x2c0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d013      	beq.n	8001a70 <HAL_GPIO_Init+0x1ec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3f      	ldr	r2, [pc, #252]	; (8001b48 <HAL_GPIO_Init+0x2c4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1e8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3e      	ldr	r2, [pc, #248]	; (8001b4c <HAL_GPIO_Init+0x2c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <HAL_GPIO_Init+0x2cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1e0>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e004      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a70:	2300      	movs	r3, #0
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	f002 0203 	and.w	r2, r2, #3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a82:	492f      	ldr	r1, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	492c      	ldr	r1, [pc, #176]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4928      	ldr	r1, [pc, #160]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	491e      	ldr	r1, [pc, #120]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4918      	ldr	r1, [pc, #96]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4914      	ldr	r1, [pc, #80]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d021      	beq.n	8001b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e021      	b.n	8001b66 <HAL_GPIO_Init+0x2e2>
 8001b22:	bf00      	nop
 8001b24:	10320000 	.word	0x10320000
 8001b28:	10310000 	.word	0x10310000
 8001b2c:	10220000 	.word	0x10220000
 8001b30:	10210000 	.word	0x10210000
 8001b34:	10120000 	.word	0x10120000
 8001b38:	10110000 	.word	0x10110000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	40011400 	.word	0x40011400
 8001b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4909      	ldr	r1, [pc, #36]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f47f ae8e 	bne.w	8001898 <HAL_GPIO_Init+0x14>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	372c      	adds	r7, #44	; 0x2c
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e272      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d112      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d168      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e24c      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76>
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a71      	ldr	r2, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fd06 	bl	80016a8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fd02 	bl	80016a8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e200      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe4>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fcf2 	bl	80016a8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcee 	bl	80016a8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1ec      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x10c>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1c0      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4939      	ldr	r1, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fca7 	bl	80016a8 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fca3 	bl	80016a8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1a1      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4927      	ldr	r1, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc86 	bl	80016a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc82 	bl	80016a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e180      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03a      	beq.n	8001e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fc66 	bl	80016a8 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc62 	bl	80016a8 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e160      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 face 	bl	80023a0 <RCC_Delay>
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fc4c 	bl	80016a8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff fc48 	bl	80016a8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d908      	bls.n	8001e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e146      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	42420000 	.word	0x42420000
 8001e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a6 	beq.w	8001f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b8b      	ldr	r3, [pc, #556]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a87      	ldr	r2, [pc, #540]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b85      	ldr	r3, [pc, #532]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7e      	ldr	r2, [pc, #504]	; (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fc09 	bl	80016a8 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff fc05 	bl	80016a8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e103      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x334>
 8001ed6:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a69      	ldr	r2, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b67      	ldr	r3, [pc, #412]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a66      	ldr	r2, [pc, #408]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x356>
 8001ef8:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a60      	ldr	r2, [pc, #384]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a5a      	ldr	r2, [pc, #360]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b58      	ldr	r3, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fbb9 	bl	80016a8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fbb5 	bl	80016a8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0b1      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x37e>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fba3 	bl	80016a8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff fb9f 	bl	80016a8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e09b      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d061      	beq.n	8002074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d146      	bne.n	8002046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb73 	bl	80016a8 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fb6f 	bl	80016a8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e06d      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4921      	ldr	r1, [pc, #132]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a19      	ldr	r1, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	430b      	orrs	r3, r1
 8002012:	491b      	ldr	r1, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fb43 	bl	80016a8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fb3f 	bl	80016a8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e03d      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x46a>
 8002044:	e035      	b.n	80020b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fb2c 	bl	80016a8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fb28 	bl	80016a8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e026      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x498>
 8002072:	e01e      	b.n	80020b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e019      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
 8002080:	40021000 	.word	0x40021000
 8002084:	40007000 	.word	0x40007000
 8002088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x500>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d0      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d910      	bls.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4965      	ldr	r1, [pc, #404]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b8      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	494d      	ldr	r1, [pc, #308]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d040      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e073      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4936      	ldr	r1, [pc, #216]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff fa7a 	bl	80016a8 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff fa76 	bl	80016a8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e053      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d210      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4922      	ldr	r1, [pc, #136]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e032      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4916      	ldr	r1, [pc, #88]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	490e      	ldr	r1, [pc, #56]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224e:	f000 f821 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490a      	ldr	r1, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1cc>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f9d8 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	080035e4 	.word	0x080035e4
 800228c:	20000018 	.word	0x20000018
 8002290:	2000001c 	.word	0x2000001c

08002294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_RCC_GetSysClockFreq+0x94>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x30>
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x36>
 80022c2:	e027      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0x98>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	e027      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0c9b      	lsrs	r3, r3, #18
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_GetSysClockFreq+0x94>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0c5b      	lsrs	r3, r3, #17
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e004      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	613b      	str	r3, [r7, #16]
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetSysClockFreq+0x98>)
 8002316:	613b      	str	r3, [r7, #16]
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	693b      	ldr	r3, [r7, #16]
}
 800231c:	4618      	mov	r0, r3
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	080035fc 	.word	0x080035fc
 8002334:	0800360c 	.word	0x0800360c
 8002338:	003d0900 	.word	0x003d0900

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_RCC_GetHCLKFreq+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000018 	.word	0x20000018

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff2 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	080035f4 	.word	0x080035f4

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800237c:	f7ff ffde 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	0adb      	lsrs	r3, r3, #11
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	080035f4 	.word	0x080035f4

080023a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <RCC_Delay+0x34>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <RCC_Delay+0x38>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0a5b      	lsrs	r3, r3, #9
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023bc:	bf00      	nop
  }
  while (Delay --);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	60fa      	str	r2, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <RCC_Delay+0x1c>
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000018 	.word	0x20000018
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e041      	b.n	8002472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe ff9e 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fbe2 	bl	8002be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e041      	b.n	8002510 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f839 	bl	8002518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f000 fb93 	bl	8002be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
	...

0800252c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_TIM_PWM_Start+0x24>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e022      	b.n	8002596 <HAL_TIM_PWM_Start+0x6a>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b04      	cmp	r3, #4
 8002554:	d109      	bne.n	800256a <HAL_TIM_PWM_Start+0x3e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	e015      	b.n	8002596 <HAL_TIM_PWM_Start+0x6a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d109      	bne.n	8002584 <HAL_TIM_PWM_Start+0x58>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e008      	b.n	8002596 <HAL_TIM_PWM_Start+0x6a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e05e      	b.n	800265c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Start+0x82>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ac:	e013      	b.n	80025d6 <HAL_TIM_PWM_Start+0xaa>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d104      	bne.n	80025be <HAL_TIM_PWM_Start+0x92>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	e00b      	b.n	80025d6 <HAL_TIM_PWM_Start+0xaa>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Start+0xa2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025cc:	e003      	b.n	80025d6 <HAL_TIM_PWM_Start+0xaa>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd80 	bl	80030e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_TIM_PWM_Start+0x138>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_TIM_PWM_Start+0x138>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00e      	beq.n	8002626 <HAL_TIM_PWM_Start+0xfa>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d009      	beq.n	8002626 <HAL_TIM_PWM_Start+0xfa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a14      	ldr	r2, [pc, #80]	; (8002668 <HAL_TIM_PWM_Start+0x13c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_TIM_PWM_Start+0xfa>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_TIM_PWM_Start+0x140>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d010      	beq.n	800265a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	e007      	b.n	800265a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800

08002670 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e093      	b.n	80027ac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe fde9 	bl	8001270 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b4:	f023 0307 	bic.w	r3, r3, #7
 80026b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f000 fa8d 	bl	8002be4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4313      	orrs	r3, r2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002710:	f023 030c 	bic.w	r3, r3, #12
 8002714:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800271c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	4313      	orrs	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	011a      	lsls	r2, r3, #4
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	031b      	lsls	r3, r3, #12
 8002740:	4313      	orrs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800274e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4313      	orrs	r3, r2
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d110      	bne.n	8002806 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80027ea:	7b7b      	ldrb	r3, [r7, #13]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e069      	b.n	80028c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002804:	e031      	b.n	800286a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d110      	bne.n	800282e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d102      	bne.n	8002818 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002812:	7b3b      	ldrb	r3, [r7, #12]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d001      	beq.n	800281c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e055      	b.n	80028c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800282c:	e01d      	b.n	800286a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d108      	bne.n	8002846 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d105      	bne.n	8002846 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800283a:	7b7b      	ldrb	r3, [r7, #13]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002840:	7b3b      	ldrb	r3, [r7, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e03e      	b.n	80028c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_TIM_Encoder_Start+0xc4>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d008      	beq.n	8002888 <HAL_TIM_Encoder_Start+0xd4>
 8002876:	e00f      	b.n	8002898 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fc2f 	bl	80030e4 <TIM_CCxChannelCmd>
      break;
 8002886:	e016      	b.n	80028b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	2104      	movs	r1, #4
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fc27 	bl	80030e4 <TIM_CCxChannelCmd>
      break;
 8002896:	e00e      	b.n	80028b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fc1f 	bl	80030e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	2104      	movs	r1, #4
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fc18 	bl	80030e4 <TIM_CCxChannelCmd>
      break;
 80028b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0ae      	b.n	8002a4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	f200 809f 	bhi.w	8002a3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002939 	.word	0x08002939
 8002908:	08002a3d 	.word	0x08002a3d
 800290c:	08002a3d 	.word	0x08002a3d
 8002910:	08002a3d 	.word	0x08002a3d
 8002914:	08002979 	.word	0x08002979
 8002918:	08002a3d 	.word	0x08002a3d
 800291c:	08002a3d 	.word	0x08002a3d
 8002920:	08002a3d 	.word	0x08002a3d
 8002924:	080029bb 	.word	0x080029bb
 8002928:	08002a3d 	.word	0x08002a3d
 800292c:	08002a3d 	.word	0x08002a3d
 8002930:	08002a3d 	.word	0x08002a3d
 8002934:	080029fb 	.word	0x080029fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f9b2 	bl	8002ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6999      	ldr	r1, [r3, #24]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	619a      	str	r2, [r3, #24]
      break;
 8002976:	e064      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f9f8 	bl	8002d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6999      	ldr	r1, [r3, #24]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	619a      	str	r2, [r3, #24]
      break;
 80029b8:	e043      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fa41 	bl	8002e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0208 	orr.w	r2, r2, #8
 80029d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0204 	bic.w	r2, r2, #4
 80029e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]
      break;
 80029f8:	e023      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fa8b 	bl	8002f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69d9      	ldr	r1, [r3, #28]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	021a      	lsls	r2, r3, #8
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	61da      	str	r2, [r3, #28]
      break;
 8002a3a:	e002      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_ConfigClockSource+0x1c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0b4      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x186>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa8:	d03e      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xd4>
 8002aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aae:	f200 8087 	bhi.w	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	f000 8086 	beq.w	8002bc6 <HAL_TIM_ConfigClockSource+0x172>
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	d87f      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d01a      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xa6>
 8002ac4:	2b70      	cmp	r3, #112	; 0x70
 8002ac6:	d87b      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b60      	cmp	r3, #96	; 0x60
 8002aca:	d050      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x11a>
 8002acc:	2b60      	cmp	r3, #96	; 0x60
 8002ace:	d877      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d03c      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0xfa>
 8002ad4:	2b50      	cmp	r3, #80	; 0x50
 8002ad6:	d873      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d058      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x13a>
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d86f      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b30      	cmp	r3, #48	; 0x30
 8002ae2:	d064      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002ae4:	2b30      	cmp	r3, #48	; 0x30
 8002ae6:	d86b      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d060      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d867      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d05c      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d05a      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002af8:	e062      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b0a:	f000 facc 	bl	80030a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]
      break;
 8002b26:	e04f      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b38:	f000 fab5 	bl	80030a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b4a:	609a      	str	r2, [r3, #8]
      break;
 8002b4c:	e03c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 fa2c 	bl	8002fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2150      	movs	r1, #80	; 0x50
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa83 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002b6c:	e02c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f000 fa4a 	bl	8003014 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2160      	movs	r1, #96	; 0x60
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fa73 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002b8c:	e01c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 fa0c 	bl	8002fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fa63 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002bac:	e00c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 fa5a 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002bbe:	e003      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <TIM_Base_SetConfig+0xb8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <TIM_Base_SetConfig+0x30>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d007      	beq.n	8002c14 <TIM_Base_SetConfig+0x30>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <TIM_Base_SetConfig+0xbc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_Base_SetConfig+0x30>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <TIM_Base_SetConfig+0xc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d108      	bne.n	8002c26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <TIM_Base_SetConfig+0xb8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00b      	beq.n	8002c46 <TIM_Base_SetConfig+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d007      	beq.n	8002c46 <TIM_Base_SetConfig+0x62>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <TIM_Base_SetConfig+0xbc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_Base_SetConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <TIM_Base_SetConfig+0xc0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <TIM_Base_SetConfig+0xb8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d103      	bne.n	8002c8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	615a      	str	r2, [r3, #20]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 0201 	bic.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <TIM_OC1_SetConfig+0xc8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10c      	bne.n	8002d1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0308 	bic.w	r3, r3, #8
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <TIM_OC1_SetConfig+0xc8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40012c00 	.word	0x40012c00

08002d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 0210 	bic.w	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 0320 	bic.w	r3, r3, #32
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <TIM_OC2_SetConfig+0xd0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10d      	bne.n	8002df0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <TIM_OC2_SetConfig+0xd0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d113      	bne.n	8002e20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <TIM_OC3_SetConfig+0xd0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10d      	bne.n	8002ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <TIM_OC3_SetConfig+0xd0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d113      	bne.n	8002ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00

08002f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	031b      	lsls	r3, r3, #12
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <TIM_OC4_SetConfig+0x98>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d109      	bne.n	8002f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	019b      	lsls	r3, r3, #6
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	40012c00 	.word	0x40012c00

08002fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0201 	bic.w	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f023 030a 	bic.w	r3, r3, #10
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0210 	bic.w	r2, r3, #16
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	031b      	lsls	r3, r3, #12
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	621a      	str	r2, [r3, #32]
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	f043 0307 	orr.w	r3, r3, #7
 8003094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b087      	sub	sp, #28
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	021a      	lsls	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	609a      	str	r2, [r3, #8]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2201      	movs	r2, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003140:	2302      	movs	r3, #2
 8003142:	e046      	b.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a16      	ldr	r2, [pc, #88]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d009      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10c      	bne.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800

080031e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e042      	b.n	8003280 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe f8ea 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f82b 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032c2:	f023 030c 	bic.w	r3, r3, #12
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <UART_SetConfig+0x114>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7ff f842 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	e002      	b.n	80032fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7ff f82a 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	0119      	lsls	r1, r3, #4
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <UART_SetConfig+0x118>)
 8003336:	fba3 0302 	umull	r0, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2064      	movs	r0, #100	; 0x64
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	; 0x32
 8003348:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <UART_SetConfig+0x118>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003354:	4419      	add	r1, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009a      	lsls	r2, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <UART_SetConfig+0x118>)
 800336e:	fba3 0302 	umull	r0, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2064      	movs	r0, #100	; 0x64
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <UART_SetConfig+0x118>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	440a      	add	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40013800 	.word	0x40013800
 80033a0:	51eb851f 	.word	0x51eb851f

080033a4 <calloc>:
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <calloc+0xc>)
 80033a6:	460a      	mov	r2, r1
 80033a8:	4601      	mov	r1, r0
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	f000 b802 	b.w	80033b4 <_calloc_r>
 80033b0:	20000070 	.word	0x20000070

080033b4 <_calloc_r>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	fba1 5402 	umull	r5, r4, r1, r2
 80033ba:	b934      	cbnz	r4, 80033ca <_calloc_r+0x16>
 80033bc:	4629      	mov	r1, r5
 80033be:	f000 f835 	bl	800342c <_malloc_r>
 80033c2:	4606      	mov	r6, r0
 80033c4:	b928      	cbnz	r0, 80033d2 <_calloc_r+0x1e>
 80033c6:	4630      	mov	r0, r6
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
 80033ca:	220c      	movs	r2, #12
 80033cc:	2600      	movs	r6, #0
 80033ce:	6002      	str	r2, [r0, #0]
 80033d0:	e7f9      	b.n	80033c6 <_calloc_r+0x12>
 80033d2:	462a      	mov	r2, r5
 80033d4:	4621      	mov	r1, r4
 80033d6:	f000 f8b5 	bl	8003544 <memset>
 80033da:	e7f4      	b.n	80033c6 <_calloc_r+0x12>

080033dc <malloc>:
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <malloc+0xc>)
 80033de:	4601      	mov	r1, r0
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	f000 b823 	b.w	800342c <_malloc_r>
 80033e6:	bf00      	nop
 80033e8:	20000070 	.word	0x20000070

080033ec <sbrk_aligned>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4e0e      	ldr	r6, [pc, #56]	; (8003428 <sbrk_aligned+0x3c>)
 80033f0:	460c      	mov	r4, r1
 80033f2:	6831      	ldr	r1, [r6, #0]
 80033f4:	4605      	mov	r5, r0
 80033f6:	b911      	cbnz	r1, 80033fe <sbrk_aligned+0x12>
 80033f8:	f000 f8ac 	bl	8003554 <_sbrk_r>
 80033fc:	6030      	str	r0, [r6, #0]
 80033fe:	4621      	mov	r1, r4
 8003400:	4628      	mov	r0, r5
 8003402:	f000 f8a7 	bl	8003554 <_sbrk_r>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	d00a      	beq.n	8003420 <sbrk_aligned+0x34>
 800340a:	1cc4      	adds	r4, r0, #3
 800340c:	f024 0403 	bic.w	r4, r4, #3
 8003410:	42a0      	cmp	r0, r4
 8003412:	d007      	beq.n	8003424 <sbrk_aligned+0x38>
 8003414:	1a21      	subs	r1, r4, r0
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f89c 	bl	8003554 <_sbrk_r>
 800341c:	3001      	adds	r0, #1
 800341e:	d101      	bne.n	8003424 <sbrk_aligned+0x38>
 8003420:	f04f 34ff 	mov.w	r4, #4294967295
 8003424:	4620      	mov	r0, r4
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	2000023c 	.word	0x2000023c

0800342c <_malloc_r>:
 800342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003430:	1ccd      	adds	r5, r1, #3
 8003432:	f025 0503 	bic.w	r5, r5, #3
 8003436:	3508      	adds	r5, #8
 8003438:	2d0c      	cmp	r5, #12
 800343a:	bf38      	it	cc
 800343c:	250c      	movcc	r5, #12
 800343e:	2d00      	cmp	r5, #0
 8003440:	4607      	mov	r7, r0
 8003442:	db01      	blt.n	8003448 <_malloc_r+0x1c>
 8003444:	42a9      	cmp	r1, r5
 8003446:	d905      	bls.n	8003454 <_malloc_r+0x28>
 8003448:	230c      	movs	r3, #12
 800344a:	2600      	movs	r6, #0
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	4630      	mov	r0, r6
 8003450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003528 <_malloc_r+0xfc>
 8003458:	f000 f868 	bl	800352c <__malloc_lock>
 800345c:	f8d8 3000 	ldr.w	r3, [r8]
 8003460:	461c      	mov	r4, r3
 8003462:	bb5c      	cbnz	r4, 80034bc <_malloc_r+0x90>
 8003464:	4629      	mov	r1, r5
 8003466:	4638      	mov	r0, r7
 8003468:	f7ff ffc0 	bl	80033ec <sbrk_aligned>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	4604      	mov	r4, r0
 8003470:	d155      	bne.n	800351e <_malloc_r+0xf2>
 8003472:	f8d8 4000 	ldr.w	r4, [r8]
 8003476:	4626      	mov	r6, r4
 8003478:	2e00      	cmp	r6, #0
 800347a:	d145      	bne.n	8003508 <_malloc_r+0xdc>
 800347c:	2c00      	cmp	r4, #0
 800347e:	d048      	beq.n	8003512 <_malloc_r+0xe6>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	4631      	mov	r1, r6
 8003484:	4638      	mov	r0, r7
 8003486:	eb04 0903 	add.w	r9, r4, r3
 800348a:	f000 f863 	bl	8003554 <_sbrk_r>
 800348e:	4581      	cmp	r9, r0
 8003490:	d13f      	bne.n	8003512 <_malloc_r+0xe6>
 8003492:	6821      	ldr	r1, [r4, #0]
 8003494:	4638      	mov	r0, r7
 8003496:	1a6d      	subs	r5, r5, r1
 8003498:	4629      	mov	r1, r5
 800349a:	f7ff ffa7 	bl	80033ec <sbrk_aligned>
 800349e:	3001      	adds	r0, #1
 80034a0:	d037      	beq.n	8003512 <_malloc_r+0xe6>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	442b      	add	r3, r5
 80034a6:	6023      	str	r3, [r4, #0]
 80034a8:	f8d8 3000 	ldr.w	r3, [r8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d038      	beq.n	8003522 <_malloc_r+0xf6>
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	42a2      	cmp	r2, r4
 80034b4:	d12b      	bne.n	800350e <_malloc_r+0xe2>
 80034b6:	2200      	movs	r2, #0
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	e00f      	b.n	80034dc <_malloc_r+0xb0>
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	1b52      	subs	r2, r2, r5
 80034c0:	d41f      	bmi.n	8003502 <_malloc_r+0xd6>
 80034c2:	2a0b      	cmp	r2, #11
 80034c4:	d917      	bls.n	80034f6 <_malloc_r+0xca>
 80034c6:	1961      	adds	r1, r4, r5
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	6025      	str	r5, [r4, #0]
 80034cc:	bf18      	it	ne
 80034ce:	6059      	strne	r1, [r3, #4]
 80034d0:	6863      	ldr	r3, [r4, #4]
 80034d2:	bf08      	it	eq
 80034d4:	f8c8 1000 	streq.w	r1, [r8]
 80034d8:	5162      	str	r2, [r4, r5]
 80034da:	604b      	str	r3, [r1, #4]
 80034dc:	4638      	mov	r0, r7
 80034de:	f104 060b 	add.w	r6, r4, #11
 80034e2:	f000 f829 	bl	8003538 <__malloc_unlock>
 80034e6:	f026 0607 	bic.w	r6, r6, #7
 80034ea:	1d23      	adds	r3, r4, #4
 80034ec:	1af2      	subs	r2, r6, r3
 80034ee:	d0ae      	beq.n	800344e <_malloc_r+0x22>
 80034f0:	1b9b      	subs	r3, r3, r6
 80034f2:	50a3      	str	r3, [r4, r2]
 80034f4:	e7ab      	b.n	800344e <_malloc_r+0x22>
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	6862      	ldr	r2, [r4, #4]
 80034fa:	d1dd      	bne.n	80034b8 <_malloc_r+0x8c>
 80034fc:	f8c8 2000 	str.w	r2, [r8]
 8003500:	e7ec      	b.n	80034dc <_malloc_r+0xb0>
 8003502:	4623      	mov	r3, r4
 8003504:	6864      	ldr	r4, [r4, #4]
 8003506:	e7ac      	b.n	8003462 <_malloc_r+0x36>
 8003508:	4634      	mov	r4, r6
 800350a:	6876      	ldr	r6, [r6, #4]
 800350c:	e7b4      	b.n	8003478 <_malloc_r+0x4c>
 800350e:	4613      	mov	r3, r2
 8003510:	e7cc      	b.n	80034ac <_malloc_r+0x80>
 8003512:	230c      	movs	r3, #12
 8003514:	4638      	mov	r0, r7
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	f000 f80e 	bl	8003538 <__malloc_unlock>
 800351c:	e797      	b.n	800344e <_malloc_r+0x22>
 800351e:	6025      	str	r5, [r4, #0]
 8003520:	e7dc      	b.n	80034dc <_malloc_r+0xb0>
 8003522:	605b      	str	r3, [r3, #4]
 8003524:	deff      	udf	#255	; 0xff
 8003526:	bf00      	nop
 8003528:	20000238 	.word	0x20000238

0800352c <__malloc_lock>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__malloc_lock+0x8>)
 800352e:	f000 b84b 	b.w	80035c8 <__retarget_lock_acquire_recursive>
 8003532:	bf00      	nop
 8003534:	2000037c 	.word	0x2000037c

08003538 <__malloc_unlock>:
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <__malloc_unlock+0x8>)
 800353a:	f000 b846 	b.w	80035ca <__retarget_lock_release_recursive>
 800353e:	bf00      	nop
 8003540:	2000037c 	.word	0x2000037c

08003544 <memset>:
 8003544:	4603      	mov	r3, r0
 8003546:	4402      	add	r2, r0
 8003548:	4293      	cmp	r3, r2
 800354a:	d100      	bne.n	800354e <memset+0xa>
 800354c:	4770      	bx	lr
 800354e:	f803 1b01 	strb.w	r1, [r3], #1
 8003552:	e7f9      	b.n	8003548 <memset+0x4>

08003554 <_sbrk_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	2300      	movs	r3, #0
 8003558:	4d05      	ldr	r5, [pc, #20]	; (8003570 <_sbrk_r+0x1c>)
 800355a:	4604      	mov	r4, r0
 800355c:	4608      	mov	r0, r1
 800355e:	602b      	str	r3, [r5, #0]
 8003560:	f7fd ffb4 	bl	80014cc <_sbrk>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d102      	bne.n	800356e <_sbrk_r+0x1a>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b103      	cbz	r3, 800356e <_sbrk_r+0x1a>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	20000378 	.word	0x20000378

08003574 <__errno>:
 8003574:	4b01      	ldr	r3, [pc, #4]	; (800357c <__errno+0x8>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000070 	.word	0x20000070

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	2600      	movs	r6, #0
 8003584:	4d0c      	ldr	r5, [pc, #48]	; (80035b8 <__libc_init_array+0x38>)
 8003586:	4c0d      	ldr	r4, [pc, #52]	; (80035bc <__libc_init_array+0x3c>)
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	f000 f81c 	bl	80035cc <_init>
 8003594:	2600      	movs	r6, #0
 8003596:	4d0a      	ldr	r5, [pc, #40]	; (80035c0 <__libc_init_array+0x40>)
 8003598:	4c0a      	ldr	r4, [pc, #40]	; (80035c4 <__libc_init_array+0x44>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	08003610 	.word	0x08003610
 80035bc:	08003610 	.word	0x08003610
 80035c0:	08003610 	.word	0x08003610
 80035c4:	08003614 	.word	0x08003614

080035c8 <__retarget_lock_acquire_recursive>:
 80035c8:	4770      	bx	lr

080035ca <__retarget_lock_release_recursive>:
 80035ca:	4770      	bx	lr

080035cc <_init>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr

080035d8 <_fini>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr
