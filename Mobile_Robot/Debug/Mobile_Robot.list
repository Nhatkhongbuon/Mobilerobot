
Mobile_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006590  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080066a0  080066a0  000166a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d0  080068d0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080068d0  080068d0  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068d0  080068d0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080068d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200000f0  080069c8  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  080069c8  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008924  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017ee  00000000  00000000  00028a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e6  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177cd  00000000  00000000  0002b496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c18e  00000000  00000000  00042c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088374  00000000  00000000  0004edf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033c0  00000000  00000000  000d7168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000da528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006688 	.word	0x08006688

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08006688 	.word	0x08006688

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <pulse_modulation>:
	matrix v;

	double voltage_left = 0;
	double voltage_right = 0;

	void pulse_modulation() {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 500);
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <pulse_modulation+0x20>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a84:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 640);
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <pulse_modulation+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	2000019c 	.word	0x2000019c

08000a9c <convert_v_to_pwm>:


	void convert_v_to_pwm() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

	}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aac:	b08f      	sub	sp, #60	; 0x3c
 8000aae:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	allocate_matrix(&K_4, 2, 2);
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	48aa      	ldr	r0, [pc, #680]	; (8000d60 <main+0x2b8>)
 8000ab6:	f001 fc65 	bl	8002384 <allocate_matrix>
	K_4.index[0][0] = k_4;
 8000aba:	4ba9      	ldr	r3, [pc, #676]	; (8000d60 <main+0x2b8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	4ba8      	ldr	r3, [pc, #672]	; (8000d64 <main+0x2bc>)
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	e9c1 2300 	strd	r2, r3, [r1]
	K_4.index[1][1] = k_4;
 8000aca:	4ba5      	ldr	r3, [pc, #660]	; (8000d60 <main+0x2b8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f103 0108 	add.w	r1, r3, #8
 8000ad6:	4ba3      	ldr	r3, [pc, #652]	; (8000d64 <main+0x2bc>)
 8000ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000adc:	e9c1 2300 	strd	r2, r3, [r1]

	allocate_matrix(&K, 3, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	48a0      	ldr	r0, [pc, #640]	; (8000d68 <main+0x2c0>)
 8000ae6:	f001 fc4d 	bl	8002384 <allocate_matrix>
	K.index[0][0] = 1; //K1
 8000aea:	4b9f      	ldr	r3, [pc, #636]	; (8000d68 <main+0x2c0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6819      	ldr	r1, [r3, #0]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	4b9d      	ldr	r3, [pc, #628]	; (8000d6c <main+0x2c4>)
 8000af6:	e9c1 2300 	strd	r2, r3, [r1]
	K.index[1][0] = 1; //K2
 8000afa:	4b9b      	ldr	r3, [pc, #620]	; (8000d68 <main+0x2c0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3304      	adds	r3, #4
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	4b99      	ldr	r3, [pc, #612]	; (8000d6c <main+0x2c4>)
 8000b08:	e9c1 2300 	strd	r2, r3, [r1]
	K.index[2][0] = 1; //K3
 8000b0c:	4b96      	ldr	r3, [pc, #600]	; (8000d68 <main+0x2c0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3308      	adds	r3, #8
 8000b12:	6819      	ldr	r1, [r3, #0]
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	4b94      	ldr	r3, [pc, #592]	; (8000d6c <main+0x2c4>)
 8000b1a:	e9c1 2300 	strd	r2, r3, [r1]

	allocate_matrix(&v, 2, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	4893      	ldr	r0, [pc, #588]	; (8000d70 <main+0x2c8>)
 8000b24:	f001 fc2e 	bl	8002384 <allocate_matrix>
	allocate_matrix(&u, 2, 1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4891      	ldr	r0, [pc, #580]	; (8000d74 <main+0x2cc>)
 8000b2e:	f001 fc29 	bl	8002384 <allocate_matrix>
	allocate_matrix(&tau, 2, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2102      	movs	r1, #2
 8000b36:	4890      	ldr	r0, [pc, #576]	; (8000d78 <main+0x2d0>)
 8000b38:	f001 fc24 	bl	8002384 <allocate_matrix>
	allocate_matrix(&v_c, 2, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	488e      	ldr	r0, [pc, #568]	; (8000d7c <main+0x2d4>)
 8000b42:	f001 fc1f 	bl	8002384 <allocate_matrix>
	allocate_matrix(&v_c_old, 2, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2102      	movs	r1, #2
 8000b4a:	488d      	ldr	r0, [pc, #564]	; (8000d80 <main+0x2d8>)
 8000b4c:	f001 fc1a 	bl	8002384 <allocate_matrix>
			/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f001 ffae 	bl	8002ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 fa2e 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fb9a 	bl	8001290 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b5c:	f000 fa6a 	bl	8001034 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b60:	f000 fac0 	bl	80010e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b64:	f000 fb12 	bl	800118c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Motor left
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000b68:	2108      	movs	r1, #8
 8000b6a:	4886      	ldr	r0, [pc, #536]	; (8000d84 <main+0x2dc>)
 8000b6c:	f002 ff08 	bl	8003980 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000b70:	2104      	movs	r1, #4
 8000b72:	4885      	ldr	r0, [pc, #532]	; (8000d88 <main+0x2e0>)
 8000b74:	f003 f848 	bl	8003c08 <HAL_TIM_Encoder_Start>
  // Motor right
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000b78:	210c      	movs	r1, #12
 8000b7a:	4882      	ldr	r0, [pc, #520]	; (8000d84 <main+0x2dc>)
 8000b7c:	f002 ff00 	bl	8003980 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000b80:	2104      	movs	r1, #4
 8000b82:	4882      	ldr	r0, [pc, #520]	; (8000d8c <main+0x2e4>)
 8000b84:	f003 f840 	bl	8003c08 <HAL_TIM_Encoder_Start>

  // setting rotation direction for motor
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	4880      	ldr	r0, [pc, #512]	; (8000d90 <main+0x2e8>)
 8000b8e:	f002 fa59 	bl	8003044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	487e      	ldr	r0, [pc, #504]	; (8000d90 <main+0x2e8>)
 8000b98:	f002 fa54 	bl	8003044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	487b      	ldr	r0, [pc, #492]	; (8000d90 <main+0x2e8>)
 8000ba2:	f002 fa4f 	bl	8003044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4879      	ldr	r0, [pc, #484]	; (8000d90 <main+0x2e8>)
 8000bac:	f002 fa4a 	bl	8003044 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  present_time = HAL_GetTick();
 8000bb0:	f001 ffd6 	bl	8002b60 <HAL_GetTick>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc0c 	bl	80003d4 <__aeabi_ui2d>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4974      	ldr	r1, [pc, #464]	; (8000d94 <main+0x2ec>)
 8000bc2:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
	  encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000bc6:	4b70      	ldr	r3, [pc, #448]	; (8000d88 <main+0x2e0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc01 	bl	80003d4 <__aeabi_ui2d>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	4970      	ldr	r1, [pc, #448]	; (8000d98 <main+0x2f0>)
 8000bd8:	e9c1 2300 	strd	r2, r3, [r1]
	  encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000bdc:	4b6b      	ldr	r3, [pc, #428]	; (8000d8c <main+0x2e4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fbf6 	bl	80003d4 <__aeabi_ui2d>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	496b      	ldr	r1, [pc, #428]	; (8000d9c <main+0x2f4>)
 8000bee:	e9c1 2300 	strd	r2, r3, [r1]



	  if(HAL_GetTick() - present_time > sample_time) {
 8000bf2:	f001 ffb5 	bl	8002b60 <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fbeb 	bl	80003d4 <__aeabi_ui2d>
 8000bfe:	4b65      	ldr	r3, [pc, #404]	; (8000d94 <main+0x2ec>)
 8000c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c04:	f7ff faa8 	bl	8000158 <__aeabi_dsub>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4b63      	ldr	r3, [pc, #396]	; (8000da0 <main+0x2f8>)
 8000c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c16:	f7ff fee7 	bl	80009e8 <__aeabi_dcmpgt>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 818e 	beq.w	8000f3e <main+0x496>
		  	if(encoder_cnt1 - encoder1_previous < 0) {
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <main+0x2f0>)
 8000c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c28:	4b5e      	ldr	r3, [pc, #376]	; (8000da4 <main+0x2fc>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	f7ff fa93 	bl	8000158 <__aeabi_dsub>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	f7ff feb3 	bl	80009ac <__aeabi_dcmplt>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d028      	beq.n	8000c9e <main+0x1f6>
		  		w_right = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000c4c:	4b52      	ldr	r3, [pc, #328]	; (8000d98 <main+0x2f0>)
 8000c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <main+0x2fc>)
 8000c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c58:	f7ff fa7e 	bl	8000158 <__aeabi_dsub>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	a33c      	add	r3, pc, #240	; (adr r3, 8000d58 <main+0x2b0>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fa77 	bl	800015c <__adddf3>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <main+0x300>)
 8000c7c:	f7ff fd4e 	bl	800071c <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <main+0x304>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fc1b 	bl	80004c8 <__aeabi_dmul>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4946      	ldr	r1, [pc, #280]	; (8000db0 <main+0x308>)
 8000c98:	e9c1 2300 	strd	r2, r3, [r1]
 8000c9c:	e01e      	b.n	8000cdc <main+0x234>
		  	}
		  	else {
		  		w_right = ((encoder_cnt1 - encoder1_previous) / 1320) * rate;
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <main+0x2f0>)
 8000ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <main+0x2fc>)
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	f7ff fa55 	bl	8000158 <__aeabi_dsub>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <main+0x300>)
 8000cbc:	f7ff fd2e 	bl	800071c <__aeabi_ddiv>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <main+0x304>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fbfb 	bl	80004c8 <__aeabi_dmul>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4936      	ldr	r1, [pc, #216]	; (8000db0 <main+0x308>)
 8000cd8:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	if(encoder_cnt2 - encoder2_previous < 0) {
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <main+0x2f4>)
 8000cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <main+0x30c>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fa36 	bl	8000158 <__aeabi_dsub>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f7ff fe56 	bl	80009ac <__aeabi_dcmplt>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d05a      	beq.n	8000dbc <main+0x314>
		  		w_left = ((encoder_cnt2 - encoder2_previous + 65535) / 1320) * rate;
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <main+0x2f4>)
 8000d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <main+0x30c>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	f7ff fa21 	bl	8000158 <__aeabi_dsub>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	a30e      	add	r3, pc, #56	; (adr r3, 8000d58 <main+0x2b0>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fa1a 	bl	800015c <__adddf3>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <main+0x300>)
 8000d36:	f7ff fcf1 	bl	800071c <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <main+0x304>)
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fbbe 	bl	80004c8 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4919      	ldr	r1, [pc, #100]	; (8000db8 <main+0x310>)
 8000d52:	e9c1 2300 	strd	r2, r3, [r1]
 8000d56:	e050      	b.n	8000dfa <main+0x352>
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	40efffe0 	.word	0x40efffe0
 8000d60:	20000250 	.word	0x20000250
 8000d64:	20000078 	.word	0x20000078
 8000d68:	20000258 	.word	0x20000258
 8000d6c:	3ff00000 	.word	0x3ff00000
 8000d70:	20000280 	.word	0x20000280
 8000d74:	20000260 	.word	0x20000260
 8000d78:	20000278 	.word	0x20000278
 8000d7c:	20000268 	.word	0x20000268
 8000d80:	20000270 	.word	0x20000270
 8000d84:	2000019c 	.word	0x2000019c
 8000d88:	2000010c 	.word	0x2000010c
 8000d8c:	20000154 	.word	0x20000154
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	20000218 	.word	0x20000218
 8000d98:	200001e8 	.word	0x200001e8
 8000d9c:	200001f0 	.word	0x200001f0
 8000da0:	20000000 	.word	0x20000000
 8000da4:	200001f8 	.word	0x200001f8
 8000da8:	4094a000 	.word	0x4094a000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000208 	.word	0x20000208
 8000db4:	20000200 	.word	0x20000200
 8000db8:	20000210 	.word	0x20000210
		  	}
		  	else {
		  		w_left = ((encoder_cnt2 - encoder2_previous) / 1320) * rate;
 8000dbc:	4b60      	ldr	r3, [pc, #384]	; (8000f40 <main+0x498>)
 8000dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc2:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <main+0x49c>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff f9c6 	bl	8000158 <__aeabi_dsub>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <main+0x4a0>)
 8000dda:	f7ff fc9f 	bl	800071c <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <main+0x4a4>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fb6c 	bl	80004c8 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4956      	ldr	r1, [pc, #344]	; (8000f50 <main+0x4a8>)
 8000df6:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

	  		encoder1_previous = encoder_cnt1;
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <main+0x4ac>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	4955      	ldr	r1, [pc, #340]	; (8000f58 <main+0x4b0>)
 8000e02:	e9c1 2300 	strd	r2, r3, [r1]
	  		encoder2_previous = encoder_cnt2;
 8000e06:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <main+0x498>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	494d      	ldr	r1, [pc, #308]	; (8000f44 <main+0x49c>)
 8000e0e:	e9c1 2300 	strd	r2, r3, [r1]


	  		velocity(&v, w_left, w_right);
 8000e12:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <main+0x4a8>)
 8000e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e18:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <main+0x4b4>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	484e      	ldr	r0, [pc, #312]	; (8000f60 <main+0x4b8>)
 8000e28:	f001 f9ea 	bl	8002200 <velocity>
	  		error(x, y, theta, x_r, y_r, theta_r, &e_x, &e_y, &e_theta);
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <main+0x4bc>)
 8000e2e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8000e32:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <main+0x4c0>)
 8000e34:	cb18      	ldmia	r3, {r3, r4}
 8000e36:	e9c7 3400 	strd	r3, r4, [r7]
 8000e3a:	4b4c      	ldr	r3, [pc, #304]	; (8000f6c <main+0x4c4>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	494b      	ldr	r1, [pc, #300]	; (8000f70 <main+0x4c8>)
 8000e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e46:	4c4b      	ldr	r4, [pc, #300]	; (8000f74 <main+0x4cc>)
 8000e48:	cc30      	ldmia	r4, {r4, r5}
 8000e4a:	4e4b      	ldr	r6, [pc, #300]	; (8000f78 <main+0x4d0>)
 8000e4c:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000e50:	4e4a      	ldr	r6, [pc, #296]	; (8000f7c <main+0x4d4>)
 8000e52:	960a      	str	r6, [sp, #40]	; 0x28
 8000e54:	4e4a      	ldr	r6, [pc, #296]	; (8000f80 <main+0x4d8>)
 8000e56:	9609      	str	r6, [sp, #36]	; 0x24
 8000e58:	4e4a      	ldr	r6, [pc, #296]	; (8000f84 <main+0x4dc>)
 8000e5a:	9608      	str	r6, [sp, #32]
 8000e5c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000e60:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000e68:	e9cd 2300 	strd	r2, r3, [sp]
 8000e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e70:	4650      	mov	r0, sl
 8000e72:	4659      	mov	r1, fp
 8000e74:	f000 fbd3 	bl	800161e <error>
	  		virtual_control(&v_c, &K, &v_c_old, e_x, e_y, e_theta, v_r, w_r);
 8000e78:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <main+0x4dc>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	4940      	ldr	r1, [pc, #256]	; (8000f80 <main+0x4d8>)
 8000e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e84:	4c3d      	ldr	r4, [pc, #244]	; (8000f7c <main+0x4d4>)
 8000e86:	cc30      	ldmia	r4, {r4, r5}
 8000e88:	4e3f      	ldr	r6, [pc, #252]	; (8000f88 <main+0x4e0>)
 8000e8a:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000e8e:	4e3f      	ldr	r6, [pc, #252]	; (8000f8c <main+0x4e4>)
 8000e90:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000e94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000e98:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000e9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000ea4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ea8:	4a39      	ldr	r2, [pc, #228]	; (8000f90 <main+0x4e8>)
 8000eaa:	493a      	ldr	r1, [pc, #232]	; (8000f94 <main+0x4ec>)
 8000eac:	483a      	ldr	r0, [pc, #232]	; (8000f98 <main+0x4f0>)
 8000eae:	f000 fc37 	bl	8001720 <virtual_control>
	  		control_signal(&u, &v_c, &v_c_old, &v, &K_4);
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <main+0x4f4>)
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <main+0x4b8>)
 8000eb8:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <main+0x4e8>)
 8000eba:	4937      	ldr	r1, [pc, #220]	; (8000f98 <main+0x4f0>)
 8000ebc:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <main+0x4f8>)
 8000ebe:	f000 fcbf 	bl	8001840 <control_signal>
	  		torque(theta, &v, &u, &tau);
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <main+0x4c4>)
 8000ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <main+0x4fc>)
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <main+0x4f8>)
 8000ece:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <main+0x4b8>)
 8000ed0:	f000 fe0c 	bl	8001aec <torque>
	  		voltage(&voltage_left, &voltage_right, w_left, w_right, &tau);
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <main+0x4a8>)
 8000ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <main+0x4b4>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	4c30      	ldr	r4, [pc, #192]	; (8000fa4 <main+0x4fc>)
 8000ee2:	9402      	str	r4, [sp, #8]
 8000ee4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	492e      	ldr	r1, [pc, #184]	; (8000fa8 <main+0x500>)
 8000eee:	482f      	ldr	r0, [pc, #188]	; (8000fac <main+0x504>)
 8000ef0:	f001 f9e6 	bl	80022c0 <voltage>
	  		next_state(&v, &x, &y, &theta, &x_r, &y_r, &theta_r, w_r, v_r);
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <main+0x4e4>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	4923      	ldr	r1, [pc, #140]	; (8000f88 <main+0x4e0>)
 8000efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <main+0x4d0>)
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <main+0x4cc>)
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <main+0x4c8>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <main+0x4c4>)
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <main+0x4c0>)
 8000f18:	4912      	ldr	r1, [pc, #72]	; (8000f64 <main+0x4bc>)
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <main+0x4b8>)
 8000f1c:	f000 fd08 	bl	8001930 <next_state>

	  		convert_v_to_pwm();
 8000f20:	f7ff fdbc 	bl	8000a9c <convert_v_to_pwm>
	  		pulse_modulation();
 8000f24:	f7ff fda8 	bl	8000a78 <pulse_modulation>
	  		present_time = HAL_GetTick();
 8000f28:	f001 fe1a 	bl	8002b60 <HAL_GetTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa50 	bl	80003d4 <__aeabi_ui2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	491d      	ldr	r1, [pc, #116]	; (8000fb0 <main+0x508>)
 8000f3a:	e9c1 2300 	strd	r2, r3, [r1]
	  encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000f3e:	e642      	b.n	8000bc6 <main+0x11e>
 8000f40:	200001f0 	.word	0x200001f0
 8000f44:	20000200 	.word	0x20000200
 8000f48:	4094a000 	.word	0x4094a000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000210 	.word	0x20000210
 8000f54:	200001e8 	.word	0x200001e8
 8000f58:	200001f8 	.word	0x200001f8
 8000f5c:	20000208 	.word	0x20000208
 8000f60:	20000280 	.word	0x20000280
 8000f64:	20000220 	.word	0x20000220
 8000f68:	20000228 	.word	0x20000228
 8000f6c:	20000060 	.word	0x20000060
 8000f70:	20000050 	.word	0x20000050
 8000f74:	20000058 	.word	0x20000058
 8000f78:	20000230 	.word	0x20000230
 8000f7c:	20000248 	.word	0x20000248
 8000f80:	20000240 	.word	0x20000240
 8000f84:	20000238 	.word	0x20000238
 8000f88:	20000068 	.word	0x20000068
 8000f8c:	20000070 	.word	0x20000070
 8000f90:	20000270 	.word	0x20000270
 8000f94:	20000258 	.word	0x20000258
 8000f98:	20000268 	.word	0x20000268
 8000f9c:	20000250 	.word	0x20000250
 8000fa0:	20000260 	.word	0x20000260
 8000fa4:	20000278 	.word	0x20000278
 8000fa8:	20000290 	.word	0x20000290
 8000fac:	20000288 	.word	0x20000288
 8000fb0:	20000218 	.word	0x20000218

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	; 0x40
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2228      	movs	r2, #40	; 0x28
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fc12 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f83d 	bl	8003074 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001000:	f000 f990 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	2302      	movs	r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f002 faab 	bl	8003578 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001028:	f000 f97c 	bl	8001324 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3740      	adds	r7, #64	; 0x40
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fbd2 	bl	80047ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_TIM1_Init+0xac>)
 8001054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_TIM1_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_TIM1_Init+0xa8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800107c:	2303      	movs	r3, #3
 800107e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001084:	2301      	movs	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001094:	2301      	movs	r3, #1
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <MX_TIM1_Init+0xa8>)
 80010a8:	f002 fd0c 	bl	8003ac4 <HAL_TIM_Encoder_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010b2:	f000 f937 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <MX_TIM1_Init+0xa8>)
 80010c4:	f003 fa5c 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010ce:	f000 f929 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3730      	adds	r7, #48	; 0x30
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000010c 	.word	0x2000010c
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2224      	movs	r2, #36	; 0x24
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fb7a 	bl	80047ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_TIM2_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM2_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001128:	2303      	movs	r3, #3
 800112a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001154:	f002 fcb6 	bl	8003ac4 <HAL_TIM_Encoder_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800115e:	f000 f8e1 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001170:	f003 fa06 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800117a:	f000 f8d3 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000154 	.word	0x20000154

0800118c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011be:	4a33      	ldr	r2, [pc, #204]	; (800128c <MX_TIM4_Init+0x100>)
 80011c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011c4:	2223      	movs	r2, #35	; 0x23
 80011c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <MX_TIM4_Init+0xfc>)
 80011e4:	f002 fb24 	bl	8003830 <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80011ee:	f000 f899 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4822      	ldr	r0, [pc, #136]	; (8001288 <MX_TIM4_Init+0xfc>)
 8001200:	f002 fe52 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800120a:	f000 f88b 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800120e:	481e      	ldr	r0, [pc, #120]	; (8001288 <MX_TIM4_Init+0xfc>)
 8001210:	f002 fb5d 	bl	80038ce <HAL_TIM_PWM_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800121a:	f000 f883 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4619      	mov	r1, r3
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_TIM4_Init+0xfc>)
 800122e:	f003 f9a7 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001238:	f000 f874 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123c:	2360      	movs	r3, #96	; 0x60
 800123e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2208      	movs	r2, #8
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM4_Init+0xfc>)
 8001254:	f002 fd66 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800125e:	f000 f861 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	220c      	movs	r2, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM4_Init+0xfc>)
 800126a:	f002 fd5b 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001274:	f000 f856 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM4_Init+0xfc>)
 800127a:	f000 f913 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	; 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000019c 	.word	0x2000019c
 800128c:	40000800 	.word	0x40000800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_GPIO_Init+0x8c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_GPIO_Init+0x8c>)
 80012aa:	f043 0320 	orr.w	r3, r3, #32
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_GPIO_Init+0x8c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0320 	and.w	r3, r3, #32
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_GPIO_Init+0x8c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <MX_GPIO_Init+0x8c>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_GPIO_Init+0x8c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_GPIO_Init+0x8c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <MX_GPIO_Init+0x8c>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_GPIO_Init+0x8c>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	21f0      	movs	r1, #240	; 0xf0
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <MX_GPIO_Init+0x90>)
 80012f2:	f001 fea7 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin;
 80012f6:	23f0      	movs	r3, #240	; 0xf0
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_GPIO_Init+0x90>)
 800130e:	f001 fd15 	bl	8002d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	40010c00 	.word	0x40010c00

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_MspInit+0x5c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6193      	str	r3, [r2, #24]
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_MspInit+0x5c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_MspInit+0x5c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_MspInit+0x5c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_MspInit+0x60>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_MspInit+0x60>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000

08001394 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <HAL_TIM_Encoder_MspInit+0xc8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d125      	bne.n	8001400 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 80013ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4619      	mov	r1, r3
 80013f8:	481a      	ldr	r0, [pc, #104]	; (8001464 <HAL_TIM_Encoder_MspInit+0xd0>)
 80013fa:	f001 fc9f 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fe:	e028      	b.n	8001452 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d123      	bne.n	8001452 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800143a:	2303      	movs	r3, #3
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_TIM_Encoder_MspInit+0xd0>)
 800144e:	f001 fc75 	bl	8002d3c <HAL_GPIO_Init>
}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40012c00 	.word	0x40012c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40010800 	.word	0x40010800

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_TIM_Base_MspInit+0x34>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10b      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_TIM_Base_MspInit+0x38>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_TIM_Base_MspInit+0x38>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_Base_MspInit+0x38>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40000800 	.word	0x40000800
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_TIM_MspPostInit+0x5c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d118      	bne.n	80014f6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_TIM_MspPostInit+0x60>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_TIM_MspPostInit+0x60>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_MspPostInit+0x60>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 80014dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_TIM_MspPostInit+0x64>)
 80014f2:	f001 fc23 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40000800 	.word	0x40000800
 8001504:	40021000 	.word	0x40021000
 8001508:	40010c00 	.word	0x40010c00

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f001 faf3 	bl	8002b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f003 f946 	bl	800481c <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20005000 	.word	0x20005000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	20000298 	.word	0x20000298
 80015c4:	200003e8 	.word	0x200003e8

080015c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d4:	f7ff fff8 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015f0:	4c09      	ldr	r4, [pc, #36]	; (8001618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f003 f913 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001602:	f7ff fa51 	bl	8000aa8 <main>
  bx lr
 8001606:	4770      	bx	lr
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001610:	080068d8 	.word	0x080068d8
  ldr r2, =_sbss
 8001614:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001618:	200003e8 	.word	0x200003e8

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>

0800161e <error>:
// Motor parameter
extern double k_phi;
extern double R_a;

void error(double x, double y, double theta, double x_r, double y_r, double theta_r, double *e_x, double *e_y, double *e_theta)
{
 800161e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800162a:	e9c7 2300 	strd	r2, r3, [r7]
    *e_x = cos(theta) * (x_r - x) + sin(theta) * (y_r - y);
 800162e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001632:	f003 f9cf 	bl	80049d4 <cos>
 8001636:	4680      	mov	r8, r0
 8001638:	4689      	mov	r9, r1
 800163a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800163e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001642:	f7fe fd89 	bl	8000158 <__aeabi_dsub>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4640      	mov	r0, r8
 800164c:	4649      	mov	r1, r9
 800164e:	f7fe ff3b 	bl	80004c8 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4692      	mov	sl, r2
 8001658:	469b      	mov	fp, r3
 800165a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800165e:	f003 f9ff 	bl	8004a60 <sin>
 8001662:	4680      	mov	r8, r0
 8001664:	4689      	mov	r9, r1
 8001666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800166a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800166e:	f7fe fd73 	bl	8000158 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4640      	mov	r0, r8
 8001678:	4649      	mov	r1, r9
 800167a:	f7fe ff25 	bl	80004c8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4650      	mov	r0, sl
 8001684:	4659      	mov	r1, fp
 8001686:	f7fe fd69 	bl	800015c <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001690:	e9c1 2300 	strd	r2, r3, [r1]
    *e_y = (-1) * sin(theta) * (x_r - x) + cos(theta) * (y_r - y);
 8001694:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001698:	f003 f9e2 	bl	8004a60 <sin>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4614      	mov	r4, r2
 80016a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80016ae:	f7fe fd53 	bl	8000158 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe ff05 	bl	80004c8 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4690      	mov	r8, r2
 80016c4:	4699      	mov	r9, r3
 80016c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016ca:	f003 f983 	bl	80049d4 <cos>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80016da:	f7fe fd3d 	bl	8000158 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe feef 	bl	80004c8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4640      	mov	r0, r8
 80016f0:	4649      	mov	r1, r9
 80016f2:	f7fe fd33 	bl	800015c <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016fc:	e9c1 2300 	strd	r2, r3, [r1]
    *e_theta = theta_r - theta;
 8001700:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001704:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001708:	f7fe fd26 	bl	8000158 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001712:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001720 <virtual_control>:

// Caculate virtural control signal
// Must allocate v_c matrix and K matrix in the main program
void virtual_control(matrix *v_c, matrix *K, matrix *v_c_old, double e_x, double e_y, double e_theta, double v_r, double w_r)
{
 8001720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
    // Store the previous value of v_c
    v_c_old->index[0][0] = v_c->index[0][0];
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	6811      	ldr	r1, [r2, #0]
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	e9c1 2300 	strd	r2, r3, [r1]
    v_c_old->index[1][0] = v_c->index[1][0];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3304      	adds	r3, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	3204      	adds	r2, #4
 8001750:	6811      	ldr	r1, [r2, #0]
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate new v_c
    v_c->index[0][0] = v_r * cos(e_theta) + K->index[0][0] * e_x;
 800175a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800175e:	f003 f939 	bl	80049d4 <cos>
 8001762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001766:	f7fe feaf 	bl	80004c8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4690      	mov	r8, r2
 8001770:	4699      	mov	r9, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001780:	f7fe fea2 	bl	80004c8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681c      	ldr	r4, [r3, #0]
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4640      	mov	r0, r8
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fcdf 	bl	800015c <__adddf3>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9c4 2300 	strd	r2, r3, [r4]
    v_c->index[1][0] = w_r + K->index[1][0] * v_r * e_y + K->index[2][0] * v_r * sin(e_theta);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017b6:	f7fe fe87 	bl	80004c8 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017c6:	f7fe fe7f 	bl	80004c8 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017d6:	f7fe fcc1 	bl	800015c <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4690      	mov	r8, r2
 80017e0:	4699      	mov	r9, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3308      	adds	r3, #8
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017f2:	f7fe fe69 	bl	80004c8 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4614      	mov	r4, r2
 80017fc:	461d      	mov	r5, r3
 80017fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001802:	f003 f92d 	bl	8004a60 <sin>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fe5b 	bl	80004c8 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3304      	adds	r3, #4
 8001820:	681c      	ldr	r4, [r3, #0]
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4640      	mov	r0, r8
 8001828:	4649      	mov	r1, r9
 800182a:	f7fe fc97 	bl	800015c <__adddf3>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001840 <control_signal>:

// Calculate the control signal u
// Must allocate u matrix in the main program
void control_signal(matrix *u, matrix *v_c, matrix *v_c_old, matrix *v, matrix *K_4)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]

    double x  = (v_c->index[0][0] - v_c_old->index[0][0]) / sampling_interval;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fc79 	bl	8000158 <__aeabi_dsub>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <control_signal+0xec>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe ff52 	bl	800071c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double y  = (v_c->index[1][0] - v_c_old->index[1][0]) / sampling_interval;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3304      	adds	r3, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3304      	adds	r3, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe fc5e 	bl	8000158 <__aeabi_dsub>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <control_signal+0xec>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe ff37 	bl	800071c <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    subtraction(v_c, v);
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f000 fe0d 	bl	80024d8 <subtraction>
    matrix C;
    allocate_matrix(&C,2,1);
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	2201      	movs	r2, #1
 80018c4:	2102      	movs	r1, #2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fd5c 	bl	8002384 <allocate_matrix>
    mutiplication(K_4, v_c, &C);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	461a      	mov	r2, r3
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d6:	f000 fe91 	bl	80025fc <mutiplication>
    u->index[0][0] = x + C.index[0][0];
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681c      	ldr	r4, [r3, #0]
 80018e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ec:	f7fe fc36 	bl	800015c <__adddf3>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9c4 2300 	strd	r2, r3, [r4]
    u->index[1][0] = y + C.index[1][0];
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3304      	adds	r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3304      	adds	r3, #4
 8001908:	681c      	ldr	r4, [r3, #0]
 800190a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190e:	f7fe fc25 	bl	800015c <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c4 2300 	strd	r2, r3, [r4]
    
    deallocate_matrix(&C);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fd65 	bl	80023ee <deallocate_matrix>
}
 8001924:	bf00      	nop
 8001926:	372c      	adds	r7, #44	; 0x2c
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	20000010 	.word	0x20000010

08001930 <next_state>:

// Calculate future coordinates of the robot
// Call after applying voltages to motors
void next_state(matrix *v, double *x, double *y, double *theta, double *x_r, double *y_r, double *theta_r, double w_r, double v_r)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b090      	sub	sp, #64	; 0x40
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
    double derivative_x = cos(*theta) * v->index[0][0];
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f003 f844 	bl	80049d4 <cos>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fdb7 	bl	80004c8 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double derivative_y = sin(*theta) * v->index[0][0];
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f003 f878 	bl	8004a60 <sin>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fda5 	bl	80004c8 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double derivative_theta = v->index[1][0];
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3304      	adds	r3, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Calculate future coordinates
    *x = *x + sampling_interval * derivative_x;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	e9d3 4500 	ldrd	r4, r5, [r3]
 800199c:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <next_state+0x1b8>)
 800199e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019a6:	f7fe fd8f 	bl	80004c8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fbd3 	bl	800015c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	e9c1 2300 	strd	r2, r3, [r1]
    *y = *y + sampling_interval * derivative_y;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <next_state+0x1b8>)
 80019c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019d0:	f7fe fd7a 	bl	80004c8 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fbbe 	bl	800015c <__adddf3>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	e9c1 2300 	strd	r2, r3, [r1]
    *theta = *theta + sampling_interval * derivative_theta;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019f0:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <next_state+0x1b8>)
 80019f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019fa:	f7fe fd65 	bl	80004c8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fba9 	bl	800015c <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_x_r = cos(*theta_r) * v_r;
 8001a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f002 ffd9 	bl	80049d4 <cos>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a2a:	f7fe fd4d 	bl	80004c8 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double derivative_y_r = sin(*theta_r) * v_r;
 8001a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f003 f80e 	bl	8004a60 <sin>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a4c:	f7fe fd3c 	bl	80004c8 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double derivative_theta_r = w_r;
 8001a58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Calculate future reference coordinates
    *x_r = *x_r + sampling_interval * derivative_x_r;
 8001a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <next_state+0x1b8>)
 8001a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a70:	f7fe fd2a 	bl	80004c8 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fb6e 	bl	800015c <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a86:	e9c1 2300 	strd	r2, r3, [r1]
    *y_r = *y_r + sampling_interval * derivative_y_r;
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <next_state+0x1b8>)
 8001a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a9a:	f7fe fd15 	bl	80004c8 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fb59 	bl	800015c <__adddf3>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ab0:	e9c1 2300 	strd	r2, r3, [r1]
    *theta_r = *theta_r + sampling_interval * derivative_theta_r;
 8001ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ab6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <next_state+0x1b8>)
 8001abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ac4:	f7fe fd00 	bl	80004c8 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fb44 	bl	800015c <__adddf3>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ada:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ade:	bf00      	nop
 8001ae0:	3740      	adds	r7, #64	; 0x40
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000010 	.word	0x20000010

08001aec <torque>:

// Calculate torque signal
// Must allocate tau matrix in the main program
void torque(double theta, matrix *v, matrix *u, matrix *tau)
{
 8001aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af0:	b0b1      	sub	sp, #196	; 0xc4
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001af8:	627a      	str	r2, [r7, #36]	; 0x24
 8001afa:	623b      	str	r3, [r7, #32]
    double derivative_theta = v->index[1][0];
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3304      	adds	r3, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

    matrix M;
    allocate_matrix(&M,3,3);
 8001b0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b10:	2203      	movs	r2, #3
 8001b12:	2103      	movs	r1, #3
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fc35 	bl	8002384 <allocate_matrix>
   
    M.index[0][0] = M.index[1][1] = m;
 8001b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f103 0008 	add.w	r0, r3, #8
 8001b26:	4bbb      	ldr	r3, [pc, #748]	; (8001e14 <torque+0x328>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	e9c0 2300 	strd	r2, r3, [r0]
 8001b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	e9d0 2300 	ldrd	r2, r3, [r0]
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
    M.index[0][2] = M.index[2][0] = m * d * sin(theta);
 8001b3e:	4bb5      	ldr	r3, [pc, #724]	; (8001e14 <torque+0x328>)
 8001b40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b44:	4bb4      	ldr	r3, [pc, #720]	; (8001e18 <torque+0x32c>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fcbd 	bl	80004c8 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4690      	mov	r8, r2
 8001b54:	4699      	mov	r9, r3
 8001b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b5a:	f002 ff81 	bl	8004a60 <sin>
 8001b5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b62:	3308      	adds	r3, #8
 8001b64:	681c      	ldr	r4, [r3, #0]
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	f7fe fcab 	bl	80004c8 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c4 2300 	strd	r2, r3, [r4]
 8001b7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f103 0110 	add.w	r1, r3, #16
 8001b84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
    M.index[1][2] = M.index[2][1] = -m * d * cos(theta);
 8001b8c:	4ba1      	ldr	r3, [pc, #644]	; (8001e14 <torque+0x328>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	4692      	mov	sl, r2
 8001b94:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001b98:	4b9f      	ldr	r3, [pc, #636]	; (8001e18 <torque+0x32c>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	4650      	mov	r0, sl
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	f7fe fc91 	bl	80004c8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bb2:	f002 ff0f 	bl	80049d4 <cos>
 8001bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bba:	3308      	adds	r3, #8
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f103 0408 	add.w	r4, r3, #8
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	4649      	mov	r1, r9
 8001bca:	f7fe fc7d 	bl	80004c8 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9c4 2300 	strd	r2, r3, [r4]
 8001bd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bda:	3304      	adds	r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f103 0110 	add.w	r1, r3, #16
 8001be2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
    M.index[2][2] = I;
 8001bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bee:	3308      	adds	r3, #8
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f103 0110 	add.w	r1, r3, #16
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <torque+0x330>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]

    matrix S;
    allocate_matrix(&S,3,2);
 8001c00:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c04:	2202      	movs	r2, #2
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fbbb 	bl	8002384 <allocate_matrix>
    S.index[0][0] = cos(theta);
 8001c0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c12:	681c      	ldr	r4, [r3, #0]
 8001c14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c18:	f002 fedc 	bl	80049d4 <cos>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	e9c4 2300 	strd	r2, r3, [r4]
    S.index[0][1] = -d * sin(theta);
 8001c24:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <torque+0x32c>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	4615      	mov	r5, r2
 8001c2c:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8001c30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c34:	f002 ff14 	bl	8004a60 <sin>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001c40:	6809      	ldr	r1, [r1, #0]
 8001c42:	f101 0408 	add.w	r4, r1, #8
 8001c46:	4628      	mov	r0, r5
 8001c48:	4631      	mov	r1, r6
 8001c4a:	f7fe fc3d 	bl	80004c8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c4 2300 	strd	r2, r3, [r4]
    S.index[1][0] = sin(theta);
 8001c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c62:	f002 fefd 	bl	8004a60 <sin>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c4 2300 	strd	r2, r3, [r4]
    S.index[1][1] = d*cos(theta);
 8001c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c72:	f002 feaf 	bl	80049d4 <cos>
 8001c76:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <torque+0x32c>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8001c80:	3404      	adds	r4, #4
 8001c82:	6824      	ldr	r4, [r4, #0]
 8001c84:	3408      	adds	r4, #8
 8001c86:	f7fe fc1f 	bl	80004c8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c4 2300 	strd	r2, r3, [r4]
    S.index[2][1] = 1;
 8001c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c96:	3308      	adds	r3, #8
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f103 0108 	add.w	r1, r3, #8
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <torque+0x334>)
 8001ca4:	e9c1 2300 	strd	r2, r3, [r1]

    matrix V;
    allocate_matrix(&V,3,3);
 8001ca8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cac:	2203      	movs	r2, #3
 8001cae:	2103      	movs	r1, #3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fb67 	bl	8002384 <allocate_matrix>
    V.index[0][1] = m * d * pow(derivative_theta,2) * cos(theta);
 8001cb6:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <torque+0x328>)
 8001cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <torque+0x32c>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fc01 	bl	80004c8 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4614      	mov	r4, r2
 8001ccc:	461d      	mov	r5, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001cda:	f002 fe13 	bl	8004904 <pow>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fbef 	bl	80004c8 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4690      	mov	r8, r2
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cf6:	f002 fe6d 	bl	80049d4 <cos>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001d02:	6809      	ldr	r1, [r1, #0]
 8001d04:	f101 0408 	add.w	r4, r1, #8
 8001d08:	4640      	mov	r0, r8
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	f7fe fbdc 	bl	80004c8 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	e9c4 2300 	strd	r2, r3, [r4]
    V.index[1][1] = m * d * pow(derivative_theta,2) * sin(theta);
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <torque+0x328>)
 8001d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <torque+0x32c>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fbd0 	bl	80004c8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d38:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d3c:	f002 fde2 	bl	8004904 <pow>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fbbe 	bl	80004c8 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4690      	mov	r8, r2
 8001d52:	4699      	mov	r9, r3
 8001d54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d58:	f002 fe82 	bl	8004a60 <sin>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001d64:	3104      	adds	r1, #4
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	f101 0408 	add.w	r4, r1, #8
 8001d6c:	4640      	mov	r0, r8
 8001d6e:	4649      	mov	r1, r9
 8001d70:	f7fe fbaa 	bl	80004c8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9c4 2300 	strd	r2, r3, [r4]

    matrix derivative_S;
    allocate_matrix(&derivative_S,3,2);
 8001d7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d80:	2202      	movs	r2, #2
 8001d82:	2103      	movs	r1, #3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fafd 	bl	8002384 <allocate_matrix>
    derivative_S.index[0][0] = - sin(theta) * derivative_theta;
 8001d8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d8e:	f002 fe67 	bl	8004a60 <sin>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	61ba      	str	r2, [r7, #24]
 8001d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001da2:	681c      	ldr	r4, [r3, #0]
 8001da4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dac:	f7fe fb8c 	bl	80004c8 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	e9c4 2300 	strd	r2, r3, [r4]
    derivative_S.index[0][1] = -d * cos(theta) * derivative_theta;
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <torque+0x32c>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	613a      	str	r2, [r7, #16]
 8001dc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dca:	f002 fe03 	bl	80049d4 <cos>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dd6:	f7fe fb77 	bl	80004c8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f103 0408 	add.w	r4, r3, #8
 8001dec:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001df0:	f7fe fb6a 	bl	80004c8 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	e9c4 2300 	strd	r2, r3, [r4]
    derivative_S.index[1][0] = cos(theta) * derivative_theta;
 8001dfc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e00:	f002 fde8 	bl	80049d4 <cos>
 8001e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e08:	3304      	adds	r3, #4
 8001e0a:	681c      	ldr	r4, [r3, #0]
 8001e0c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001e10:	e008      	b.n	8001e24 <torque+0x338>
 8001e12:	bf00      	nop
 8001e14:	20000030 	.word	0x20000030
 8001e18:	20000018 	.word	0x20000018
 8001e1c:	20000038 	.word	0x20000038
 8001e20:	3ff00000 	.word	0x3ff00000
 8001e24:	f7fe fb50 	bl	80004c8 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	e9c4 2300 	strd	r2, r3, [r4]
    derivative_S.index[1][1] = -d * sin(theta) * derivative_theta;
 8001e30:	4bdb      	ldr	r3, [pc, #876]	; (80021a0 <torque+0x6b4>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e42:	f002 fe0d 	bl	8004a60 <sin>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e4e:	f7fe fb3b 	bl	80004c8 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f103 0408 	add.w	r4, r3, #8
 8001e66:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001e6a:	f7fe fb2d 	bl	80004c8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c4 2300 	strd	r2, r3, [r4]

    matrix B;
    allocate_matrix(&B,3,2);
 8001e76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fa80 	bl	8002384 <allocate_matrix>
    B.index[0][0] = B.index[0][1] = (double) 1/r * cos(theta);
 8001e84:	4bc7      	ldr	r3, [pc, #796]	; (80021a4 <torque+0x6b8>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f04f 0000 	mov.w	r0, #0
 8001e8e:	49c6      	ldr	r1, [pc, #792]	; (80021a8 <torque+0x6bc>)
 8001e90:	f7fe fc44 	bl	800071c <__aeabi_ddiv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4690      	mov	r8, r2
 8001e9a:	4699      	mov	r9, r3
 8001e9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ea0:	f002 fd98 	bl	80049d4 <cos>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001eac:	6809      	ldr	r1, [r1, #0]
 8001eae:	f101 0408 	add.w	r4, r1, #8
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	f7fe fb07 	bl	80004c8 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	e9c4 2300 	strd	r2, r3, [r4]
 8001ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]
    B.index[1][0] = B.index[1][1] =  (double) 1/r * sin(theta);
 8001ed0:	4bb4      	ldr	r3, [pc, #720]	; (80021a4 <torque+0x6b8>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f04f 0000 	mov.w	r0, #0
 8001eda:	49b3      	ldr	r1, [pc, #716]	; (80021a8 <torque+0x6bc>)
 8001edc:	f7fe fc1e 	bl	800071c <__aeabi_ddiv>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001eec:	f002 fdb8 	bl	8004a60 <sin>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ef8:	3104      	adds	r1, #4
 8001efa:	6809      	ldr	r1, [r1, #0]
 8001efc:	f101 0408 	add.w	r4, r1, #8
 8001f00:	4640      	mov	r0, r8
 8001f02:	4649      	mov	r1, r9
 8001f04:	f7fe fae0 	bl	80004c8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	e9c4 2300 	strd	r2, r3, [r4]
 8001f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f14:	3304      	adds	r3, #4
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001f1c:	e9c1 2300 	strd	r2, r3, [r1]
    B.index[2][0] = (double) 1/r * R;
 8001f20:	4ba0      	ldr	r3, [pc, #640]	; (80021a4 <torque+0x6b8>)
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f04f 0000 	mov.w	r0, #0
 8001f2a:	499f      	ldr	r1, [pc, #636]	; (80021a8 <torque+0x6bc>)
 8001f2c:	f7fe fbf6 	bl	800071c <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4690      	mov	r8, r2
 8001f36:	4699      	mov	r9, r3
 8001f38:	4b9c      	ldr	r3, [pc, #624]	; (80021ac <torque+0x6c0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f42:	3108      	adds	r1, #8
 8001f44:	680c      	ldr	r4, [r1, #0]
 8001f46:	4640      	mov	r0, r8
 8001f48:	4649      	mov	r1, r9
 8001f4a:	f7fe fabd 	bl	80004c8 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c4 2300 	strd	r2, r3, [r4]
    B.index[2][1] = (double) 1/r * (-R);
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <torque+0x6b8>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	4991      	ldr	r1, [pc, #580]	; (80021a8 <torque+0x6bc>)
 8001f62:	f7fe fbdb 	bl	800071c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <torque+0x6c0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f80:	3308      	adds	r3, #8
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f103 0408 	add.w	r4, r3, #8
 8001f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8c:	f7fe fa9c 	bl	80004c8 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c4 2300 	strd	r2, r3, [r4]

    matrix S_t;
    allocate_matrix(&S_t,2,3);
 8001f98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f9ef 	bl	8002384 <allocate_matrix>
    transpose(&S,&S_t);
 8001fa6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001faa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fb9a 	bl	80026ea <transpose>

    matrix S_t_B;
    allocate_matrix(&S_t_B,2,2);
 8001fb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f9e0 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t,&B,&S_t_B);
 8001fc4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001fc8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001fcc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fb13 	bl	80025fc <mutiplication>
    

// done matrix B
    deallocate_matrix(&B);
 8001fd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fa07 	bl	80023ee <deallocate_matrix>

    matrix S_t_B_inv;
    allocate_matrix(&S_t_B_inv,2,2);
 8001fe0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f9cb 	bl	8002384 <allocate_matrix>
    inverse(&S_t_B,&S_t_B_inv);
 8001fee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001ff2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fd37 	bl	8002a6c <inverse>

// done matrix S_t_B
    deallocate_matrix(&S_t_B);
 8001ffe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f9f3 	bl	80023ee <deallocate_matrix>

    matrix S_t_M;
    allocate_matrix(&S_t_M,2,3);
 8002008:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800200c:	2203      	movs	r2, #3
 800200e:	2102      	movs	r1, #2
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f9b7 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t,&M,&S_t_M);
 8002016:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800201a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800201e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002022:	4618      	mov	r0, r3
 8002024:	f000 faea 	bl	80025fc <mutiplication>

    matrix S_t_M_S;
    allocate_matrix(&S_t_M_S,2,2);
 8002028:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800202c:	2202      	movs	r2, #2
 800202e:	2102      	movs	r1, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f9a7 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t_M, &S, &S_t_M_S);
 8002036:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800203a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800203e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fada 	bl	80025fc <mutiplication>

// done matrix S_t_M
    deallocate_matrix(&S_t_M);
 8002048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f9ce 	bl	80023ee <deallocate_matrix>

    matrix tu_1;
    allocate_matrix(&tu_1,2,1);
 8002052:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002056:	2201      	movs	r2, #1
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f992 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t_M_S, u,&tu_1);
 8002060:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002064:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fac6 	bl	80025fc <mutiplication>

//done matrix S_t_M_S
    deallocate_matrix(&S_t_M_S);
 8002070:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f9ba 	bl	80023ee <deallocate_matrix>

    matrix torque_1;
    allocate_matrix(&torque_1,2,1);
 800207a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800207e:	2201      	movs	r2, #1
 8002080:	2102      	movs	r1, #2
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f97e 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t_B_inv, &tu_1, &torque_1);
 8002088:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800208c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002090:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fab1 	bl	80025fc <mutiplication>

// done matrix S_t_B_inv, tu_1;
    deallocate_matrix(&S_t_B_inv);
 800209a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f9a5 	bl	80023ee <deallocate_matrix>
    deallocate_matrix(&tu_1);
 80020a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f9a0 	bl	80023ee <deallocate_matrix>

    matrix M_deri_S;
    allocate_matrix(&M_deri_S,3,2);
 80020ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020b2:	2202      	movs	r2, #2
 80020b4:	2103      	movs	r1, #3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f964 	bl	8002384 <allocate_matrix>
    mutiplication(&M,&derivative_S,&M_deri_S);
 80020bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80020c0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80020c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa97 	bl	80025fc <mutiplication>

// done matrix derivative_S
    deallocate_matrix(&derivative_S);
 80020ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f98b 	bl	80023ee <deallocate_matrix>

// done matrix M
    deallocate_matrix(&M);
 80020d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f986 	bl	80023ee <deallocate_matrix>

    matrix V_S;
    allocate_matrix(&V_S,3,2);
 80020e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e6:	2202      	movs	r2, #2
 80020e8:	2103      	movs	r1, #3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f94a 	bl	8002384 <allocate_matrix>
    mutiplication(&V,&S,&V_S);
 80020f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020f4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80020f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa7d 	bl	80025fc <mutiplication>

// done matrix V
    deallocate_matrix(&V);
 8002102:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f971 	bl	80023ee <deallocate_matrix>

    addition(&M_deri_S, &V_S);
 800210c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002110:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f98b 	bl	8002432 <addition>

// done matrix V_S
    deallocate_matrix(&V_S);
 800211c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f964 	bl	80023ee <deallocate_matrix>

    matrix S_t_M_deri_S;
    allocate_matrix(&S_t_M_deri_S,2,2);
 8002126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800212a:	2202      	movs	r2, #2
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f928 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t, &M_deri_S, &S_t_M_deri_S);
 8002134:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002138:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800213c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fa5b 	bl	80025fc <mutiplication>

//done matrix S_t, M_deri_S
    deallocate_matrix(&S_t);
 8002146:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f94f 	bl	80023ee <deallocate_matrix>
    deallocate_matrix(&M_deri_S);
 8002150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f94a 	bl	80023ee <deallocate_matrix>

    matrix tu_2;
    allocate_matrix(&tu_2,2,1);
 800215a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800215e:	2201      	movs	r2, #1
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f90e 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t_M_deri_S, v, &tu_2);
 8002168:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800216c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fa42 	bl	80025fc <mutiplication>

// done matrix S_t_M_deri_S
    deallocate_matrix(&S_t_M_deri_S);
 8002178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f936 	bl	80023ee <deallocate_matrix>

    matrix torque_2;
    allocate_matrix(&torque_2,2,1);
 8002182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002186:	2201      	movs	r2, #1
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f8fa 	bl	8002384 <allocate_matrix>
    mutiplication(&S_t_B_inv, &tu_2, &torque_2);
 8002190:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002194:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002198:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800219c:	4618      	mov	r0, r3
 800219e:	e007      	b.n	80021b0 <torque+0x6c4>
 80021a0:	20000018 	.word	0x20000018
 80021a4:	20000020 	.word	0x20000020
 80021a8:	3ff00000 	.word	0x3ff00000
 80021ac:	20000028 	.word	0x20000028
 80021b0:	f000 fa24 	bl	80025fc <mutiplication>

// done matrix tu_2, S_t_B_inv
    deallocate_matrix(&tu_2);
 80021b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f918 	bl	80023ee <deallocate_matrix>
    deallocate_matrix(&S_t_B_inv);
 80021be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f913 	bl	80023ee <deallocate_matrix>

    addition(&torque_1, &torque_2);
 80021c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f92d 	bl	8002432 <addition>

    deallocate_matrix(&torque_2);
 80021d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f906 	bl	80023ee <deallocate_matrix>

    *tau = torque_1;
 80021e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021e6:	461a      	mov	r2, r3
 80021e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021f0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80021f4:	bf00      	nop
 80021f6:	37c4      	adds	r7, #196	; 0xc4
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fe:	bf00      	nop

08002200 <velocity>:

// Calculate the linear velocity and angular velocity of the vehicle
void velocity(matrix *v, double left_angular_velocity, double right_angular_velocity)
{
 8002200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	e9c7 2300 	strd	r2, r3, [r7]
    v->index[0][0] = r / 2 * (left_angular_velocity + right_angular_velocity);
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <velocity+0xb8>)
 8002210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221c:	f7fe fa7e 	bl	800071c <__aeabi_ddiv>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4690      	mov	r8, r2
 8002226:	4699      	mov	r9, r3
 8002228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800222c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002230:	f7fd ff94 	bl	800015c <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681c      	ldr	r4, [r3, #0]
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4640      	mov	r0, r8
 8002248:	4649      	mov	r1, r9
 800224a:	f7fe f93d 	bl	80004c8 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e9c4 2300 	strd	r2, r3, [r4]
    v->index[1][0] = r / (2 * R) * (right_angular_velocity + left_angular_velocity);
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <velocity+0xb8>)
 8002258:	e9d3 4500 	ldrd	r4, r5, [r3]
 800225c:	4b17      	ldr	r3, [pc, #92]	; (80022bc <velocity+0xbc>)
 800225e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	f7fd ff79 	bl	800015c <__adddf3>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4620      	mov	r0, r4
 8002270:	4629      	mov	r1, r5
 8002272:	f7fe fa53 	bl	800071c <__aeabi_ddiv>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4690      	mov	r8, r2
 800227c:	4699      	mov	r9, r3
 800227e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002286:	f7fd ff69 	bl	800015c <__adddf3>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3304      	adds	r3, #4
 8002298:	681c      	ldr	r4, [r3, #0]
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4640      	mov	r0, r8
 80022a0:	4649      	mov	r1, r9
 80022a2:	f7fe f911 	bl	80004c8 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c4 2300 	strd	r2, r3, [r4]
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022b8:	20000020 	.word	0x20000020
 80022bc:	20000028 	.word	0x20000028

080022c0 <voltage>:

// Calculate voltage for the motor
void voltage(double *voltage_left, double *voltage_right, double left_angular_velocity, double right_angular_velocity, matrix *tau)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	e9c7 2300 	strd	r2, r3, [r7]
    *voltage_left = k_phi * left_angular_velocity + R_a * tau->index[0][0] / k_phi;
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <voltage+0xbc>)
 80022d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d8:	f7fe f8f6 	bl	80004c8 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4614      	mov	r4, r2
 80022e2:	461d      	mov	r5, r3
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <voltage+0xc0>)
 80022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f4:	f7fe f8e8 	bl	80004c8 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <voltage+0xbc>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe fa09 	bl	800071c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ff23 	bl	800015c <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
    *voltage_right = k_phi * right_angular_velocity + R_a * tau->index[1][0] / k_phi;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <voltage+0xbc>)
 8002322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800232a:	f7fe f8cd 	bl	80004c8 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3304      	adds	r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <voltage+0xc0>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f8be 	bl	80004c8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <voltage+0xbc>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe f9df 	bl	800071c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fd fef9 	bl	800015c <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bdb0      	pop	{r4, r5, r7, pc}
 800237c:	20000040 	.word	0x20000040
 8002380:	20000048 	.word	0x20000048

08002384 <allocate_matrix>:
#include "matrices_op2.h"

//Allocate memmory space and matrix A
void allocate_matrix(matrix *A, unsigned_int8 num_rows, unsigned_int8 num_columns)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	70bb      	strb	r3, [r7, #2]
    A->index = (double **) malloc(sizeof(double *) * num_rows);
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4618      	mov	r0, r3
 800239a:	f002 f96b 	bl	8004674 <malloc>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	601a      	str	r2, [r3, #0]
    A->num_columns = num_columns;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	78ba      	ldrb	r2, [r7, #2]
 80023aa:	711a      	strb	r2, [r3, #4]
    A->num_rows = num_rows;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	715a      	strb	r2, [r3, #5]

    for (int i = 0; i < A->num_rows; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e00f      	b.n	80023d8 <allocate_matrix+0x54>
        A->index[i] = (double *) calloc(sizeof(double), A->num_columns);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	4619      	mov	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	18d4      	adds	r4, r2, r3
 80023c8:	2008      	movs	r0, #8
 80023ca:	f002 f937 	bl	800463c <calloc>
 80023ce:	4603      	mov	r3, r0
 80023d0:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < A->num_rows; i++)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	795b      	ldrb	r3, [r3, #5]
 80023dc:	461a      	mov	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	dbe9      	blt.n	80023b8 <allocate_matrix+0x34>
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}

080023ee <deallocate_matrix>:

//Deallocate memory space for matrix A
void deallocate_matrix(matrix *A)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < A->num_rows; i++){
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e00b      	b.n	8002414 <deallocate_matrix+0x26>
        free(A->index[i]);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 f93b 	bl	8004684 <free>
    for (int i = 0; i < A->num_rows; i++){
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	795b      	ldrb	r3, [r3, #5]
 8002418:	461a      	mov	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4293      	cmp	r3, r2
 800241e:	dbed      	blt.n	80023fc <deallocate_matrix+0xe>
    }
    free(A->index);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 f92d 	bl	8004684 <free>
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <addition>:
}

//Calculate addtion of matrix A and B
//Answer is directly assigned to A
void addition(matrix *A, matrix *B)
{
 8002432:	b5b0      	push	{r4, r5, r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	795a      	ldrb	r2, [r3, #5]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	795b      	ldrb	r3, [r3, #5]
 8002444:	429a      	cmp	r2, r3
 8002446:	d143      	bne.n	80024d0 <addition+0x9e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	791a      	ldrb	r2, [r3, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	791b      	ldrb	r3, [r3, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	d13d      	bne.n	80024d0 <addition+0x9e>
        return;
    
    //Calculate addition
    for (int i  = 0; i < A->num_rows; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e033      	b.n	80024c2 <addition+0x90>
        for (int j = 0; j < A->num_columns; j++){
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	e027      	b.n	80024b0 <addition+0x7e>
            A->index[i][j] += B->index[i][j];
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	687c      	ldr	r4, [r7, #4]
 800248e:	6825      	ldr	r5, [r4, #0]
 8002490:	68fc      	ldr	r4, [r7, #12]
 8002492:	00a4      	lsls	r4, r4, #2
 8002494:	442c      	add	r4, r5
 8002496:	6825      	ldr	r5, [r4, #0]
 8002498:	68bc      	ldr	r4, [r7, #8]
 800249a:	00e4      	lsls	r4, r4, #3
 800249c:	442c      	add	r4, r5
 800249e:	f7fd fe5d 	bl	800015c <__adddf3>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	791b      	ldrb	r3, [r3, #4]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4293      	cmp	r3, r2
 80024ba:	dbd1      	blt.n	8002460 <addition+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	795b      	ldrb	r3, [r3, #5]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dbc5      	blt.n	800245a <addition+0x28>
 80024ce:	e000      	b.n	80024d2 <addition+0xa0>
        return;
 80024d0:	bf00      	nop
        }
    }
}
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bdb0      	pop	{r4, r5, r7, pc}

080024d8 <subtraction>:

//Calculate subtraction of matrix A and B (A - B)
//Answer is directly assigned to A
void subtraction(matrix *A, matrix *B)
{
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	795a      	ldrb	r2, [r3, #5]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	795b      	ldrb	r3, [r3, #5]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d143      	bne.n	8002576 <subtraction+0x9e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	791a      	ldrb	r2, [r3, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	791b      	ldrb	r3, [r3, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d13d      	bne.n	8002576 <subtraction+0x9e>
        return;
    
    //Calculate Subtraction
    for (int i  = 0; i < A->num_rows; i++){
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	e033      	b.n	8002568 <subtraction+0x90>
        for (int j = 0; j < A->num_columns; j++){
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	e027      	b.n	8002556 <subtraction+0x7e>
            A->index[i][j] -= B->index[i][j];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	687c      	ldr	r4, [r7, #4]
 8002534:	6825      	ldr	r5, [r4, #0]
 8002536:	68fc      	ldr	r4, [r7, #12]
 8002538:	00a4      	lsls	r4, r4, #2
 800253a:	442c      	add	r4, r5
 800253c:	6825      	ldr	r5, [r4, #0]
 800253e:	68bc      	ldr	r4, [r7, #8]
 8002540:	00e4      	lsls	r4, r4, #3
 8002542:	442c      	add	r4, r5
 8002544:	f7fd fe08 	bl	8000158 <__aeabi_dsub>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	791b      	ldrb	r3, [r3, #4]
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4293      	cmp	r3, r2
 8002560:	dbd1      	blt.n	8002506 <subtraction+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	795b      	ldrb	r3, [r3, #5]
 800256c:	461a      	mov	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4293      	cmp	r3, r2
 8002572:	dbc5      	blt.n	8002500 <subtraction+0x28>
 8002574:	e000      	b.n	8002578 <subtraction+0xa0>
        return;
 8002576:	bf00      	nop
        }
    }
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bdb0      	pop	{r4, r5, r7, pc}

0800257e <scalar_multiplication>:

//Scalar multiplication of matrix
////Answer is directly assigned to A
void scalar_multiplication(matrix *A, double scalar)
{
 800257e:	b590      	push	{r4, r7, lr}
 8002580:	b087      	sub	sp, #28
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	e9c7 2300 	strd	r2, r3, [r7]
    for (int i  = 0; i < A->num_rows; i++){
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e02a      	b.n	80025e6 <scalar_multiplication+0x68>
        for (int j = 0; j < A->num_columns; j++){
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e01e      	b.n	80025d4 <scalar_multiplication+0x56>
            A->index[i][j] *= scalar;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	18d4      	adds	r4, r2, r3
 80025be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c2:	f7fd ff81 	bl	80004c8 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3301      	adds	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	791b      	ldrb	r3, [r3, #4]
 80025d8:	461a      	mov	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4293      	cmp	r3, r2
 80025de:	dbda      	blt.n	8002596 <scalar_multiplication+0x18>
    for (int i  = 0; i < A->num_rows; i++){
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	795b      	ldrb	r3, [r3, #5]
 80025ea:	461a      	mov	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	dbce      	blt.n	8002590 <scalar_multiplication+0x12>
        }
    }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}

080025fc <mutiplication>:

//Calculate multiplication of matrix A and B
//Answer is directly assigned to Ans
void mutiplication(matrix *A, matrix *B, matrix *Ans)
{
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
    //Check for appropriate size
    if (A->num_columns != B->num_rows)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	791a      	ldrb	r2, [r3, #4]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	795b      	ldrb	r3, [r3, #5]
 8002610:	429a      	cmp	r2, r3
 8002612:	d166      	bne.n	80026e2 <mutiplication+0xe6>
        return;

    //Allocate memory space for answer
    allocate_matrix(Ans, A->num_rows, B->num_columns);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	7959      	ldrb	r1, [r3, #5]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	791b      	ldrb	r3, [r3, #4]
 800261c:	461a      	mov	r2, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff feb0 	bl	8002384 <allocate_matrix>

    //Perform multiplication
    for (int i = 0; i < Ans->num_rows; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	e054      	b.n	80026d4 <mutiplication+0xd8>
        for(int j = 0; j < Ans->num_columns; j++){
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e048      	b.n	80026c2 <mutiplication+0xc6>
            for (int x = 0; x < A->num_columns; x++){
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e03c      	b.n	80026b0 <mutiplication+0xb4>
                Ans->index[i][j] += (A->index[i][x] * B->index[x][j]); 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	e9d3 4500 	ldrd	r4, r5, [r3]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ff26 	bl	80004c8 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	18d6      	adds	r6, r2, r3
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fd fd5d 	bl	800015c <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	e9c6 2300 	strd	r2, r3, [r6]
            for (int x = 0; x < A->num_columns; x++){
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	791b      	ldrb	r3, [r3, #4]
 80026b4:	461a      	mov	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	4293      	cmp	r3, r2
 80026ba:	dbbc      	blt.n	8002636 <mutiplication+0x3a>
        for(int j = 0; j < Ans->num_columns; j++){
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	3301      	adds	r3, #1
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	dbb0      	blt.n	8002630 <mutiplication+0x34>
    for (int i = 0; i < Ans->num_rows; i++){
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	795b      	ldrb	r3, [r3, #5]
 80026d8:	461a      	mov	r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4293      	cmp	r3, r2
 80026de:	dba4      	blt.n	800262a <mutiplication+0x2e>
 80026e0:	e000      	b.n	80026e4 <mutiplication+0xe8>
        return;
 80026e2:	bf00      	nop
            }
        }
    }
}
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ea <transpose>:

//Perform transpose of A
void transpose(matrix *A, matrix *transpose_A)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
    allocate_matrix(transpose_A, A->num_columns, A->num_rows);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7919      	ldrb	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	795b      	ldrb	r3, [r3, #5]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f7ff fe40 	bl	8002384 <allocate_matrix>

    //Perform transpose operation
    for (int i = 0; i < transpose_A->num_rows; i++){
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e024      	b.n	8002754 <transpose+0x6a>
        for (int j = 0; j < transpose_A->num_columns; j++){
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	e018      	b.n	8002742 <transpose+0x58>
            transpose_A->index[i][j] = A->index[j][i];
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6811      	ldr	r1, [r2, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	440a      	add	r2, r1
 800272c:	6811      	ldr	r1, [r2, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	00d2      	lsls	r2, r2, #3
 8002732:	4411      	add	r1, r2
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < transpose_A->num_columns; j++){
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4293      	cmp	r3, r2
 800274c:	dbe0      	blt.n	8002710 <transpose+0x26>
    for (int i = 0; i < transpose_A->num_rows; i++){
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3301      	adds	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	795b      	ldrb	r3, [r3, #5]
 8002758:	461a      	mov	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4293      	cmp	r3, r2
 800275e:	dbd4      	blt.n	800270a <transpose+0x20>
        }
    }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <minor>:

void minor(matrix *major, matrix *minor, unsigned_int8 skip_row, unsigned_int8 skip_column)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b088      	sub	sp, #32
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	4611      	mov	r1, r2
 8002776:	461a      	mov	r2, r3
 8002778:	460b      	mov	r3, r1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	4613      	mov	r3, r2
 800277e:	71bb      	strb	r3, [r7, #6]
    //Allocate memory space for minor
    allocate_matrix(minor, major->num_rows - 1, major->num_columns - 1);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	795b      	ldrb	r3, [r3, #5]
 8002784:	3b01      	subs	r3, #1
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	791b      	ldrb	r3, [r3, #4]
 800278c:	3b01      	subs	r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	f7ff fdf6 	bl	8002384 <allocate_matrix>

    int x = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    int y = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]

    //Assign element to minor
    //Skip row skip_row
    //Skip column skip_column
    for (int i = 0; i < major->num_rows; i++){
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e038      	b.n	8002818 <minor+0xae>
        if (i != skip_row){
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d030      	beq.n	8002810 <minor+0xa6>
            for (int j = 0; j < major->num_columns; j++){
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e021      	b.n	80027f8 <minor+0x8e>
                if (j != skip_column){
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d019      	beq.n	80027f0 <minor+0x86>
                    minor->index[x][y] = major->index[i][j];
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	6811      	ldr	r1, [r2, #0]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	440a      	add	r2, r1
 80027d8:	6811      	ldr	r1, [r2, #0]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	00d2      	lsls	r2, r2, #3
 80027de:	4411      	add	r1, r2
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	e9c1 2300 	strd	r2, r3, [r1]
                    y++;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	3301      	adds	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	e000      	b.n	80027f2 <minor+0x88>
                } else {
                    continue;
 80027f0:	bf00      	nop
            for (int j = 0; j < major->num_columns; j++){
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	3301      	adds	r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	791b      	ldrb	r3, [r3, #4]
 80027fc:	461a      	mov	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4293      	cmp	r3, r2
 8002802:	dbd7      	blt.n	80027b4 <minor+0x4a>
                }
            }
            x++;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	3301      	adds	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
            y = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e000      	b.n	8002812 <minor+0xa8>
        } else {
            continue;
 8002810:	bf00      	nop
    for (int i = 0; i < major->num_rows; i++){
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	795b      	ldrb	r3, [r3, #5]
 800281c:	461a      	mov	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4293      	cmp	r3, r2
 8002822:	dbc0      	blt.n	80027a6 <minor+0x3c>
        }
    }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <determinant>:

// Calculate the determinant of A
double determinant(matrix *A, unsigned_int8 expand_row)
{
 800282e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
    double result = 0;
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    if (A->num_rows == 1 && A->num_columns == 1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	795b      	ldrb	r3, [r3, #5]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10d      	bne.n	800286c <determinant+0x3e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	791b      	ldrb	r3, [r3, #4]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d109      	bne.n	800286c <determinant+0x3e>
        return result = A->index[0][0];
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286a:	e09a      	b.n	80029a2 <determinant+0x174>

    //Calculate determinant with chosen expand_row
    for (int j = 0; j < A->num_columns; j++){
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e08e      	b.n	8002990 <determinant+0x162>
        
        //Create minor matrix
        matrix M;
        minor(A, &M, expand_row, j);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	f107 010c 	add.w	r1, r7, #12
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff74 	bl	800276a <minor>
        
        if ((expand_row + j) % 2 == 0){
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	4413      	add	r3, r2
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d13a      	bne.n	8002906 <determinant+0xd8>
            result += (A->index[expand_row][j] == 0) ? (0) : (A->index[expand_row][j] * determinant(&M, 0));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f7fe f873 	bl	8000998 <__aeabi_dcmpeq>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d119      	bne.n	80028ec <determinant+0xbe>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ffaa 	bl	800282e <determinant>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4640      	mov	r0, r8
 80028e0:	4649      	mov	r1, r9
 80028e2:	f7fd fdf1 	bl	80004c8 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	e003      	b.n	80028f4 <determinant+0xc6>
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028f8:	f7fd fc30 	bl	800015c <__adddf3>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002904:	e03c      	b.n	8002980 <determinant+0x152>
        } else {
            result += (A->index[expand_row][j] == 0) ? (0) : ((-1) * A->index[expand_row][j] * determinant(&M, 0));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	f7fe f838 	bl	8000998 <__aeabi_dcmpeq>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11c      	bne.n	8002968 <determinant+0x13a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	4614      	mov	r4, r2
 8002946:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff6c 	bl	800282e <determinant>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd fdb3 	bl	80004c8 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	e003      	b.n	8002970 <determinant+0x142>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002974:	f7fd fbf2 	bl	800015c <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }

        //Deallocate minor matrix
        deallocate_matrix(&M);
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fd32 	bl	80023ee <deallocate_matrix>
    for (int j = 0; j < A->num_columns; j++){
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	791b      	ldrb	r3, [r3, #4]
 8002994:	461a      	mov	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4293      	cmp	r3, r2
 800299a:	f6ff af6a 	blt.w	8002872 <determinant+0x44>
    }

    return result;
 800299e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080029ae <adjoint>:

//Calculate adjoint matrix
void adjoint(matrix *A, matrix *Ans)
{
 80029ae:	b5b0      	push	{r4, r5, r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
    allocate_matrix(Ans, A->num_rows, A->num_columns);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7959      	ldrb	r1, [r3, #5]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	791b      	ldrb	r3, [r3, #4]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f7ff fcde 	bl	8002384 <allocate_matrix>
    for (int i = 0; i < Ans->num_rows; i++){
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	e042      	b.n	8002a54 <adjoint+0xa6>
        for (int j = 0; j < Ans->num_columns; j++){
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e036      	b.n	8002a42 <adjoint+0x94>
            matrix M;
            minor(A, &M, i, j);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f107 0108 	add.w	r1, r7, #8
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fec2 	bl	800276a <minor>

            Ans->index[i][j] = ((i + j) % 2 == 0) ? (determinant(&M, 0)) : ((-1) * determinant(&M, 0));
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d108      	bne.n	8002a06 <adjoint+0x58>
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff17 	bl	800282e <determinant>
 8002a00:	4604      	mov	r4, r0
 8002a02:	460d      	mov	r5, r1
 8002a04:	e00a      	b.n	8002a1c <adjoint+0x6e>
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff0e 	bl	800282e <determinant>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4614      	mov	r4, r2
 8002a18:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	e9c3 4500 	strd	r4, r5, [r3]
            
            //Deallocate minor matrix
            deallocate_matrix(&M);
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fcd9 	bl	80023ee <deallocate_matrix>
        for (int j = 0; j < Ans->num_columns; j++){
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	791b      	ldrb	r3, [r3, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	dbc2      	blt.n	80029d4 <adjoint+0x26>
    for (int i = 0; i < Ans->num_rows; i++){
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	795b      	ldrb	r3, [r3, #5]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	dbb6      	blt.n	80029ce <adjoint+0x20>
        }
    }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a6c <inverse>:

void inverse(matrix *A, matrix *inverse_of_A)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
    //Calculate determinant of A
    double determinant_of_A = determinant(A, 0);
 8002a76:	2100      	movs	r1, #0
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fed8 	bl	800282e <determinant>
 8002a7e:	e9c7 0102 	strd	r0, r1, [r7, #8]

    //Calculate adjoint matrix of A
    adjoint(A, inverse_of_A);
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff92 	bl	80029ae <adjoint>

    //Calculate inverse of A
    scalar_multiplication(inverse_of_A, 1 / determinant_of_A);
 8002a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	4906      	ldr	r1, [pc, #24]	; (8002aac <inverse+0x40>)
 8002a94:	f7fd fe42 	bl	800071c <__aeabi_ddiv>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	6838      	ldr	r0, [r7, #0]
 8002a9e:	f7ff fd6e 	bl	800257e <scalar_multiplication>
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	3ff00000 	.word	0x3ff00000

08002ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_Init+0x28>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_Init+0x28>)
 8002aba:	f043 0310 	orr.w	r3, r3, #16
 8002abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	f000 f907 	bl	8002cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac6:	200f      	movs	r0, #15
 8002ac8:	f000 f808 	bl	8002adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002acc:	f7fe fc30 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40022000 	.word	0x40022000

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_InitTick+0x54>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_InitTick+0x58>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f911 	bl	8002d22 <HAL_SYSTICK_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00e      	b.n	8002b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d80a      	bhi.n	8002b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b10:	2200      	movs	r2, #0
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f000 f8e7 	bl	8002cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b1c:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <HAL_InitTick+0x5c>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e000      	b.n	8002b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000080 	.word	0x20000080
 8002b34:	20000088 	.word	0x20000088
 8002b38:	20000084 	.word	0x20000084

08002b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_IncTick+0x1c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_IncTick+0x20>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <HAL_IncTick+0x20>)
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	20000088 	.word	0x20000088
 8002b5c:	2000029c 	.word	0x2000029c

08002b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return uwTick;
 8002b64:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <HAL_GetTick+0x10>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	2000029c 	.word	0x2000029c

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	; (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d301      	bcc.n	8002ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00f      	b.n	8002cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <SysTick_Config+0x40>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cae:	210f      	movs	r1, #15
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f7ff ff90 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <SysTick_Config+0x40>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <SysTick_Config+0x40>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff49 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfc:	f7ff ff5e 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ff90 	bl	8002c2c <NVIC_EncodePriority>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff5f 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffb0 	bl	8002c90 <SysTick_Config>
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b08b      	sub	sp, #44	; 0x2c
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4e:	e169      	b.n	8003024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d50:	2201      	movs	r2, #1
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f040 8158 	bne.w	800301e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a9a      	ldr	r2, [pc, #616]	; (8002fdc <HAL_GPIO_Init+0x2a0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d05e      	beq.n	8002e36 <HAL_GPIO_Init+0xfa>
 8002d78:	4a98      	ldr	r2, [pc, #608]	; (8002fdc <HAL_GPIO_Init+0x2a0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d875      	bhi.n	8002e6a <HAL_GPIO_Init+0x12e>
 8002d7e:	4a98      	ldr	r2, [pc, #608]	; (8002fe0 <HAL_GPIO_Init+0x2a4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d058      	beq.n	8002e36 <HAL_GPIO_Init+0xfa>
 8002d84:	4a96      	ldr	r2, [pc, #600]	; (8002fe0 <HAL_GPIO_Init+0x2a4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d86f      	bhi.n	8002e6a <HAL_GPIO_Init+0x12e>
 8002d8a:	4a96      	ldr	r2, [pc, #600]	; (8002fe4 <HAL_GPIO_Init+0x2a8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d052      	beq.n	8002e36 <HAL_GPIO_Init+0xfa>
 8002d90:	4a94      	ldr	r2, [pc, #592]	; (8002fe4 <HAL_GPIO_Init+0x2a8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d869      	bhi.n	8002e6a <HAL_GPIO_Init+0x12e>
 8002d96:	4a94      	ldr	r2, [pc, #592]	; (8002fe8 <HAL_GPIO_Init+0x2ac>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d04c      	beq.n	8002e36 <HAL_GPIO_Init+0xfa>
 8002d9c:	4a92      	ldr	r2, [pc, #584]	; (8002fe8 <HAL_GPIO_Init+0x2ac>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d863      	bhi.n	8002e6a <HAL_GPIO_Init+0x12e>
 8002da2:	4a92      	ldr	r2, [pc, #584]	; (8002fec <HAL_GPIO_Init+0x2b0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d046      	beq.n	8002e36 <HAL_GPIO_Init+0xfa>
 8002da8:	4a90      	ldr	r2, [pc, #576]	; (8002fec <HAL_GPIO_Init+0x2b0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d85d      	bhi.n	8002e6a <HAL_GPIO_Init+0x12e>
 8002dae:	2b12      	cmp	r3, #18
 8002db0:	d82a      	bhi.n	8002e08 <HAL_GPIO_Init+0xcc>
 8002db2:	2b12      	cmp	r3, #18
 8002db4:	d859      	bhi.n	8002e6a <HAL_GPIO_Init+0x12e>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <HAL_GPIO_Init+0x80>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002e37 	.word	0x08002e37
 8002dc0:	08002e11 	.word	0x08002e11
 8002dc4:	08002e23 	.word	0x08002e23
 8002dc8:	08002e65 	.word	0x08002e65
 8002dcc:	08002e6b 	.word	0x08002e6b
 8002dd0:	08002e6b 	.word	0x08002e6b
 8002dd4:	08002e6b 	.word	0x08002e6b
 8002dd8:	08002e6b 	.word	0x08002e6b
 8002ddc:	08002e6b 	.word	0x08002e6b
 8002de0:	08002e6b 	.word	0x08002e6b
 8002de4:	08002e6b 	.word	0x08002e6b
 8002de8:	08002e6b 	.word	0x08002e6b
 8002dec:	08002e6b 	.word	0x08002e6b
 8002df0:	08002e6b 	.word	0x08002e6b
 8002df4:	08002e6b 	.word	0x08002e6b
 8002df8:	08002e6b 	.word	0x08002e6b
 8002dfc:	08002e6b 	.word	0x08002e6b
 8002e00:	08002e19 	.word	0x08002e19
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	4a79      	ldr	r2, [pc, #484]	; (8002ff0 <HAL_GPIO_Init+0x2b4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e0e:	e02c      	b.n	8002e6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	623b      	str	r3, [r7, #32]
          break;
 8002e16:	e029      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	623b      	str	r3, [r7, #32]
          break;
 8002e20:	e024      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	3308      	adds	r3, #8
 8002e28:	623b      	str	r3, [r7, #32]
          break;
 8002e2a:	e01f      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	330c      	adds	r3, #12
 8002e32:	623b      	str	r3, [r7, #32]
          break;
 8002e34:	e01a      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	623b      	str	r3, [r7, #32]
          break;
 8002e42:	e013      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	611a      	str	r2, [r3, #16]
          break;
 8002e56:	e009      	b.n	8002e6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e58:	2308      	movs	r3, #8
 8002e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	615a      	str	r2, [r3, #20]
          break;
 8002e62:	e003      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
          break;
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x130>
          break;
 8002e6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2bff      	cmp	r3, #255	; 0xff
 8002e70:	d801      	bhi.n	8002e76 <HAL_GPIO_Init+0x13a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	e001      	b.n	8002e7a <HAL_GPIO_Init+0x13e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2bff      	cmp	r3, #255	; 0xff
 8002e80:	d802      	bhi.n	8002e88 <HAL_GPIO_Init+0x14c>
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x152>
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	3b08      	subs	r3, #8
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	210f      	movs	r1, #15
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80b1 	beq.w	800301e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_GPIO_Init+0x2b8>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a4c      	ldr	r2, [pc, #304]	; (8002ff4 <HAL_GPIO_Init+0x2b8>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_GPIO_Init+0x2b8>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ed4:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <HAL_GPIO_Init+0x2bc>)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	220f      	movs	r2, #15
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a40      	ldr	r2, [pc, #256]	; (8002ffc <HAL_GPIO_Init+0x2c0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_GPIO_Init+0x1ec>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3f      	ldr	r2, [pc, #252]	; (8003000 <HAL_GPIO_Init+0x2c4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00d      	beq.n	8002f24 <HAL_GPIO_Init+0x1e8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3e      	ldr	r2, [pc, #248]	; (8003004 <HAL_GPIO_Init+0x2c8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <HAL_GPIO_Init+0x1e4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3d      	ldr	r2, [pc, #244]	; (8003008 <HAL_GPIO_Init+0x2cc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_GPIO_Init+0x1e0>
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e006      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	e004      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e002      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4093      	lsls	r3, r2
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f3a:	492f      	ldr	r1, [pc, #188]	; (8002ff8 <HAL_GPIO_Init+0x2bc>)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	492c      	ldr	r1, [pc, #176]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	4928      	ldr	r1, [pc, #160]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f7c:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	4922      	ldr	r1, [pc, #136]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	491e      	ldr	r1, [pc, #120]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4918      	ldr	r1, [pc, #96]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	4914      	ldr	r1, [pc, #80]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d021      	beq.n	8003010 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <HAL_GPIO_Init+0x2d0>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e021      	b.n	800301e <HAL_GPIO_Init+0x2e2>
 8002fda:	bf00      	nop
 8002fdc:	10320000 	.word	0x10320000
 8002fe0:	10310000 	.word	0x10310000
 8002fe4:	10220000 	.word	0x10220000
 8002fe8:	10210000 	.word	0x10210000
 8002fec:	10120000 	.word	0x10120000
 8002ff0:	10110000 	.word	0x10110000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40010800 	.word	0x40010800
 8003000:	40010c00 	.word	0x40010c00
 8003004:	40011000 	.word	0x40011000
 8003008:	40011400 	.word	0x40011400
 800300c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_GPIO_Init+0x304>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	43db      	mvns	r3, r3
 8003018:	4909      	ldr	r1, [pc, #36]	; (8003040 <HAL_GPIO_Init+0x304>)
 800301a:	4013      	ands	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	3301      	adds	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	f47f ae8e 	bne.w	8002d50 <HAL_GPIO_Init+0x14>
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	372c      	adds	r7, #44	; 0x2c
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40010400 	.word	0x40010400

08003044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
 8003050:	4613      	mov	r3, r2
 8003052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003054:	787b      	ldrb	r3, [r7, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003060:	e003      	b.n	800306a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	041a      	lsls	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e272      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8087 	beq.w	80031a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003094:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b04      	cmp	r3, #4
 800309e:	d00c      	beq.n	80030ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a0:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
 80030ac:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	4b89      	ldr	r3, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x12c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d168      	bne.n	80031a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e24c      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x76>
 80030dc:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7f      	ldr	r2, [pc, #508]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e02e      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x98>
 80030f2:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a77      	ldr	r2, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0xbc>
 8003116:	4b72      	ldr	r3, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a71      	ldr	r2, [pc, #452]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6e      	ldr	r2, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 8003130:	4b6b      	ldr	r3, [pc, #428]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6a      	ldr	r2, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a67      	ldr	r2, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7ff fd06 	bl	8002b60 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7ff fd02 	bl	8002b60 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e200      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xe4>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff fcf2 	bl	8002b60 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7ff fcee 	bl	8002b60 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1ec      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x10c>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ae:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
 80031c6:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c0      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4939      	ldr	r1, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7ff fca7 	bl	8002b60 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7ff fca3 	bl	8002b60 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7ff fc86 	bl	8002b60 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7ff fc82 	bl	8002b60 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e180      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03a      	beq.n	80032f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_RCC_OscConfig+0x274>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7ff fc66 	bl	8002b60 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7ff fc62 	bl	8002b60 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e160      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f000 fa9c 	bl	80037f4 <RCC_Delay>
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_OscConfig+0x274>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7ff fc4c 	bl	8002b60 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7ff fc48 	bl	8002b60 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d908      	bls.n	80032ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e146      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	42420000 	.word	0x42420000
 80032e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b92      	ldr	r3, [pc, #584]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e9      	bne.n	80032cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a6 	beq.w	8003452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8b      	ldr	r3, [pc, #556]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	61d3      	str	r3, [r2, #28]
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7ff fc09 	bl	8002b60 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7ff fc05 	bl	8002b60 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	; 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e103      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b75      	ldr	r3, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x312>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x334>
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4b67      	ldr	r3, [pc, #412]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a66      	ldr	r2, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x356>
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a60      	ldr	r2, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	4b5e      	ldr	r3, [pc, #376]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6213      	str	r3, [r2, #32]
 80033d6:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7ff fbb9 	bl	8002b60 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7ff fbb5 	bl	8002b60 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0b1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x37e>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7ff fba3 	bl	8002b60 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7ff fb9f 	bl	8002b60 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e09b      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d061      	beq.n	800352c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d146      	bne.n	80034fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7ff fb73 	bl	8002b60 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7ff fb6f 	bl	8002b60 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e06d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	4b29      	ldr	r3, [pc, #164]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d108      	bne.n	80034b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4921      	ldr	r1, [pc, #132]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a19      	ldr	r1, [r3, #32]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	430b      	orrs	r3, r1
 80034ca:	491b      	ldr	r1, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7ff fb43 	bl	8002b60 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7ff fb3f 	bl	8002b60 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e03d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x46a>
 80034fc:	e035      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7ff fb2c 	bl	8002b60 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7ff fb28 	bl	8002b60 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e026      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x498>
 800352a:	e01e      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e019      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x500>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d0      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4965      	ldr	r1, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d040      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e073      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06b      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4936      	ldr	r1, [pc, #216]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7ff fa7a 	bl	8002b60 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7ff fa76 	bl	8002b60 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e053      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d210      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4922      	ldr	r1, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f9d8 	bl	8002adc <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	080066a0 	.word	0x080066a0
 8003744:	20000080 	.word	0x20000080
 8003748:	20000084 	.word	0x20000084

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x30>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x36>
 800377a:	e027      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800377e:	613b      	str	r3, [r7, #16]
      break;
 8003780:	e027      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	0c9b      	lsrs	r3, r3, #18
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0c5b      	lsrs	r3, r3, #17
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ae:	fb03 f202 	mul.w	r2, r3, r2
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e004      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	613b      	str	r3, [r7, #16]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ce:	613b      	str	r3, [r7, #16]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	693b      	ldr	r3, [r7, #16]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	080066b0 	.word	0x080066b0
 80037ec:	080066c0 	.word	0x080066c0
 80037f0:	003d0900 	.word	0x003d0900

080037f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <RCC_Delay+0x34>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <RCC_Delay+0x38>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003810:	bf00      	nop
  }
  while (Delay --);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f9      	bne.n	8003810 <RCC_Delay+0x1c>
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000080 	.word	0x20000080
 800382c:	10624dd3 	.word	0x10624dd3

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fe06 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fbe2 	bl	8004038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e041      	b.n	8003964 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f839 	bl	800396c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f000 fb93 	bl	8004038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
	...

08003980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_TIM_PWM_Start+0x24>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e022      	b.n	80039ea <HAL_TIM_PWM_Start+0x6a>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d109      	bne.n	80039be <HAL_TIM_PWM_Start+0x3e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e015      	b.n	80039ea <HAL_TIM_PWM_Start+0x6a>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d109      	bne.n	80039d8 <HAL_TIM_PWM_Start+0x58>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e008      	b.n	80039ea <HAL_TIM_PWM_Start+0x6a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e05e      	b.n	8003ab0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x82>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a00:	e013      	b.n	8003a2a <HAL_TIM_PWM_Start+0xaa>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start+0x92>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a10:	e00b      	b.n	8003a2a <HAL_TIM_PWM_Start+0xaa>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0xa2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	e003      	b.n	8003a2a <HAL_TIM_PWM_Start+0xaa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fd80 	bl	8004538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HAL_TIM_PWM_Start+0x138>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d107      	bne.n	8003a52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_TIM_PWM_Start+0x138>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIM_PWM_Start+0xfa>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d009      	beq.n	8003a7a <HAL_TIM_PWM_Start+0xfa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_TIM_PWM_Start+0x13c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIM_PWM_Start+0xfa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <HAL_TIM_PWM_Start+0x140>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d111      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d010      	beq.n	8003aae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	e007      	b.n	8003aae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e093      	b.n	8003c00 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fd fc51 	bl	8001394 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b08:	f023 0307 	bic.w	r3, r3, #7
 8003b0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f000 fa8d 	bl	8004038 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	4313      	orrs	r3, r2
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b64:	f023 030c 	bic.w	r3, r3, #12
 8003b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	4313      	orrs	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	031b      	lsls	r3, r3, #12
 8003b94:	4313      	orrs	r3, r2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d110      	bne.n	8003c5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c3e:	7b7b      	ldrb	r3, [r7, #13]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d001      	beq.n	8003c48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e069      	b.n	8003d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c58:	e031      	b.n	8003cbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d110      	bne.n	8003c82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d102      	bne.n	8003c6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c66:	7b3b      	ldrb	r3, [r7, #12]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d001      	beq.n	8003c70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e055      	b.n	8003d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c80:	e01d      	b.n	8003cbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d108      	bne.n	8003c9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c88:	7bbb      	ldrb	r3, [r7, #14]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c8e:	7b7b      	ldrb	r3, [r7, #13]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c94:	7b3b      	ldrb	r3, [r7, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d001      	beq.n	8003c9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e03e      	b.n	8003d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_TIM_Encoder_Start+0xc4>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d008      	beq.n	8003cdc <HAL_TIM_Encoder_Start+0xd4>
 8003cca:	e00f      	b.n	8003cec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fc2f 	bl	8004538 <TIM_CCxChannelCmd>
      break;
 8003cda:	e016      	b.n	8003d0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fc27 	bl	8004538 <TIM_CCxChannelCmd>
      break;
 8003cea:	e00e      	b.n	8003d0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fc1f 	bl	8004538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	2104      	movs	r1, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fc18 	bl	8004538 <TIM_CCxChannelCmd>
      break;
 8003d08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0ae      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	f200 809f 	bhi.w	8003e90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d8d 	.word	0x08003d8d
 8003d5c:	08003e91 	.word	0x08003e91
 8003d60:	08003e91 	.word	0x08003e91
 8003d64:	08003e91 	.word	0x08003e91
 8003d68:	08003dcd 	.word	0x08003dcd
 8003d6c:	08003e91 	.word	0x08003e91
 8003d70:	08003e91 	.word	0x08003e91
 8003d74:	08003e91 	.word	0x08003e91
 8003d78:	08003e0f 	.word	0x08003e0f
 8003d7c:	08003e91 	.word	0x08003e91
 8003d80:	08003e91 	.word	0x08003e91
 8003d84:	08003e91 	.word	0x08003e91
 8003d88:	08003e4f 	.word	0x08003e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f9b2 	bl	80040fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0208 	orr.w	r2, r2, #8
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0204 	bic.w	r2, r2, #4
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	619a      	str	r2, [r3, #24]
      break;
 8003dca:	e064      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f9f8 	bl	80041c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	619a      	str	r2, [r3, #24]
      break;
 8003e0c:	e043      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fa41 	bl	800429c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0208 	orr.w	r2, r2, #8
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0204 	bic.w	r2, r2, #4
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	61da      	str	r2, [r3, #28]
      break;
 8003e4c:	e023      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fa8b 	bl	8004370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	021a      	lsls	r2, r3, #8
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	61da      	str	r2, [r3, #28]
      break;
 8003e8e:	e002      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
      break;
 8003e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0b4      	b.n	800402e <HAL_TIM_ConfigClockSource+0x186>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d03e      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0xd4>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f02:	f200 8087 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	f000 8086 	beq.w	800401a <HAL_TIM_ConfigClockSource+0x172>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d87f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d01a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xa6>
 8003f18:	2b70      	cmp	r3, #112	; 0x70
 8003f1a:	d87b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d050      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f20:	2b60      	cmp	r3, #96	; 0x60
 8003f22:	d877      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d03c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f28:	2b50      	cmp	r3, #80	; 0x50
 8003f2a:	d873      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d058      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d86f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d064      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d86b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d060      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d867      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d05c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d05a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	e062      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	f000 facc 	bl	80044fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
      break;
 8003f7a:	e04f      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8c:	f000 fab5 	bl	80044fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e03c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fa2c 	bl	800440c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2150      	movs	r1, #80	; 0x50
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa83 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e02c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 fa4a 	bl	8004468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2160      	movs	r1, #96	; 0x60
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fa73 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e01c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 fa0c 	bl	800440c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fa63 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8004000:	e00c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 fa5a 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8004012:	e003      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e000      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800401a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0xb8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00b      	beq.n	8004068 <TIM_Base_SetConfig+0x30>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004056:	d007      	beq.n	8004068 <TIM_Base_SetConfig+0x30>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <TIM_Base_SetConfig+0xbc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_Base_SetConfig+0x30>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <TIM_Base_SetConfig+0xc0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <TIM_Base_SetConfig+0xb8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_Base_SetConfig+0x62>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d007      	beq.n	800409a <TIM_Base_SetConfig+0x62>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <TIM_Base_SetConfig+0xbc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_Base_SetConfig+0x62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <TIM_Base_SetConfig+0xc0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d108      	bne.n	80040ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <TIM_Base_SetConfig+0xb8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d103      	bne.n	80040e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	615a      	str	r2, [r3, #20]
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800

080040fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f023 0201 	bic.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 0302 	bic.w	r3, r3, #2
 8004144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <TIM_OC1_SetConfig+0xc8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0308 	bic.w	r3, r3, #8
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <TIM_OC1_SetConfig+0xc8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00

080041c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f023 0210 	bic.w	r2, r3, #16
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0320 	bic.w	r3, r3, #32
 8004212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <TIM_OC2_SetConfig+0xd0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10d      	bne.n	8004244 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <TIM_OC2_SetConfig+0xd0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d113      	bne.n	8004274 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00

0800429c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <TIM_OC3_SetConfig+0xd0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10d      	bne.n	8004316 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <TIM_OC3_SetConfig+0xd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d113      	bne.n	8004346 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40012c00 	.word	0x40012c00

08004370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	031b      	lsls	r3, r3, #12
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <TIM_OC4_SetConfig+0x98>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d109      	bne.n	80043e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00

0800440c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 030a 	bic.w	r3, r3, #10
 8004448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0210 	bic.w	r2, r3, #16
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	031b      	lsls	r3, r3, #12
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f043 0307 	orr.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004514:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	431a      	orrs	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4313      	orrs	r3, r2
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	609a      	str	r2, [r3, #8]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e046      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d009      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800

0800463c <calloc>:
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <calloc+0xc>)
 800463e:	460a      	mov	r2, r1
 8004640:	4601      	mov	r1, r0
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f000 b802 	b.w	800464c <_calloc_r>
 8004648:	200000d8 	.word	0x200000d8

0800464c <_calloc_r>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	fba1 5402 	umull	r5, r4, r1, r2
 8004652:	b934      	cbnz	r4, 8004662 <_calloc_r+0x16>
 8004654:	4629      	mov	r1, r5
 8004656:	f000 f83d 	bl	80046d4 <_malloc_r>
 800465a:	4606      	mov	r6, r0
 800465c:	b928      	cbnz	r0, 800466a <_calloc_r+0x1e>
 800465e:	4630      	mov	r0, r6
 8004660:	bd70      	pop	{r4, r5, r6, pc}
 8004662:	220c      	movs	r2, #12
 8004664:	2600      	movs	r6, #0
 8004666:	6002      	str	r2, [r0, #0]
 8004668:	e7f9      	b.n	800465e <_calloc_r+0x12>
 800466a:	462a      	mov	r2, r5
 800466c:	4621      	mov	r1, r4
 800466e:	f000 f8bd 	bl	80047ec <memset>
 8004672:	e7f4      	b.n	800465e <_calloc_r+0x12>

08004674 <malloc>:
 8004674:	4b02      	ldr	r3, [pc, #8]	; (8004680 <malloc+0xc>)
 8004676:	4601      	mov	r1, r0
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f000 b82b 	b.w	80046d4 <_malloc_r>
 800467e:	bf00      	nop
 8004680:	200000d8 	.word	0x200000d8

08004684 <free>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <free+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f000 b8f3 	b.w	8004874 <_free_r>
 800468e:	bf00      	nop
 8004690:	200000d8 	.word	0x200000d8

08004694 <sbrk_aligned>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4e0e      	ldr	r6, [pc, #56]	; (80046d0 <sbrk_aligned+0x3c>)
 8004698:	460c      	mov	r4, r1
 800469a:	6831      	ldr	r1, [r6, #0]
 800469c:	4605      	mov	r5, r0
 800469e:	b911      	cbnz	r1, 80046a6 <sbrk_aligned+0x12>
 80046a0:	f000 f8ac 	bl	80047fc <_sbrk_r>
 80046a4:	6030      	str	r0, [r6, #0]
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f8a7 	bl	80047fc <_sbrk_r>
 80046ae:	1c43      	adds	r3, r0, #1
 80046b0:	d00a      	beq.n	80046c8 <sbrk_aligned+0x34>
 80046b2:	1cc4      	adds	r4, r0, #3
 80046b4:	f024 0403 	bic.w	r4, r4, #3
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d007      	beq.n	80046cc <sbrk_aligned+0x38>
 80046bc:	1a21      	subs	r1, r4, r0
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 f89c 	bl	80047fc <_sbrk_r>
 80046c4:	3001      	adds	r0, #1
 80046c6:	d101      	bne.n	80046cc <sbrk_aligned+0x38>
 80046c8:	f04f 34ff 	mov.w	r4, #4294967295
 80046cc:	4620      	mov	r0, r4
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	200002a4 	.word	0x200002a4

080046d4 <_malloc_r>:
 80046d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d8:	1ccd      	adds	r5, r1, #3
 80046da:	f025 0503 	bic.w	r5, r5, #3
 80046de:	3508      	adds	r5, #8
 80046e0:	2d0c      	cmp	r5, #12
 80046e2:	bf38      	it	cc
 80046e4:	250c      	movcc	r5, #12
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	4607      	mov	r7, r0
 80046ea:	db01      	blt.n	80046f0 <_malloc_r+0x1c>
 80046ec:	42a9      	cmp	r1, r5
 80046ee:	d905      	bls.n	80046fc <_malloc_r+0x28>
 80046f0:	230c      	movs	r3, #12
 80046f2:	2600      	movs	r6, #0
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4630      	mov	r0, r6
 80046f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047d0 <_malloc_r+0xfc>
 8004700:	f000 f868 	bl	80047d4 <__malloc_lock>
 8004704:	f8d8 3000 	ldr.w	r3, [r8]
 8004708:	461c      	mov	r4, r3
 800470a:	bb5c      	cbnz	r4, 8004764 <_malloc_r+0x90>
 800470c:	4629      	mov	r1, r5
 800470e:	4638      	mov	r0, r7
 8004710:	f7ff ffc0 	bl	8004694 <sbrk_aligned>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	4604      	mov	r4, r0
 8004718:	d155      	bne.n	80047c6 <_malloc_r+0xf2>
 800471a:	f8d8 4000 	ldr.w	r4, [r8]
 800471e:	4626      	mov	r6, r4
 8004720:	2e00      	cmp	r6, #0
 8004722:	d145      	bne.n	80047b0 <_malloc_r+0xdc>
 8004724:	2c00      	cmp	r4, #0
 8004726:	d048      	beq.n	80047ba <_malloc_r+0xe6>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	4631      	mov	r1, r6
 800472c:	4638      	mov	r0, r7
 800472e:	eb04 0903 	add.w	r9, r4, r3
 8004732:	f000 f863 	bl	80047fc <_sbrk_r>
 8004736:	4581      	cmp	r9, r0
 8004738:	d13f      	bne.n	80047ba <_malloc_r+0xe6>
 800473a:	6821      	ldr	r1, [r4, #0]
 800473c:	4638      	mov	r0, r7
 800473e:	1a6d      	subs	r5, r5, r1
 8004740:	4629      	mov	r1, r5
 8004742:	f7ff ffa7 	bl	8004694 <sbrk_aligned>
 8004746:	3001      	adds	r0, #1
 8004748:	d037      	beq.n	80047ba <_malloc_r+0xe6>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	442b      	add	r3, r5
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	f8d8 3000 	ldr.w	r3, [r8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d038      	beq.n	80047ca <_malloc_r+0xf6>
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	42a2      	cmp	r2, r4
 800475c:	d12b      	bne.n	80047b6 <_malloc_r+0xe2>
 800475e:	2200      	movs	r2, #0
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	e00f      	b.n	8004784 <_malloc_r+0xb0>
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	1b52      	subs	r2, r2, r5
 8004768:	d41f      	bmi.n	80047aa <_malloc_r+0xd6>
 800476a:	2a0b      	cmp	r2, #11
 800476c:	d917      	bls.n	800479e <_malloc_r+0xca>
 800476e:	1961      	adds	r1, r4, r5
 8004770:	42a3      	cmp	r3, r4
 8004772:	6025      	str	r5, [r4, #0]
 8004774:	bf18      	it	ne
 8004776:	6059      	strne	r1, [r3, #4]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	bf08      	it	eq
 800477c:	f8c8 1000 	streq.w	r1, [r8]
 8004780:	5162      	str	r2, [r4, r5]
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	4638      	mov	r0, r7
 8004786:	f104 060b 	add.w	r6, r4, #11
 800478a:	f000 f829 	bl	80047e0 <__malloc_unlock>
 800478e:	f026 0607 	bic.w	r6, r6, #7
 8004792:	1d23      	adds	r3, r4, #4
 8004794:	1af2      	subs	r2, r6, r3
 8004796:	d0ae      	beq.n	80046f6 <_malloc_r+0x22>
 8004798:	1b9b      	subs	r3, r3, r6
 800479a:	50a3      	str	r3, [r4, r2]
 800479c:	e7ab      	b.n	80046f6 <_malloc_r+0x22>
 800479e:	42a3      	cmp	r3, r4
 80047a0:	6862      	ldr	r2, [r4, #4]
 80047a2:	d1dd      	bne.n	8004760 <_malloc_r+0x8c>
 80047a4:	f8c8 2000 	str.w	r2, [r8]
 80047a8:	e7ec      	b.n	8004784 <_malloc_r+0xb0>
 80047aa:	4623      	mov	r3, r4
 80047ac:	6864      	ldr	r4, [r4, #4]
 80047ae:	e7ac      	b.n	800470a <_malloc_r+0x36>
 80047b0:	4634      	mov	r4, r6
 80047b2:	6876      	ldr	r6, [r6, #4]
 80047b4:	e7b4      	b.n	8004720 <_malloc_r+0x4c>
 80047b6:	4613      	mov	r3, r2
 80047b8:	e7cc      	b.n	8004754 <_malloc_r+0x80>
 80047ba:	230c      	movs	r3, #12
 80047bc:	4638      	mov	r0, r7
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	f000 f80e 	bl	80047e0 <__malloc_unlock>
 80047c4:	e797      	b.n	80046f6 <_malloc_r+0x22>
 80047c6:	6025      	str	r5, [r4, #0]
 80047c8:	e7dc      	b.n	8004784 <_malloc_r+0xb0>
 80047ca:	605b      	str	r3, [r3, #4]
 80047cc:	deff      	udf	#255	; 0xff
 80047ce:	bf00      	nop
 80047d0:	200002a0 	.word	0x200002a0

080047d4 <__malloc_lock>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__malloc_lock+0x8>)
 80047d6:	f000 b84b 	b.w	8004870 <__retarget_lock_acquire_recursive>
 80047da:	bf00      	nop
 80047dc:	200003e4 	.word	0x200003e4

080047e0 <__malloc_unlock>:
 80047e0:	4801      	ldr	r0, [pc, #4]	; (80047e8 <__malloc_unlock+0x8>)
 80047e2:	f000 b846 	b.w	8004872 <__retarget_lock_release_recursive>
 80047e6:	bf00      	nop
 80047e8:	200003e4 	.word	0x200003e4

080047ec <memset>:
 80047ec:	4603      	mov	r3, r0
 80047ee:	4402      	add	r2, r0
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	f803 1b01 	strb.w	r1, [r3], #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <_sbrk_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	2300      	movs	r3, #0
 8004800:	4d05      	ldr	r5, [pc, #20]	; (8004818 <_sbrk_r+0x1c>)
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	f7fc fea8 	bl	800155c <_sbrk>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_sbrk_r+0x1a>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_sbrk_r+0x1a>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	200003e0 	.word	0x200003e0

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200000d8 	.word	0x200000d8

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	2600      	movs	r6, #0
 800482c:	4d0c      	ldr	r5, [pc, #48]	; (8004860 <__libc_init_array+0x38>)
 800482e:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	f001 ff26 	bl	8006688 <_init>
 800483c:	2600      	movs	r6, #0
 800483e:	4d0a      	ldr	r5, [pc, #40]	; (8004868 <__libc_init_array+0x40>)
 8004840:	4c0a      	ldr	r4, [pc, #40]	; (800486c <__libc_init_array+0x44>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	080068d0 	.word	0x080068d0
 8004864:	080068d0 	.word	0x080068d0
 8004868:	080068d0 	.word	0x080068d0
 800486c:	080068d4 	.word	0x080068d4

08004870 <__retarget_lock_acquire_recursive>:
 8004870:	4770      	bx	lr

08004872 <__retarget_lock_release_recursive>:
 8004872:	4770      	bx	lr

08004874 <_free_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4605      	mov	r5, r0
 8004878:	2900      	cmp	r1, #0
 800487a:	d040      	beq.n	80048fe <_free_r+0x8a>
 800487c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004880:	1f0c      	subs	r4, r1, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	bfb8      	it	lt
 8004886:	18e4      	addlt	r4, r4, r3
 8004888:	f7ff ffa4 	bl	80047d4 <__malloc_lock>
 800488c:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <_free_r+0x8c>)
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	b933      	cbnz	r3, 80048a0 <_free_r+0x2c>
 8004892:	6063      	str	r3, [r4, #4]
 8004894:	6014      	str	r4, [r2, #0]
 8004896:	4628      	mov	r0, r5
 8004898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800489c:	f7ff bfa0 	b.w	80047e0 <__malloc_unlock>
 80048a0:	42a3      	cmp	r3, r4
 80048a2:	d908      	bls.n	80048b6 <_free_r+0x42>
 80048a4:	6820      	ldr	r0, [r4, #0]
 80048a6:	1821      	adds	r1, r4, r0
 80048a8:	428b      	cmp	r3, r1
 80048aa:	bf01      	itttt	eq
 80048ac:	6819      	ldreq	r1, [r3, #0]
 80048ae:	685b      	ldreq	r3, [r3, #4]
 80048b0:	1809      	addeq	r1, r1, r0
 80048b2:	6021      	streq	r1, [r4, #0]
 80048b4:	e7ed      	b.n	8004892 <_free_r+0x1e>
 80048b6:	461a      	mov	r2, r3
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	b10b      	cbz	r3, 80048c0 <_free_r+0x4c>
 80048bc:	42a3      	cmp	r3, r4
 80048be:	d9fa      	bls.n	80048b6 <_free_r+0x42>
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	1850      	adds	r0, r2, r1
 80048c4:	42a0      	cmp	r0, r4
 80048c6:	d10b      	bne.n	80048e0 <_free_r+0x6c>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	4401      	add	r1, r0
 80048cc:	1850      	adds	r0, r2, r1
 80048ce:	4283      	cmp	r3, r0
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	d1e0      	bne.n	8004896 <_free_r+0x22>
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4408      	add	r0, r1
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	6053      	str	r3, [r2, #4]
 80048de:	e7da      	b.n	8004896 <_free_r+0x22>
 80048e0:	d902      	bls.n	80048e8 <_free_r+0x74>
 80048e2:	230c      	movs	r3, #12
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	e7d6      	b.n	8004896 <_free_r+0x22>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	1821      	adds	r1, r4, r0
 80048ec:	428b      	cmp	r3, r1
 80048ee:	bf01      	itttt	eq
 80048f0:	6819      	ldreq	r1, [r3, #0]
 80048f2:	685b      	ldreq	r3, [r3, #4]
 80048f4:	1809      	addeq	r1, r1, r0
 80048f6:	6021      	streq	r1, [r4, #0]
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	6054      	str	r4, [r2, #4]
 80048fc:	e7cb      	b.n	8004896 <_free_r+0x22>
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200002a0 	.word	0x200002a0

08004904 <pow>:
 8004904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004908:	4614      	mov	r4, r2
 800490a:	461d      	mov	r5, r3
 800490c:	4680      	mov	r8, r0
 800490e:	4689      	mov	r9, r1
 8004910:	f000 fa6a 	bl	8004de8 <__ieee754_pow>
 8004914:	4622      	mov	r2, r4
 8004916:	4606      	mov	r6, r0
 8004918:	460f      	mov	r7, r1
 800491a:	462b      	mov	r3, r5
 800491c:	4620      	mov	r0, r4
 800491e:	4629      	mov	r1, r5
 8004920:	f7fc f86c 	bl	80009fc <__aeabi_dcmpun>
 8004924:	bbc8      	cbnz	r0, 800499a <pow+0x96>
 8004926:	2200      	movs	r2, #0
 8004928:	2300      	movs	r3, #0
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fc f833 	bl	8000998 <__aeabi_dcmpeq>
 8004932:	b1b8      	cbz	r0, 8004964 <pow+0x60>
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4620      	mov	r0, r4
 800493a:	4629      	mov	r1, r5
 800493c:	f7fc f82c 	bl	8000998 <__aeabi_dcmpeq>
 8004940:	2800      	cmp	r0, #0
 8004942:	d141      	bne.n	80049c8 <pow+0xc4>
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	f000 f8d0 	bl	8004aec <finite>
 800494c:	b328      	cbz	r0, 800499a <pow+0x96>
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f829 	bl	80009ac <__aeabi_dcmplt>
 800495a:	b1f0      	cbz	r0, 800499a <pow+0x96>
 800495c:	f7ff ff5e 	bl	800481c <__errno>
 8004960:	2322      	movs	r3, #34	; 0x22
 8004962:	e019      	b.n	8004998 <pow+0x94>
 8004964:	4630      	mov	r0, r6
 8004966:	4639      	mov	r1, r7
 8004968:	f000 f8c0 	bl	8004aec <finite>
 800496c:	b9c8      	cbnz	r0, 80049a2 <pow+0x9e>
 800496e:	4640      	mov	r0, r8
 8004970:	4649      	mov	r1, r9
 8004972:	f000 f8bb 	bl	8004aec <finite>
 8004976:	b1a0      	cbz	r0, 80049a2 <pow+0x9e>
 8004978:	4620      	mov	r0, r4
 800497a:	4629      	mov	r1, r5
 800497c:	f000 f8b6 	bl	8004aec <finite>
 8004980:	b178      	cbz	r0, 80049a2 <pow+0x9e>
 8004982:	4632      	mov	r2, r6
 8004984:	463b      	mov	r3, r7
 8004986:	4630      	mov	r0, r6
 8004988:	4639      	mov	r1, r7
 800498a:	f7fc f837 	bl	80009fc <__aeabi_dcmpun>
 800498e:	2800      	cmp	r0, #0
 8004990:	d0e4      	beq.n	800495c <pow+0x58>
 8004992:	f7ff ff43 	bl	800481c <__errno>
 8004996:	2321      	movs	r3, #33	; 0x21
 8004998:	6003      	str	r3, [r0, #0]
 800499a:	4630      	mov	r0, r6
 800499c:	4639      	mov	r1, r7
 800499e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a2:	2200      	movs	r2, #0
 80049a4:	2300      	movs	r3, #0
 80049a6:	4630      	mov	r0, r6
 80049a8:	4639      	mov	r1, r7
 80049aa:	f7fb fff5 	bl	8000998 <__aeabi_dcmpeq>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d0f3      	beq.n	800499a <pow+0x96>
 80049b2:	4640      	mov	r0, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	f000 f899 	bl	8004aec <finite>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d0ed      	beq.n	800499a <pow+0x96>
 80049be:	4620      	mov	r0, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	f000 f893 	bl	8004aec <finite>
 80049c6:	e7c8      	b.n	800495a <pow+0x56>
 80049c8:	2600      	movs	r6, #0
 80049ca:	4f01      	ldr	r7, [pc, #4]	; (80049d0 <pow+0xcc>)
 80049cc:	e7e5      	b.n	800499a <pow+0x96>
 80049ce:	bf00      	nop
 80049d0:	3ff00000 	.word	0x3ff00000

080049d4 <cos>:
 80049d4:	b530      	push	{r4, r5, lr}
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <cos+0x84>)
 80049d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049dc:	4293      	cmp	r3, r2
 80049de:	b087      	sub	sp, #28
 80049e0:	dc06      	bgt.n	80049f0 <cos+0x1c>
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	b007      	add	sp, #28
 80049e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049ec:	f000 b884 	b.w	8004af8 <__kernel_cos>
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <cos+0x88>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	dd05      	ble.n	8004a02 <cos+0x2e>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	f7fb fbad 	bl	8000158 <__aeabi_dsub>
 80049fe:	b007      	add	sp, #28
 8004a00:	bd30      	pop	{r4, r5, pc}
 8004a02:	aa02      	add	r2, sp, #8
 8004a04:	f000 ff08 	bl	8005818 <__ieee754_rem_pio2>
 8004a08:	f000 0003 	and.w	r0, r0, #3
 8004a0c:	2801      	cmp	r0, #1
 8004a0e:	d009      	beq.n	8004a24 <cos+0x50>
 8004a10:	2802      	cmp	r0, #2
 8004a12:	d011      	beq.n	8004a38 <cos+0x64>
 8004a14:	b9b8      	cbnz	r0, 8004a46 <cos+0x72>
 8004a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1e:	f000 f86b 	bl	8004af8 <__kernel_cos>
 8004a22:	e7ec      	b.n	80049fe <cos+0x2a>
 8004a24:	9000      	str	r0, [sp, #0]
 8004a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2e:	f000 f923 	bl	8004c78 <__kernel_sin>
 8004a32:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004a36:	e7e2      	b.n	80049fe <cos+0x2a>
 8004a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a40:	f000 f85a 	bl	8004af8 <__kernel_cos>
 8004a44:	e7f5      	b.n	8004a32 <cos+0x5e>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a52:	f000 f911 	bl	8004c78 <__kernel_sin>
 8004a56:	e7d2      	b.n	80049fe <cos+0x2a>
 8004a58:	3fe921fb 	.word	0x3fe921fb
 8004a5c:	7fefffff 	.word	0x7fefffff

08004a60 <sin>:
 8004a60:	b530      	push	{r4, r5, lr}
 8004a62:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <sin+0x84>)
 8004a64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	dc06      	bgt.n	8004a7c <sin+0x1c>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2200      	movs	r2, #0
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	f000 f8ff 	bl	8004c78 <__kernel_sin>
 8004a7a:	e006      	b.n	8004a8a <sin+0x2a>
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <sin+0x88>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	dd05      	ble.n	8004a8e <sin+0x2e>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	f7fb fb67 	bl	8000158 <__aeabi_dsub>
 8004a8a:	b007      	add	sp, #28
 8004a8c:	bd30      	pop	{r4, r5, pc}
 8004a8e:	aa02      	add	r2, sp, #8
 8004a90:	f000 fec2 	bl	8005818 <__ieee754_rem_pio2>
 8004a94:	f000 0003 	and.w	r0, r0, #3
 8004a98:	2801      	cmp	r0, #1
 8004a9a:	d009      	beq.n	8004ab0 <sin+0x50>
 8004a9c:	2802      	cmp	r0, #2
 8004a9e:	d00e      	beq.n	8004abe <sin+0x5e>
 8004aa0:	b9c0      	cbnz	r0, 8004ad4 <sin+0x74>
 8004aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aae:	e7e2      	b.n	8004a76 <sin+0x16>
 8004ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab8:	f000 f81e 	bl	8004af8 <__kernel_cos>
 8004abc:	e7e5      	b.n	8004a8a <sin+0x2a>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aca:	f000 f8d5 	bl	8004c78 <__kernel_sin>
 8004ace:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004ad2:	e7da      	b.n	8004a8a <sin+0x2a>
 8004ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004adc:	f000 f80c 	bl	8004af8 <__kernel_cos>
 8004ae0:	e7f5      	b.n	8004ace <sin+0x6e>
 8004ae2:	bf00      	nop
 8004ae4:	3fe921fb 	.word	0x3fe921fb
 8004ae8:	7fefffff 	.word	0x7fefffff

08004aec <finite>:
 8004aec:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004af0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004af4:	0fc0      	lsrs	r0, r0, #31
 8004af6:	4770      	bx	lr

08004af8 <__kernel_cos>:
 8004af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004b00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004b04:	4680      	mov	r8, r0
 8004b06:	460f      	mov	r7, r1
 8004b08:	e9cd 2300 	strd	r2, r3, [sp]
 8004b0c:	da04      	bge.n	8004b18 <__kernel_cos+0x20>
 8004b0e:	f7fb ff8b 	bl	8000a28 <__aeabi_d2iz>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f000 8086 	beq.w	8004c24 <__kernel_cos+0x12c>
 8004b18:	4642      	mov	r2, r8
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	4639      	mov	r1, r7
 8004b20:	f7fb fcd2 	bl	80004c8 <__aeabi_dmul>
 8004b24:	2200      	movs	r2, #0
 8004b26:	4b4e      	ldr	r3, [pc, #312]	; (8004c60 <__kernel_cos+0x168>)
 8004b28:	4604      	mov	r4, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	f7fb fccc 	bl	80004c8 <__aeabi_dmul>
 8004b30:	a33f      	add	r3, pc, #252	; (adr r3, 8004c30 <__kernel_cos+0x138>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	4682      	mov	sl, r0
 8004b38:	468b      	mov	fp, r1
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f7fb fcc3 	bl	80004c8 <__aeabi_dmul>
 8004b42:	a33d      	add	r3, pc, #244	; (adr r3, 8004c38 <__kernel_cos+0x140>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fb08 	bl	800015c <__adddf3>
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	462b      	mov	r3, r5
 8004b50:	f7fb fcba 	bl	80004c8 <__aeabi_dmul>
 8004b54:	a33a      	add	r3, pc, #232	; (adr r3, 8004c40 <__kernel_cos+0x148>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fafd 	bl	8000158 <__aeabi_dsub>
 8004b5e:	4622      	mov	r2, r4
 8004b60:	462b      	mov	r3, r5
 8004b62:	f7fb fcb1 	bl	80004c8 <__aeabi_dmul>
 8004b66:	a338      	add	r3, pc, #224	; (adr r3, 8004c48 <__kernel_cos+0x150>)
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f7fb faf6 	bl	800015c <__adddf3>
 8004b70:	4622      	mov	r2, r4
 8004b72:	462b      	mov	r3, r5
 8004b74:	f7fb fca8 	bl	80004c8 <__aeabi_dmul>
 8004b78:	a335      	add	r3, pc, #212	; (adr r3, 8004c50 <__kernel_cos+0x158>)
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f7fb faeb 	bl	8000158 <__aeabi_dsub>
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	f7fb fc9f 	bl	80004c8 <__aeabi_dmul>
 8004b8a:	a333      	add	r3, pc, #204	; (adr r3, 8004c58 <__kernel_cos+0x160>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fae4 	bl	800015c <__adddf3>
 8004b94:	4622      	mov	r2, r4
 8004b96:	462b      	mov	r3, r5
 8004b98:	f7fb fc96 	bl	80004c8 <__aeabi_dmul>
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	f7fb fc92 	bl	80004c8 <__aeabi_dmul>
 8004ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ba8:	4604      	mov	r4, r0
 8004baa:	460d      	mov	r5, r1
 8004bac:	4640      	mov	r0, r8
 8004bae:	4639      	mov	r1, r7
 8004bb0:	f7fb fc8a 	bl	80004c8 <__aeabi_dmul>
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7fb facc 	bl	8000158 <__aeabi_dsub>
 8004bc0:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <__kernel_cos+0x16c>)
 8004bc2:	4680      	mov	r8, r0
 8004bc4:	429e      	cmp	r6, r3
 8004bc6:	4689      	mov	r9, r1
 8004bc8:	dc0e      	bgt.n	8004be8 <__kernel_cos+0xf0>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4650      	mov	r0, sl
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	f7fb fac1 	bl	8000158 <__aeabi_dsub>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	2000      	movs	r0, #0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4922      	ldr	r1, [pc, #136]	; (8004c68 <__kernel_cos+0x170>)
 8004bde:	f7fb fabb 	bl	8000158 <__aeabi_dsub>
 8004be2:	b003      	add	sp, #12
 8004be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be8:	2400      	movs	r4, #0
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <__kernel_cos+0x174>)
 8004bec:	4622      	mov	r2, r4
 8004bee:	429e      	cmp	r6, r3
 8004bf0:	bfcc      	ite	gt
 8004bf2:	4d1f      	ldrgt	r5, [pc, #124]	; (8004c70 <__kernel_cos+0x178>)
 8004bf4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	491a      	ldr	r1, [pc, #104]	; (8004c68 <__kernel_cos+0x170>)
 8004bfe:	f7fb faab 	bl	8000158 <__aeabi_dsub>
 8004c02:	4622      	mov	r2, r4
 8004c04:	4606      	mov	r6, r0
 8004c06:	460f      	mov	r7, r1
 8004c08:	462b      	mov	r3, r5
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	f7fb faa3 	bl	8000158 <__aeabi_dsub>
 8004c12:	4642      	mov	r2, r8
 8004c14:	464b      	mov	r3, r9
 8004c16:	f7fb fa9f 	bl	8000158 <__aeabi_dsub>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4630      	mov	r0, r6
 8004c20:	4639      	mov	r1, r7
 8004c22:	e7dc      	b.n	8004bde <__kernel_cos+0xe6>
 8004c24:	2000      	movs	r0, #0
 8004c26:	4910      	ldr	r1, [pc, #64]	; (8004c68 <__kernel_cos+0x170>)
 8004c28:	e7db      	b.n	8004be2 <__kernel_cos+0xea>
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w
 8004c30:	be8838d4 	.word	0xbe8838d4
 8004c34:	bda8fae9 	.word	0xbda8fae9
 8004c38:	bdb4b1c4 	.word	0xbdb4b1c4
 8004c3c:	3e21ee9e 	.word	0x3e21ee9e
 8004c40:	809c52ad 	.word	0x809c52ad
 8004c44:	3e927e4f 	.word	0x3e927e4f
 8004c48:	19cb1590 	.word	0x19cb1590
 8004c4c:	3efa01a0 	.word	0x3efa01a0
 8004c50:	16c15177 	.word	0x16c15177
 8004c54:	3f56c16c 	.word	0x3f56c16c
 8004c58:	5555554c 	.word	0x5555554c
 8004c5c:	3fa55555 	.word	0x3fa55555
 8004c60:	3fe00000 	.word	0x3fe00000
 8004c64:	3fd33332 	.word	0x3fd33332
 8004c68:	3ff00000 	.word	0x3ff00000
 8004c6c:	3fe90000 	.word	0x3fe90000
 8004c70:	3fd20000 	.word	0x3fd20000
 8004c74:	00000000 	.word	0x00000000

08004c78 <__kernel_sin>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	e9cd 2300 	strd	r2, r3, [sp]
 8004c82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c86:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004c8a:	4682      	mov	sl, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004c90:	da03      	bge.n	8004c9a <__kernel_sin+0x22>
 8004c92:	f7fb fec9 	bl	8000a28 <__aeabi_d2iz>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d050      	beq.n	8004d3c <__kernel_sin+0xc4>
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	4650      	mov	r0, sl
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	f7fb fc11 	bl	80004c8 <__aeabi_dmul>
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	460f      	mov	r7, r1
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4650      	mov	r0, sl
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f7fb fc09 	bl	80004c8 <__aeabi_dmul>
 8004cb6:	a33e      	add	r3, pc, #248	; (adr r3, 8004db0 <__kernel_sin+0x138>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4689      	mov	r9, r1
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb fc00 	bl	80004c8 <__aeabi_dmul>
 8004cc8:	a33b      	add	r3, pc, #236	; (adr r3, 8004db8 <__kernel_sin+0x140>)
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f7fb fa43 	bl	8000158 <__aeabi_dsub>
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	f7fb fbf7 	bl	80004c8 <__aeabi_dmul>
 8004cda:	a339      	add	r3, pc, #228	; (adr r3, 8004dc0 <__kernel_sin+0x148>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fa3c 	bl	800015c <__adddf3>
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	f7fb fbee 	bl	80004c8 <__aeabi_dmul>
 8004cec:	a336      	add	r3, pc, #216	; (adr r3, 8004dc8 <__kernel_sin+0x150>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f7fb fa31 	bl	8000158 <__aeabi_dsub>
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	f7fb fbe5 	bl	80004c8 <__aeabi_dmul>
 8004cfe:	a334      	add	r3, pc, #208	; (adr r3, 8004dd0 <__kernel_sin+0x158>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f7fb fa2a 	bl	800015c <__adddf3>
 8004d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d0c:	b9dd      	cbnz	r5, 8004d46 <__kernel_sin+0xce>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb fbd7 	bl	80004c8 <__aeabi_dmul>
 8004d1a:	a32f      	add	r3, pc, #188	; (adr r3, 8004dd8 <__kernel_sin+0x160>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fa1a 	bl	8000158 <__aeabi_dsub>
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	f7fb fbce 	bl	80004c8 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4650      	mov	r0, sl
 8004d32:	4621      	mov	r1, r4
 8004d34:	f7fb fa12 	bl	800015c <__adddf3>
 8004d38:	4682      	mov	sl, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	4621      	mov	r1, r4
 8004d40:	b006      	add	sp, #24
 8004d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d46:	2200      	movs	r2, #0
 8004d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d4c:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <__kernel_sin+0x168>)
 8004d4e:	f7fb fbbb 	bl	80004c8 <__aeabi_dmul>
 8004d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	f7fb fbb3 	bl	80004c8 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d6a:	f7fb f9f5 	bl	8000158 <__aeabi_dsub>
 8004d6e:	4632      	mov	r2, r6
 8004d70:	463b      	mov	r3, r7
 8004d72:	f7fb fba9 	bl	80004c8 <__aeabi_dmul>
 8004d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d7a:	f7fb f9ed 	bl	8000158 <__aeabi_dsub>
 8004d7e:	a316      	add	r3, pc, #88	; (adr r3, 8004dd8 <__kernel_sin+0x160>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	4606      	mov	r6, r0
 8004d86:	460f      	mov	r7, r1
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f7fb fb9c 	bl	80004c8 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4630      	mov	r0, r6
 8004d96:	4639      	mov	r1, r7
 8004d98:	f7fb f9e0 	bl	800015c <__adddf3>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4650      	mov	r0, sl
 8004da2:	4621      	mov	r1, r4
 8004da4:	f7fb f9d8 	bl	8000158 <__aeabi_dsub>
 8004da8:	e7c6      	b.n	8004d38 <__kernel_sin+0xc0>
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w
 8004db0:	5acfd57c 	.word	0x5acfd57c
 8004db4:	3de5d93a 	.word	0x3de5d93a
 8004db8:	8a2b9ceb 	.word	0x8a2b9ceb
 8004dbc:	3e5ae5e6 	.word	0x3e5ae5e6
 8004dc0:	57b1fe7d 	.word	0x57b1fe7d
 8004dc4:	3ec71de3 	.word	0x3ec71de3
 8004dc8:	19c161d5 	.word	0x19c161d5
 8004dcc:	3f2a01a0 	.word	0x3f2a01a0
 8004dd0:	1110f8a6 	.word	0x1110f8a6
 8004dd4:	3f811111 	.word	0x3f811111
 8004dd8:	55555549 	.word	0x55555549
 8004ddc:	3fc55555 	.word	0x3fc55555
 8004de0:	3fe00000 	.word	0x3fe00000
 8004de4:	00000000 	.word	0x00000000

08004de8 <__ieee754_pow>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	b093      	sub	sp, #76	; 0x4c
 8004dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004df2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004df6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	ea56 0102 	orrs.w	r1, r6, r2
 8004e00:	4680      	mov	r8, r0
 8004e02:	d111      	bne.n	8004e28 <__ieee754_pow+0x40>
 8004e04:	1803      	adds	r3, r0, r0
 8004e06:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004e0a:	4152      	adcs	r2, r2
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	4b82      	ldr	r3, [pc, #520]	; (8005018 <__ieee754_pow+0x230>)
 8004e10:	4193      	sbcs	r3, r2
 8004e12:	f080 84ba 	bcs.w	800578a <__ieee754_pow+0x9a2>
 8004e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	f7fb f99d 	bl	800015c <__adddf3>
 8004e22:	4683      	mov	fp, r0
 8004e24:	468c      	mov	ip, r1
 8004e26:	e06f      	b.n	8004f08 <__ieee754_pow+0x120>
 8004e28:	4b7c      	ldr	r3, [pc, #496]	; (800501c <__ieee754_pow+0x234>)
 8004e2a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	464d      	mov	r5, r9
 8004e32:	4682      	mov	sl, r0
 8004e34:	dc06      	bgt.n	8004e44 <__ieee754_pow+0x5c>
 8004e36:	d101      	bne.n	8004e3c <__ieee754_pow+0x54>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d1ec      	bne.n	8004e16 <__ieee754_pow+0x2e>
 8004e3c:	429e      	cmp	r6, r3
 8004e3e:	dc01      	bgt.n	8004e44 <__ieee754_pow+0x5c>
 8004e40:	d10f      	bne.n	8004e62 <__ieee754_pow+0x7a>
 8004e42:	b172      	cbz	r2, 8004e62 <__ieee754_pow+0x7a>
 8004e44:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004e48:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004e4c:	ea55 050a 	orrs.w	r5, r5, sl
 8004e50:	d1e1      	bne.n	8004e16 <__ieee754_pow+0x2e>
 8004e52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004e56:	18db      	adds	r3, r3, r3
 8004e58:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004e5c:	4152      	adcs	r2, r2
 8004e5e:	429d      	cmp	r5, r3
 8004e60:	e7d5      	b.n	8004e0e <__ieee754_pow+0x26>
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	da39      	bge.n	8004eda <__ieee754_pow+0xf2>
 8004e66:	4b6e      	ldr	r3, [pc, #440]	; (8005020 <__ieee754_pow+0x238>)
 8004e68:	429e      	cmp	r6, r3
 8004e6a:	dc52      	bgt.n	8004f12 <__ieee754_pow+0x12a>
 8004e6c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004e70:	429e      	cmp	r6, r3
 8004e72:	f340 849d 	ble.w	80057b0 <__ieee754_pow+0x9c8>
 8004e76:	1533      	asrs	r3, r6, #20
 8004e78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e7c:	2b14      	cmp	r3, #20
 8004e7e:	dd0f      	ble.n	8004ea0 <__ieee754_pow+0xb8>
 8004e80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004e84:	fa22 f103 	lsr.w	r1, r2, r3
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	f040 848f 	bne.w	80057b0 <__ieee754_pow+0x9c8>
 8004e92:	f001 0101 	and.w	r1, r1, #1
 8004e96:	f1c1 0302 	rsb	r3, r1, #2
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	b182      	cbz	r2, 8004ec0 <__ieee754_pow+0xd8>
 8004e9e:	e05d      	b.n	8004f5c <__ieee754_pow+0x174>
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d159      	bne.n	8004f58 <__ieee754_pow+0x170>
 8004ea4:	f1c3 0314 	rsb	r3, r3, #20
 8004ea8:	fa46 f103 	asr.w	r1, r6, r3
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	42b3      	cmp	r3, r6
 8004eb2:	f040 847a 	bne.w	80057aa <__ieee754_pow+0x9c2>
 8004eb6:	f001 0101 	and.w	r1, r1, #1
 8004eba:	f1c1 0302 	rsb	r3, r1, #2
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4b58      	ldr	r3, [pc, #352]	; (8005024 <__ieee754_pow+0x23c>)
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	d132      	bne.n	8004f2c <__ieee754_pow+0x144>
 8004ec6:	2f00      	cmp	r7, #0
 8004ec8:	f280 846b 	bge.w	80057a2 <__ieee754_pow+0x9ba>
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	4954      	ldr	r1, [pc, #336]	; (8005024 <__ieee754_pow+0x23c>)
 8004ed4:	f7fb fc22 	bl	800071c <__aeabi_ddiv>
 8004ed8:	e7a3      	b.n	8004e22 <__ieee754_pow+0x3a>
 8004eda:	2300      	movs	r3, #0
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d13c      	bne.n	8004f5c <__ieee754_pow+0x174>
 8004ee2:	4b4e      	ldr	r3, [pc, #312]	; (800501c <__ieee754_pow+0x234>)
 8004ee4:	429e      	cmp	r6, r3
 8004ee6:	d1eb      	bne.n	8004ec0 <__ieee754_pow+0xd8>
 8004ee8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004eec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8004ef4:	f000 8449 	beq.w	800578a <__ieee754_pow+0x9a2>
 8004ef8:	4b4b      	ldr	r3, [pc, #300]	; (8005028 <__ieee754_pow+0x240>)
 8004efa:	429c      	cmp	r4, r3
 8004efc:	dd0b      	ble.n	8004f16 <__ieee754_pow+0x12e>
 8004efe:	2f00      	cmp	r7, #0
 8004f00:	f2c0 8449 	blt.w	8005796 <__ieee754_pow+0x9ae>
 8004f04:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004f08:	4658      	mov	r0, fp
 8004f0a:	4661      	mov	r1, ip
 8004f0c:	b013      	add	sp, #76	; 0x4c
 8004f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f12:	2302      	movs	r3, #2
 8004f14:	e7e2      	b.n	8004edc <__ieee754_pow+0xf4>
 8004f16:	2f00      	cmp	r7, #0
 8004f18:	f04f 0b00 	mov.w	fp, #0
 8004f1c:	f04f 0c00 	mov.w	ip, #0
 8004f20:	daf2      	bge.n	8004f08 <__ieee754_pow+0x120>
 8004f22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004f26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004f2a:	e7ed      	b.n	8004f08 <__ieee754_pow+0x120>
 8004f2c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004f30:	d106      	bne.n	8004f40 <__ieee754_pow+0x158>
 8004f32:	4642      	mov	r2, r8
 8004f34:	464b      	mov	r3, r9
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb fac5 	bl	80004c8 <__aeabi_dmul>
 8004f3e:	e770      	b.n	8004e22 <__ieee754_pow+0x3a>
 8004f40:	4b3a      	ldr	r3, [pc, #232]	; (800502c <__ieee754_pow+0x244>)
 8004f42:	429f      	cmp	r7, r3
 8004f44:	d10a      	bne.n	8004f5c <__ieee754_pow+0x174>
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	db08      	blt.n	8004f5c <__ieee754_pow+0x174>
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	b013      	add	sp, #76	; 0x4c
 8004f50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	f000 befe 	b.w	8005d54 <__ieee754_sqrt>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	f000 fe4e 	bl	8005c00 <fabs>
 8004f64:	4683      	mov	fp, r0
 8004f66:	468c      	mov	ip, r1
 8004f68:	f1ba 0f00 	cmp.w	sl, #0
 8004f6c:	d128      	bne.n	8004fc0 <__ieee754_pow+0x1d8>
 8004f6e:	b124      	cbz	r4, 8004f7a <__ieee754_pow+0x192>
 8004f70:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <__ieee754_pow+0x23c>)
 8004f72:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d122      	bne.n	8004fc0 <__ieee754_pow+0x1d8>
 8004f7a:	2f00      	cmp	r7, #0
 8004f7c:	da07      	bge.n	8004f8e <__ieee754_pow+0x1a6>
 8004f7e:	465a      	mov	r2, fp
 8004f80:	4663      	mov	r3, ip
 8004f82:	2000      	movs	r0, #0
 8004f84:	4927      	ldr	r1, [pc, #156]	; (8005024 <__ieee754_pow+0x23c>)
 8004f86:	f7fb fbc9 	bl	800071c <__aeabi_ddiv>
 8004f8a:	4683      	mov	fp, r0
 8004f8c:	468c      	mov	ip, r1
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	daba      	bge.n	8004f08 <__ieee754_pow+0x120>
 8004f92:	9b00      	ldr	r3, [sp, #0]
 8004f94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f9c:	431c      	orrs	r4, r3
 8004f9e:	d108      	bne.n	8004fb2 <__ieee754_pow+0x1ca>
 8004fa0:	465a      	mov	r2, fp
 8004fa2:	4663      	mov	r3, ip
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	4661      	mov	r1, ip
 8004fa8:	f7fb f8d6 	bl	8000158 <__aeabi_dsub>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	e790      	b.n	8004ed4 <__ieee754_pow+0xec>
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d1a7      	bne.n	8004f08 <__ieee754_pow+0x120>
 8004fb8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004fbc:	469c      	mov	ip, r3
 8004fbe:	e7a3      	b.n	8004f08 <__ieee754_pow+0x120>
 8004fc0:	0feb      	lsrs	r3, r5, #31
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8004fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fc8:	9b00      	ldr	r3, [sp, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	d104      	bne.n	8004fd8 <__ieee754_pow+0x1f0>
 8004fce:	4642      	mov	r2, r8
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	e7e7      	b.n	8004fa8 <__ieee754_pow+0x1c0>
 8004fd8:	4b15      	ldr	r3, [pc, #84]	; (8005030 <__ieee754_pow+0x248>)
 8004fda:	429e      	cmp	r6, r3
 8004fdc:	f340 80f6 	ble.w	80051cc <__ieee754_pow+0x3e4>
 8004fe0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004fe4:	429e      	cmp	r6, r3
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <__ieee754_pow+0x240>)
 8004fe8:	dd09      	ble.n	8004ffe <__ieee754_pow+0x216>
 8004fea:	429c      	cmp	r4, r3
 8004fec:	dc0c      	bgt.n	8005008 <__ieee754_pow+0x220>
 8004fee:	2f00      	cmp	r7, #0
 8004ff0:	da0c      	bge.n	800500c <__ieee754_pow+0x224>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	b013      	add	sp, #76	; 0x4c
 8004ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f000 bea6 	b.w	8005d4a <__math_oflow>
 8004ffe:	429c      	cmp	r4, r3
 8005000:	dbf5      	blt.n	8004fee <__ieee754_pow+0x206>
 8005002:	4b08      	ldr	r3, [pc, #32]	; (8005024 <__ieee754_pow+0x23c>)
 8005004:	429c      	cmp	r4, r3
 8005006:	dd15      	ble.n	8005034 <__ieee754_pow+0x24c>
 8005008:	2f00      	cmp	r7, #0
 800500a:	dcf2      	bgt.n	8004ff2 <__ieee754_pow+0x20a>
 800500c:	2000      	movs	r0, #0
 800500e:	b013      	add	sp, #76	; 0x4c
 8005010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	f000 be94 	b.w	8005d40 <__math_uflow>
 8005018:	fff00000 	.word	0xfff00000
 800501c:	7ff00000 	.word	0x7ff00000
 8005020:	433fffff 	.word	0x433fffff
 8005024:	3ff00000 	.word	0x3ff00000
 8005028:	3fefffff 	.word	0x3fefffff
 800502c:	3fe00000 	.word	0x3fe00000
 8005030:	41e00000 	.word	0x41e00000
 8005034:	4661      	mov	r1, ip
 8005036:	2200      	movs	r2, #0
 8005038:	4658      	mov	r0, fp
 800503a:	4b5f      	ldr	r3, [pc, #380]	; (80051b8 <__ieee754_pow+0x3d0>)
 800503c:	f7fb f88c 	bl	8000158 <__aeabi_dsub>
 8005040:	a355      	add	r3, pc, #340	; (adr r3, 8005198 <__ieee754_pow+0x3b0>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	4604      	mov	r4, r0
 8005048:	460d      	mov	r5, r1
 800504a:	f7fb fa3d 	bl	80004c8 <__aeabi_dmul>
 800504e:	a354      	add	r3, pc, #336	; (adr r3, 80051a0 <__ieee754_pow+0x3b8>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	4606      	mov	r6, r0
 8005056:	460f      	mov	r7, r1
 8005058:	4620      	mov	r0, r4
 800505a:	4629      	mov	r1, r5
 800505c:	f7fb fa34 	bl	80004c8 <__aeabi_dmul>
 8005060:	2200      	movs	r2, #0
 8005062:	4682      	mov	sl, r0
 8005064:	468b      	mov	fp, r1
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <__ieee754_pow+0x3d4>)
 800506c:	f7fb fa2c 	bl	80004c8 <__aeabi_dmul>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	a14c      	add	r1, pc, #304	; (adr r1, 80051a8 <__ieee754_pow+0x3c0>)
 8005076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800507a:	f7fb f86d 	bl	8000158 <__aeabi_dsub>
 800507e:	4622      	mov	r2, r4
 8005080:	462b      	mov	r3, r5
 8005082:	f7fb fa21 	bl	80004c8 <__aeabi_dmul>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	2000      	movs	r0, #0
 800508c:	494c      	ldr	r1, [pc, #304]	; (80051c0 <__ieee754_pow+0x3d8>)
 800508e:	f7fb f863 	bl	8000158 <__aeabi_dsub>
 8005092:	4622      	mov	r2, r4
 8005094:	462b      	mov	r3, r5
 8005096:	4680      	mov	r8, r0
 8005098:	4689      	mov	r9, r1
 800509a:	4620      	mov	r0, r4
 800509c:	4629      	mov	r1, r5
 800509e:	f7fb fa13 	bl	80004c8 <__aeabi_dmul>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb fa0d 	bl	80004c8 <__aeabi_dmul>
 80050ae:	a340      	add	r3, pc, #256	; (adr r3, 80051b0 <__ieee754_pow+0x3c8>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f7fb fa08 	bl	80004c8 <__aeabi_dmul>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4650      	mov	r0, sl
 80050be:	4659      	mov	r1, fp
 80050c0:	f7fb f84a 	bl	8000158 <__aeabi_dsub>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4604      	mov	r4, r0
 80050ca:	460d      	mov	r5, r1
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb f844 	bl	800015c <__adddf3>
 80050d4:	2000      	movs	r0, #0
 80050d6:	4632      	mov	r2, r6
 80050d8:	463b      	mov	r3, r7
 80050da:	4682      	mov	sl, r0
 80050dc:	468b      	mov	fp, r1
 80050de:	f7fb f83b 	bl	8000158 <__aeabi_dsub>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4620      	mov	r0, r4
 80050e8:	4629      	mov	r1, r5
 80050ea:	f7fb f835 	bl	8000158 <__aeabi_dsub>
 80050ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050f6:	3b01      	subs	r3, #1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f04f 0600 	mov.w	r6, #0
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	bf0c      	ite	eq
 8005104:	4b2f      	ldreq	r3, [pc, #188]	; (80051c4 <__ieee754_pow+0x3dc>)
 8005106:	4b2c      	ldrne	r3, [pc, #176]	; (80051b8 <__ieee754_pow+0x3d0>)
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
 800510c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005110:	e9cd 2300 	strd	r2, r3, [sp]
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	f7fb f81e 	bl	8000158 <__aeabi_dsub>
 800511c:	4652      	mov	r2, sl
 800511e:	465b      	mov	r3, fp
 8005120:	f7fb f9d2 	bl	80004c8 <__aeabi_dmul>
 8005124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005128:	4680      	mov	r8, r0
 800512a:	4689      	mov	r9, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f9ca 	bl	80004c8 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb f80e 	bl	800015c <__adddf3>
 8005140:	4632      	mov	r2, r6
 8005142:	463b      	mov	r3, r7
 8005144:	4680      	mov	r8, r0
 8005146:	4689      	mov	r9, r1
 8005148:	4650      	mov	r0, sl
 800514a:	4659      	mov	r1, fp
 800514c:	f7fb f9bc 	bl	80004c8 <__aeabi_dmul>
 8005150:	4604      	mov	r4, r0
 8005152:	460d      	mov	r5, r1
 8005154:	460b      	mov	r3, r1
 8005156:	4602      	mov	r2, r0
 8005158:	4649      	mov	r1, r9
 800515a:	4640      	mov	r0, r8
 800515c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005160:	f7fa fffc 	bl	800015c <__adddf3>
 8005164:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <__ieee754_pow+0x3e0>)
 8005166:	4682      	mov	sl, r0
 8005168:	4299      	cmp	r1, r3
 800516a:	460f      	mov	r7, r1
 800516c:	460e      	mov	r6, r1
 800516e:	f340 82e7 	ble.w	8005740 <__ieee754_pow+0x958>
 8005172:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005176:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800517a:	4303      	orrs	r3, r0
 800517c:	f000 81e2 	beq.w	8005544 <__ieee754_pow+0x75c>
 8005180:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005184:	2200      	movs	r2, #0
 8005186:	2300      	movs	r3, #0
 8005188:	f7fb fc10 	bl	80009ac <__aeabi_dcmplt>
 800518c:	3800      	subs	r0, #0
 800518e:	bf18      	it	ne
 8005190:	2001      	movne	r0, #1
 8005192:	e72f      	b.n	8004ff4 <__ieee754_pow+0x20c>
 8005194:	f3af 8000 	nop.w
 8005198:	60000000 	.word	0x60000000
 800519c:	3ff71547 	.word	0x3ff71547
 80051a0:	f85ddf44 	.word	0xf85ddf44
 80051a4:	3e54ae0b 	.word	0x3e54ae0b
 80051a8:	55555555 	.word	0x55555555
 80051ac:	3fd55555 	.word	0x3fd55555
 80051b0:	652b82fe 	.word	0x652b82fe
 80051b4:	3ff71547 	.word	0x3ff71547
 80051b8:	3ff00000 	.word	0x3ff00000
 80051bc:	3fd00000 	.word	0x3fd00000
 80051c0:	3fe00000 	.word	0x3fe00000
 80051c4:	bff00000 	.word	0xbff00000
 80051c8:	408fffff 	.word	0x408fffff
 80051cc:	4bd4      	ldr	r3, [pc, #848]	; (8005520 <__ieee754_pow+0x738>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	402b      	ands	r3, r5
 80051d2:	b943      	cbnz	r3, 80051e6 <__ieee754_pow+0x3fe>
 80051d4:	4658      	mov	r0, fp
 80051d6:	4661      	mov	r1, ip
 80051d8:	4bd2      	ldr	r3, [pc, #840]	; (8005524 <__ieee754_pow+0x73c>)
 80051da:	f7fb f975 	bl	80004c8 <__aeabi_dmul>
 80051de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80051e2:	4683      	mov	fp, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	1523      	asrs	r3, r4, #20
 80051e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051ec:	4413      	add	r3, r2
 80051ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f0:	4bcd      	ldr	r3, [pc, #820]	; (8005528 <__ieee754_pow+0x740>)
 80051f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051fa:	429c      	cmp	r4, r3
 80051fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005200:	dd08      	ble.n	8005214 <__ieee754_pow+0x42c>
 8005202:	4bca      	ldr	r3, [pc, #808]	; (800552c <__ieee754_pow+0x744>)
 8005204:	429c      	cmp	r4, r3
 8005206:	f340 8164 	ble.w	80054d2 <__ieee754_pow+0x6ea>
 800520a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005210:	3301      	adds	r3, #1
 8005212:	930b      	str	r3, [sp, #44]	; 0x2c
 8005214:	2600      	movs	r6, #0
 8005216:	00f3      	lsls	r3, r6, #3
 8005218:	930d      	str	r3, [sp, #52]	; 0x34
 800521a:	4bc5      	ldr	r3, [pc, #788]	; (8005530 <__ieee754_pow+0x748>)
 800521c:	4658      	mov	r0, fp
 800521e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005226:	4629      	mov	r1, r5
 8005228:	461a      	mov	r2, r3
 800522a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800522e:	4623      	mov	r3, r4
 8005230:	f7fa ff92 	bl	8000158 <__aeabi_dsub>
 8005234:	46da      	mov	sl, fp
 8005236:	462b      	mov	r3, r5
 8005238:	4652      	mov	r2, sl
 800523a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800523e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005242:	f7fa ff8b 	bl	800015c <__adddf3>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	2000      	movs	r0, #0
 800524c:	49b9      	ldr	r1, [pc, #740]	; (8005534 <__ieee754_pow+0x74c>)
 800524e:	f7fb fa65 	bl	800071c <__aeabi_ddiv>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800525a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800525e:	f7fb f933 	bl	80004c8 <__aeabi_dmul>
 8005262:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005266:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800526a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800526e:	2300      	movs	r3, #0
 8005270:	2200      	movs	r2, #0
 8005272:	46ab      	mov	fp, r5
 8005274:	106d      	asrs	r5, r5, #1
 8005276:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005280:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005284:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005288:	4640      	mov	r0, r8
 800528a:	4649      	mov	r1, r9
 800528c:	4614      	mov	r4, r2
 800528e:	461d      	mov	r5, r3
 8005290:	f7fb f91a 	bl	80004c8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800529c:	f7fa ff5c 	bl	8000158 <__aeabi_dsub>
 80052a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052a4:	4606      	mov	r6, r0
 80052a6:	460f      	mov	r7, r1
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fa ff54 	bl	8000158 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4650      	mov	r0, sl
 80052b6:	4659      	mov	r1, fp
 80052b8:	f7fa ff4e 	bl	8000158 <__aeabi_dsub>
 80052bc:	4642      	mov	r2, r8
 80052be:	464b      	mov	r3, r9
 80052c0:	f7fb f902 	bl	80004c8 <__aeabi_dmul>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	f7fa ff44 	bl	8000158 <__aeabi_dsub>
 80052d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052d4:	f7fb f8f8 	bl	80004c8 <__aeabi_dmul>
 80052d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052dc:	4682      	mov	sl, r0
 80052de:	468b      	mov	fp, r1
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f7fb f8f0 	bl	80004c8 <__aeabi_dmul>
 80052e8:	a37b      	add	r3, pc, #492	; (adr r3, 80054d8 <__ieee754_pow+0x6f0>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	4604      	mov	r4, r0
 80052f0:	460d      	mov	r5, r1
 80052f2:	f7fb f8e9 	bl	80004c8 <__aeabi_dmul>
 80052f6:	a37a      	add	r3, pc, #488	; (adr r3, 80054e0 <__ieee754_pow+0x6f8>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ff2e 	bl	800015c <__adddf3>
 8005300:	4622      	mov	r2, r4
 8005302:	462b      	mov	r3, r5
 8005304:	f7fb f8e0 	bl	80004c8 <__aeabi_dmul>
 8005308:	a377      	add	r3, pc, #476	; (adr r3, 80054e8 <__ieee754_pow+0x700>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fa ff25 	bl	800015c <__adddf3>
 8005312:	4622      	mov	r2, r4
 8005314:	462b      	mov	r3, r5
 8005316:	f7fb f8d7 	bl	80004c8 <__aeabi_dmul>
 800531a:	a375      	add	r3, pc, #468	; (adr r3, 80054f0 <__ieee754_pow+0x708>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fa ff1c 	bl	800015c <__adddf3>
 8005324:	4622      	mov	r2, r4
 8005326:	462b      	mov	r3, r5
 8005328:	f7fb f8ce 	bl	80004c8 <__aeabi_dmul>
 800532c:	a372      	add	r3, pc, #456	; (adr r3, 80054f8 <__ieee754_pow+0x710>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f7fa ff13 	bl	800015c <__adddf3>
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	f7fb f8c5 	bl	80004c8 <__aeabi_dmul>
 800533e:	a370      	add	r3, pc, #448	; (adr r3, 8005500 <__ieee754_pow+0x718>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fa ff0a 	bl	800015c <__adddf3>
 8005348:	4622      	mov	r2, r4
 800534a:	4606      	mov	r6, r0
 800534c:	460f      	mov	r7, r1
 800534e:	462b      	mov	r3, r5
 8005350:	4620      	mov	r0, r4
 8005352:	4629      	mov	r1, r5
 8005354:	f7fb f8b8 	bl	80004c8 <__aeabi_dmul>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4630      	mov	r0, r6
 800535e:	4639      	mov	r1, r7
 8005360:	f7fb f8b2 	bl	80004c8 <__aeabi_dmul>
 8005364:	4604      	mov	r4, r0
 8005366:	460d      	mov	r5, r1
 8005368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	f7fa fef4 	bl	800015c <__adddf3>
 8005374:	4652      	mov	r2, sl
 8005376:	465b      	mov	r3, fp
 8005378:	f7fb f8a6 	bl	80004c8 <__aeabi_dmul>
 800537c:	4622      	mov	r2, r4
 800537e:	462b      	mov	r3, r5
 8005380:	f7fa feec 	bl	800015c <__adddf3>
 8005384:	4642      	mov	r2, r8
 8005386:	4606      	mov	r6, r0
 8005388:	460f      	mov	r7, r1
 800538a:	464b      	mov	r3, r9
 800538c:	4640      	mov	r0, r8
 800538e:	4649      	mov	r1, r9
 8005390:	f7fb f89a 	bl	80004c8 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800539c:	2200      	movs	r2, #0
 800539e:	4b66      	ldr	r3, [pc, #408]	; (8005538 <__ieee754_pow+0x750>)
 80053a0:	f7fa fedc 	bl	800015c <__adddf3>
 80053a4:	4632      	mov	r2, r6
 80053a6:	463b      	mov	r3, r7
 80053a8:	f7fa fed8 	bl	800015c <__adddf3>
 80053ac:	2400      	movs	r4, #0
 80053ae:	460d      	mov	r5, r1
 80053b0:	4622      	mov	r2, r4
 80053b2:	460b      	mov	r3, r1
 80053b4:	4640      	mov	r0, r8
 80053b6:	4649      	mov	r1, r9
 80053b8:	f7fb f886 	bl	80004c8 <__aeabi_dmul>
 80053bc:	2200      	movs	r2, #0
 80053be:	4680      	mov	r8, r0
 80053c0:	4689      	mov	r9, r1
 80053c2:	4620      	mov	r0, r4
 80053c4:	4629      	mov	r1, r5
 80053c6:	4b5c      	ldr	r3, [pc, #368]	; (8005538 <__ieee754_pow+0x750>)
 80053c8:	f7fa fec6 	bl	8000158 <__aeabi_dsub>
 80053cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053d0:	f7fa fec2 	bl	8000158 <__aeabi_dsub>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4630      	mov	r0, r6
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fa febc 	bl	8000158 <__aeabi_dsub>
 80053e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053e4:	f7fb f870 	bl	80004c8 <__aeabi_dmul>
 80053e8:	4622      	mov	r2, r4
 80053ea:	4606      	mov	r6, r0
 80053ec:	460f      	mov	r7, r1
 80053ee:	462b      	mov	r3, r5
 80053f0:	4650      	mov	r0, sl
 80053f2:	4659      	mov	r1, fp
 80053f4:	f7fb f868 	bl	80004c8 <__aeabi_dmul>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fa feac 	bl	800015c <__adddf3>
 8005404:	2400      	movs	r4, #0
 8005406:	4606      	mov	r6, r0
 8005408:	460f      	mov	r7, r1
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4640      	mov	r0, r8
 8005410:	4649      	mov	r1, r9
 8005412:	f7fa fea3 	bl	800015c <__adddf3>
 8005416:	a33c      	add	r3, pc, #240	; (adr r3, 8005508 <__ieee754_pow+0x720>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	4620      	mov	r0, r4
 800541e:	460d      	mov	r5, r1
 8005420:	f7fb f852 	bl	80004c8 <__aeabi_dmul>
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fa fe92 	bl	8000158 <__aeabi_dsub>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4630      	mov	r0, r6
 800543a:	4639      	mov	r1, r7
 800543c:	f7fa fe8c 	bl	8000158 <__aeabi_dsub>
 8005440:	a333      	add	r3, pc, #204	; (adr r3, 8005510 <__ieee754_pow+0x728>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb f83f 	bl	80004c8 <__aeabi_dmul>
 800544a:	a333      	add	r3, pc, #204	; (adr r3, 8005518 <__ieee754_pow+0x730>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	4606      	mov	r6, r0
 8005452:	460f      	mov	r7, r1
 8005454:	4620      	mov	r0, r4
 8005456:	4629      	mov	r1, r5
 8005458:	f7fb f836 	bl	80004c8 <__aeabi_dmul>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4630      	mov	r0, r6
 8005462:	4639      	mov	r1, r7
 8005464:	f7fa fe7a 	bl	800015c <__adddf3>
 8005468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800546a:	4b34      	ldr	r3, [pc, #208]	; (800553c <__ieee754_pow+0x754>)
 800546c:	4413      	add	r3, r2
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fa fe73 	bl	800015c <__adddf3>
 8005476:	4680      	mov	r8, r0
 8005478:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800547a:	4689      	mov	r9, r1
 800547c:	f7fa ffba 	bl	80003f4 <__aeabi_i2d>
 8005480:	4604      	mov	r4, r0
 8005482:	460d      	mov	r5, r1
 8005484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800548a:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <__ieee754_pow+0x758>)
 800548c:	4413      	add	r3, r2
 800548e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005492:	4642      	mov	r2, r8
 8005494:	464b      	mov	r3, r9
 8005496:	f7fa fe61 	bl	800015c <__adddf3>
 800549a:	4632      	mov	r2, r6
 800549c:	463b      	mov	r3, r7
 800549e:	f7fa fe5d 	bl	800015c <__adddf3>
 80054a2:	4622      	mov	r2, r4
 80054a4:	462b      	mov	r3, r5
 80054a6:	f7fa fe59 	bl	800015c <__adddf3>
 80054aa:	2000      	movs	r0, #0
 80054ac:	4622      	mov	r2, r4
 80054ae:	462b      	mov	r3, r5
 80054b0:	4682      	mov	sl, r0
 80054b2:	468b      	mov	fp, r1
 80054b4:	f7fa fe50 	bl	8000158 <__aeabi_dsub>
 80054b8:	4632      	mov	r2, r6
 80054ba:	463b      	mov	r3, r7
 80054bc:	f7fa fe4c 	bl	8000158 <__aeabi_dsub>
 80054c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054c4:	f7fa fe48 	bl	8000158 <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	e60b      	b.n	80050ea <__ieee754_pow+0x302>
 80054d2:	2601      	movs	r6, #1
 80054d4:	e69f      	b.n	8005216 <__ieee754_pow+0x42e>
 80054d6:	bf00      	nop
 80054d8:	4a454eef 	.word	0x4a454eef
 80054dc:	3fca7e28 	.word	0x3fca7e28
 80054e0:	93c9db65 	.word	0x93c9db65
 80054e4:	3fcd864a 	.word	0x3fcd864a
 80054e8:	a91d4101 	.word	0xa91d4101
 80054ec:	3fd17460 	.word	0x3fd17460
 80054f0:	518f264d 	.word	0x518f264d
 80054f4:	3fd55555 	.word	0x3fd55555
 80054f8:	db6fabff 	.word	0xdb6fabff
 80054fc:	3fdb6db6 	.word	0x3fdb6db6
 8005500:	33333303 	.word	0x33333303
 8005504:	3fe33333 	.word	0x3fe33333
 8005508:	e0000000 	.word	0xe0000000
 800550c:	3feec709 	.word	0x3feec709
 8005510:	dc3a03fd 	.word	0xdc3a03fd
 8005514:	3feec709 	.word	0x3feec709
 8005518:	145b01f5 	.word	0x145b01f5
 800551c:	be3e2fe0 	.word	0xbe3e2fe0
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	43400000 	.word	0x43400000
 8005528:	0003988e 	.word	0x0003988e
 800552c:	000bb679 	.word	0x000bb679
 8005530:	080066c8 	.word	0x080066c8
 8005534:	3ff00000 	.word	0x3ff00000
 8005538:	40080000 	.word	0x40080000
 800553c:	080066e8 	.word	0x080066e8
 8005540:	080066d8 	.word	0x080066d8
 8005544:	a39c      	add	r3, pc, #624	; (adr r3, 80057b8 <__ieee754_pow+0x9d0>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fa fe05 	bl	800015c <__adddf3>
 8005552:	4622      	mov	r2, r4
 8005554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005558:	462b      	mov	r3, r5
 800555a:	4650      	mov	r0, sl
 800555c:	4639      	mov	r1, r7
 800555e:	f7fa fdfb 	bl	8000158 <__aeabi_dsub>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800556a:	f7fb fa3d 	bl	80009e8 <__aeabi_dcmpgt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f47f ae06 	bne.w	8005180 <__ieee754_pow+0x398>
 8005574:	4aa2      	ldr	r2, [pc, #648]	; (8005800 <__ieee754_pow+0xa18>)
 8005576:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800557a:	4293      	cmp	r3, r2
 800557c:	f340 8100 	ble.w	8005780 <__ieee754_pow+0x998>
 8005580:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005584:	151b      	asrs	r3, r3, #20
 8005586:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800558a:	fa4a fa03 	asr.w	sl, sl, r3
 800558e:	44b2      	add	sl, r6
 8005590:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005594:	489b      	ldr	r0, [pc, #620]	; (8005804 <__ieee754_pow+0xa1c>)
 8005596:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800559a:	4108      	asrs	r0, r1
 800559c:	ea00 030a 	and.w	r3, r0, sl
 80055a0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80055a4:	f1c1 0114 	rsb	r1, r1, #20
 80055a8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80055ac:	fa4a fa01 	asr.w	sl, sl, r1
 80055b0:	2e00      	cmp	r6, #0
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	4620      	mov	r0, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	bfb8      	it	lt
 80055bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80055c0:	f7fa fdca 	bl	8000158 <__aeabi_dsub>
 80055c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055cc:	2400      	movs	r4, #0
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	f7fa fdc3 	bl	800015c <__adddf3>
 80055d6:	a37a      	add	r3, pc, #488	; (adr r3, 80057c0 <__ieee754_pow+0x9d8>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	4620      	mov	r0, r4
 80055de:	460d      	mov	r5, r1
 80055e0:	f7fa ff72 	bl	80004c8 <__aeabi_dmul>
 80055e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e8:	4606      	mov	r6, r0
 80055ea:	460f      	mov	r7, r1
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	f7fa fdb2 	bl	8000158 <__aeabi_dsub>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fa fdac 	bl	8000158 <__aeabi_dsub>
 8005600:	a371      	add	r3, pc, #452	; (adr r3, 80057c8 <__ieee754_pow+0x9e0>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa ff5f 	bl	80004c8 <__aeabi_dmul>
 800560a:	a371      	add	r3, pc, #452	; (adr r3, 80057d0 <__ieee754_pow+0x9e8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	4680      	mov	r8, r0
 8005612:	4689      	mov	r9, r1
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7fa ff56 	bl	80004c8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa fd9a 	bl	800015c <__adddf3>
 8005628:	4604      	mov	r4, r0
 800562a:	460d      	mov	r5, r1
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa fd92 	bl	800015c <__adddf3>
 8005638:	4632      	mov	r2, r6
 800563a:	463b      	mov	r3, r7
 800563c:	4680      	mov	r8, r0
 800563e:	4689      	mov	r9, r1
 8005640:	f7fa fd8a 	bl	8000158 <__aeabi_dsub>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4620      	mov	r0, r4
 800564a:	4629      	mov	r1, r5
 800564c:	f7fa fd84 	bl	8000158 <__aeabi_dsub>
 8005650:	4642      	mov	r2, r8
 8005652:	4606      	mov	r6, r0
 8005654:	460f      	mov	r7, r1
 8005656:	464b      	mov	r3, r9
 8005658:	4640      	mov	r0, r8
 800565a:	4649      	mov	r1, r9
 800565c:	f7fa ff34 	bl	80004c8 <__aeabi_dmul>
 8005660:	a35d      	add	r3, pc, #372	; (adr r3, 80057d8 <__ieee754_pow+0x9f0>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	4604      	mov	r4, r0
 8005668:	460d      	mov	r5, r1
 800566a:	f7fa ff2d 	bl	80004c8 <__aeabi_dmul>
 800566e:	a35c      	add	r3, pc, #368	; (adr r3, 80057e0 <__ieee754_pow+0x9f8>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fd70 	bl	8000158 <__aeabi_dsub>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ff24 	bl	80004c8 <__aeabi_dmul>
 8005680:	a359      	add	r3, pc, #356	; (adr r3, 80057e8 <__ieee754_pow+0xa00>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fd69 	bl	800015c <__adddf3>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	f7fa ff1b 	bl	80004c8 <__aeabi_dmul>
 8005692:	a357      	add	r3, pc, #348	; (adr r3, 80057f0 <__ieee754_pow+0xa08>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f7fa fd5e 	bl	8000158 <__aeabi_dsub>
 800569c:	4622      	mov	r2, r4
 800569e:	462b      	mov	r3, r5
 80056a0:	f7fa ff12 	bl	80004c8 <__aeabi_dmul>
 80056a4:	a354      	add	r3, pc, #336	; (adr r3, 80057f8 <__ieee754_pow+0xa10>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa fd57 	bl	800015c <__adddf3>
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	f7fa ff09 	bl	80004c8 <__aeabi_dmul>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fa fd4b 	bl	8000158 <__aeabi_dsub>
 80056c2:	4604      	mov	r4, r0
 80056c4:	460d      	mov	r5, r1
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4640      	mov	r0, r8
 80056cc:	4649      	mov	r1, r9
 80056ce:	f7fa fefb 	bl	80004c8 <__aeabi_dmul>
 80056d2:	2200      	movs	r2, #0
 80056d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fd3a 	bl	8000158 <__aeabi_dsub>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ec:	f7fb f816 	bl	800071c <__aeabi_ddiv>
 80056f0:	4632      	mov	r2, r6
 80056f2:	4604      	mov	r4, r0
 80056f4:	460d      	mov	r5, r1
 80056f6:	463b      	mov	r3, r7
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	f7fa fee4 	bl	80004c8 <__aeabi_dmul>
 8005700:	4632      	mov	r2, r6
 8005702:	463b      	mov	r3, r7
 8005704:	f7fa fd2a 	bl	800015c <__adddf3>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fa fd22 	bl	8000158 <__aeabi_dsub>
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	f7fa fd1e 	bl	8000158 <__aeabi_dsub>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	2000      	movs	r0, #0
 8005722:	4939      	ldr	r1, [pc, #228]	; (8005808 <__ieee754_pow+0xa20>)
 8005724:	f7fa fd18 	bl	8000158 <__aeabi_dsub>
 8005728:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800572c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005730:	da29      	bge.n	8005786 <__ieee754_pow+0x99e>
 8005732:	4652      	mov	r2, sl
 8005734:	f000 fa68 	bl	8005c08 <scalbn>
 8005738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800573c:	f7ff bbfd 	b.w	8004f3a <__ieee754_pow+0x152>
 8005740:	4b32      	ldr	r3, [pc, #200]	; (800580c <__ieee754_pow+0xa24>)
 8005742:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005746:	429f      	cmp	r7, r3
 8005748:	f77f af14 	ble.w	8005574 <__ieee754_pow+0x78c>
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <__ieee754_pow+0xa28>)
 800574e:	440b      	add	r3, r1
 8005750:	4303      	orrs	r3, r0
 8005752:	d009      	beq.n	8005768 <__ieee754_pow+0x980>
 8005754:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	f7fb f926 	bl	80009ac <__aeabi_dcmplt>
 8005760:	3800      	subs	r0, #0
 8005762:	bf18      	it	ne
 8005764:	2001      	movne	r0, #1
 8005766:	e452      	b.n	800500e <__ieee754_pow+0x226>
 8005768:	4622      	mov	r2, r4
 800576a:	462b      	mov	r3, r5
 800576c:	f7fa fcf4 	bl	8000158 <__aeabi_dsub>
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	f7fb f92e 	bl	80009d4 <__aeabi_dcmpge>
 8005778:	2800      	cmp	r0, #0
 800577a:	f43f aefb 	beq.w	8005574 <__ieee754_pow+0x78c>
 800577e:	e7e9      	b.n	8005754 <__ieee754_pow+0x96c>
 8005780:	f04f 0a00 	mov.w	sl, #0
 8005784:	e720      	b.n	80055c8 <__ieee754_pow+0x7e0>
 8005786:	4621      	mov	r1, r4
 8005788:	e7d6      	b.n	8005738 <__ieee754_pow+0x950>
 800578a:	f04f 0b00 	mov.w	fp, #0
 800578e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005808 <__ieee754_pow+0xa20>
 8005792:	f7ff bbb9 	b.w	8004f08 <__ieee754_pow+0x120>
 8005796:	f04f 0b00 	mov.w	fp, #0
 800579a:	f04f 0c00 	mov.w	ip, #0
 800579e:	f7ff bbb3 	b.w	8004f08 <__ieee754_pow+0x120>
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7ff bb3c 	b.w	8004e22 <__ieee754_pow+0x3a>
 80057aa:	9200      	str	r2, [sp, #0]
 80057ac:	f7ff bb88 	b.w	8004ec0 <__ieee754_pow+0xd8>
 80057b0:	2300      	movs	r3, #0
 80057b2:	f7ff bb72 	b.w	8004e9a <__ieee754_pow+0xb2>
 80057b6:	bf00      	nop
 80057b8:	652b82fe 	.word	0x652b82fe
 80057bc:	3c971547 	.word	0x3c971547
 80057c0:	00000000 	.word	0x00000000
 80057c4:	3fe62e43 	.word	0x3fe62e43
 80057c8:	fefa39ef 	.word	0xfefa39ef
 80057cc:	3fe62e42 	.word	0x3fe62e42
 80057d0:	0ca86c39 	.word	0x0ca86c39
 80057d4:	be205c61 	.word	0xbe205c61
 80057d8:	72bea4d0 	.word	0x72bea4d0
 80057dc:	3e663769 	.word	0x3e663769
 80057e0:	c5d26bf1 	.word	0xc5d26bf1
 80057e4:	3ebbbd41 	.word	0x3ebbbd41
 80057e8:	af25de2c 	.word	0xaf25de2c
 80057ec:	3f11566a 	.word	0x3f11566a
 80057f0:	16bebd93 	.word	0x16bebd93
 80057f4:	3f66c16c 	.word	0x3f66c16c
 80057f8:	5555553e 	.word	0x5555553e
 80057fc:	3fc55555 	.word	0x3fc55555
 8005800:	3fe00000 	.word	0x3fe00000
 8005804:	fff00000 	.word	0xfff00000
 8005808:	3ff00000 	.word	0x3ff00000
 800580c:	4090cbff 	.word	0x4090cbff
 8005810:	3f6f3400 	.word	0x3f6f3400
 8005814:	00000000 	.word	0x00000000

08005818 <__ieee754_rem_pio2>:
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	4614      	mov	r4, r2
 800581e:	4ac2      	ldr	r2, [pc, #776]	; (8005b28 <__ieee754_rem_pio2+0x310>)
 8005820:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005824:	b08d      	sub	sp, #52	; 0x34
 8005826:	4592      	cmp	sl, r2
 8005828:	9104      	str	r1, [sp, #16]
 800582a:	dc07      	bgt.n	800583c <__ieee754_rem_pio2+0x24>
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	e9c4 0100 	strd	r0, r1, [r4]
 8005834:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005838:	2500      	movs	r5, #0
 800583a:	e024      	b.n	8005886 <__ieee754_rem_pio2+0x6e>
 800583c:	4abb      	ldr	r2, [pc, #748]	; (8005b2c <__ieee754_rem_pio2+0x314>)
 800583e:	4592      	cmp	sl, r2
 8005840:	dc72      	bgt.n	8005928 <__ieee754_rem_pio2+0x110>
 8005842:	9b04      	ldr	r3, [sp, #16]
 8005844:	4dba      	ldr	r5, [pc, #744]	; (8005b30 <__ieee754_rem_pio2+0x318>)
 8005846:	2b00      	cmp	r3, #0
 8005848:	a3a9      	add	r3, pc, #676	; (adr r3, 8005af0 <__ieee754_rem_pio2+0x2d8>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	dd36      	ble.n	80058be <__ieee754_rem_pio2+0xa6>
 8005850:	f7fa fc82 	bl	8000158 <__aeabi_dsub>
 8005854:	45aa      	cmp	sl, r5
 8005856:	4606      	mov	r6, r0
 8005858:	460f      	mov	r7, r1
 800585a:	d018      	beq.n	800588e <__ieee754_rem_pio2+0x76>
 800585c:	a3a6      	add	r3, pc, #664	; (adr r3, 8005af8 <__ieee754_rem_pio2+0x2e0>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fc79 	bl	8000158 <__aeabi_dsub>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4630      	mov	r0, r6
 800586c:	e9c4 2300 	strd	r2, r3, [r4]
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa fc71 	bl	8000158 <__aeabi_dsub>
 8005876:	a3a0      	add	r3, pc, #640	; (adr r3, 8005af8 <__ieee754_rem_pio2+0x2e0>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fc6c 	bl	8000158 <__aeabi_dsub>
 8005880:	2501      	movs	r5, #1
 8005882:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005886:	4628      	mov	r0, r5
 8005888:	b00d      	add	sp, #52	; 0x34
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588e:	a39c      	add	r3, pc, #624	; (adr r3, 8005b00 <__ieee754_rem_pio2+0x2e8>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fa fc60 	bl	8000158 <__aeabi_dsub>
 8005898:	a39b      	add	r3, pc, #620	; (adr r3, 8005b08 <__ieee754_rem_pio2+0x2f0>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	f7fa fc59 	bl	8000158 <__aeabi_dsub>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4630      	mov	r0, r6
 80058ac:	e9c4 2300 	strd	r2, r3, [r4]
 80058b0:	4639      	mov	r1, r7
 80058b2:	f7fa fc51 	bl	8000158 <__aeabi_dsub>
 80058b6:	a394      	add	r3, pc, #592	; (adr r3, 8005b08 <__ieee754_rem_pio2+0x2f0>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	e7de      	b.n	800587c <__ieee754_rem_pio2+0x64>
 80058be:	f7fa fc4d 	bl	800015c <__adddf3>
 80058c2:	45aa      	cmp	sl, r5
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	d016      	beq.n	80058f8 <__ieee754_rem_pio2+0xe0>
 80058ca:	a38b      	add	r3, pc, #556	; (adr r3, 8005af8 <__ieee754_rem_pio2+0x2e0>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f7fa fc44 	bl	800015c <__adddf3>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4630      	mov	r0, r6
 80058da:	e9c4 2300 	strd	r2, r3, [r4]
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fc3a 	bl	8000158 <__aeabi_dsub>
 80058e4:	a384      	add	r3, pc, #528	; (adr r3, 8005af8 <__ieee754_rem_pio2+0x2e0>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fc37 	bl	800015c <__adddf3>
 80058ee:	f04f 35ff 	mov.w	r5, #4294967295
 80058f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058f6:	e7c6      	b.n	8005886 <__ieee754_rem_pio2+0x6e>
 80058f8:	a381      	add	r3, pc, #516	; (adr r3, 8005b00 <__ieee754_rem_pio2+0x2e8>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fc2d 	bl	800015c <__adddf3>
 8005902:	a381      	add	r3, pc, #516	; (adr r3, 8005b08 <__ieee754_rem_pio2+0x2f0>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	4606      	mov	r6, r0
 800590a:	460f      	mov	r7, r1
 800590c:	f7fa fc26 	bl	800015c <__adddf3>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4630      	mov	r0, r6
 8005916:	e9c4 2300 	strd	r2, r3, [r4]
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fc1c 	bl	8000158 <__aeabi_dsub>
 8005920:	a379      	add	r3, pc, #484	; (adr r3, 8005b08 <__ieee754_rem_pio2+0x2f0>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	e7e0      	b.n	80058ea <__ieee754_rem_pio2+0xd2>
 8005928:	4a82      	ldr	r2, [pc, #520]	; (8005b34 <__ieee754_rem_pio2+0x31c>)
 800592a:	4592      	cmp	sl, r2
 800592c:	f300 80d4 	bgt.w	8005ad8 <__ieee754_rem_pio2+0x2c0>
 8005930:	f000 f966 	bl	8005c00 <fabs>
 8005934:	a376      	add	r3, pc, #472	; (adr r3, 8005b10 <__ieee754_rem_pio2+0x2f8>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	4606      	mov	r6, r0
 800593c:	460f      	mov	r7, r1
 800593e:	f7fa fdc3 	bl	80004c8 <__aeabi_dmul>
 8005942:	2200      	movs	r2, #0
 8005944:	4b7c      	ldr	r3, [pc, #496]	; (8005b38 <__ieee754_rem_pio2+0x320>)
 8005946:	f7fa fc09 	bl	800015c <__adddf3>
 800594a:	f7fb f86d 	bl	8000a28 <__aeabi_d2iz>
 800594e:	4605      	mov	r5, r0
 8005950:	f7fa fd50 	bl	80003f4 <__aeabi_i2d>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800595c:	a364      	add	r3, pc, #400	; (adr r3, 8005af0 <__ieee754_rem_pio2+0x2d8>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fdb1 	bl	80004c8 <__aeabi_dmul>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fa fbf3 	bl	8000158 <__aeabi_dsub>
 8005972:	a361      	add	r3, pc, #388	; (adr r3, 8005af8 <__ieee754_rem_pio2+0x2e0>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	4680      	mov	r8, r0
 800597a:	4689      	mov	r9, r1
 800597c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005980:	f7fa fda2 	bl	80004c8 <__aeabi_dmul>
 8005984:	2d1f      	cmp	r5, #31
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	dc0e      	bgt.n	80059aa <__ieee754_rem_pio2+0x192>
 800598c:	4b6b      	ldr	r3, [pc, #428]	; (8005b3c <__ieee754_rem_pio2+0x324>)
 800598e:	1e6a      	subs	r2, r5, #1
 8005990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005994:	4553      	cmp	r3, sl
 8005996:	d008      	beq.n	80059aa <__ieee754_rem_pio2+0x192>
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	4640      	mov	r0, r8
 800599e:	4649      	mov	r1, r9
 80059a0:	f7fa fbda 	bl	8000158 <__aeabi_dsub>
 80059a4:	e9c4 0100 	strd	r0, r1, [r4]
 80059a8:	e012      	b.n	80059d0 <__ieee754_rem_pio2+0x1b8>
 80059aa:	463b      	mov	r3, r7
 80059ac:	4632      	mov	r2, r6
 80059ae:	4640      	mov	r0, r8
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fbd1 	bl	8000158 <__aeabi_dsub>
 80059b6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80059c0:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	dc1f      	bgt.n	8005a08 <__ieee754_rem_pio2+0x1f0>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	e9c4 2300 	strd	r2, r3, [r4]
 80059d0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80059d4:	4640      	mov	r0, r8
 80059d6:	4653      	mov	r3, sl
 80059d8:	4649      	mov	r1, r9
 80059da:	f7fa fbbd 	bl	8000158 <__aeabi_dsub>
 80059de:	4632      	mov	r2, r6
 80059e0:	463b      	mov	r3, r7
 80059e2:	f7fa fbb9 	bl	8000158 <__aeabi_dsub>
 80059e6:	460b      	mov	r3, r1
 80059e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80059ec:	9904      	ldr	r1, [sp, #16]
 80059ee:	4602      	mov	r2, r0
 80059f0:	2900      	cmp	r1, #0
 80059f2:	f6bf af48 	bge.w	8005886 <__ieee754_rem_pio2+0x6e>
 80059f6:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80059fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80059fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a02:	60e3      	str	r3, [r4, #12]
 8005a04:	426d      	negs	r5, r5
 8005a06:	e73e      	b.n	8005886 <__ieee754_rem_pio2+0x6e>
 8005a08:	a33d      	add	r3, pc, #244	; (adr r3, 8005b00 <__ieee754_rem_pio2+0x2e8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fa fd59 	bl	80004c8 <__aeabi_dmul>
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4649      	mov	r1, r9
 8005a22:	f7fa fb99 	bl	8000158 <__aeabi_dsub>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4682      	mov	sl, r0
 8005a2c:	468b      	mov	fp, r1
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fb91 	bl	8000158 <__aeabi_dsub>
 8005a36:	4632      	mov	r2, r6
 8005a38:	463b      	mov	r3, r7
 8005a3a:	f7fa fb8d 	bl	8000158 <__aeabi_dsub>
 8005a3e:	a332      	add	r3, pc, #200	; (adr r3, 8005b08 <__ieee754_rem_pio2+0x2f0>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a4c:	f7fa fd3c 	bl	80004c8 <__aeabi_dmul>
 8005a50:	4632      	mov	r2, r6
 8005a52:	463b      	mov	r3, r7
 8005a54:	f7fa fb80 	bl	8000158 <__aeabi_dsub>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4650      	mov	r0, sl
 8005a62:	4659      	mov	r1, fp
 8005a64:	f7fa fb78 	bl	8000158 <__aeabi_dsub>
 8005a68:	9a05      	ldr	r2, [sp, #20]
 8005a6a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b31      	cmp	r3, #49	; 0x31
 8005a72:	dc06      	bgt.n	8005a82 <__ieee754_rem_pio2+0x26a>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	46d0      	mov	r8, sl
 8005a7a:	46d9      	mov	r9, fp
 8005a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8005a80:	e7a6      	b.n	80059d0 <__ieee754_rem_pio2+0x1b8>
 8005a82:	a325      	add	r3, pc, #148	; (adr r3, 8005b18 <__ieee754_rem_pio2+0x300>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8c:	f7fa fd1c 	bl	80004c8 <__aeabi_dmul>
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4650      	mov	r0, sl
 8005a9a:	4659      	mov	r1, fp
 8005a9c:	f7fa fb5c 	bl	8000158 <__aeabi_dsub>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	4659      	mov	r1, fp
 8005aac:	f7fa fb54 	bl	8000158 <__aeabi_dsub>
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	f7fa fb50 	bl	8000158 <__aeabi_dsub>
 8005ab8:	a319      	add	r3, pc, #100	; (adr r3, 8005b20 <__ieee754_rem_pio2+0x308>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460f      	mov	r7, r1
 8005ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac6:	f7fa fcff 	bl	80004c8 <__aeabi_dmul>
 8005aca:	4632      	mov	r2, r6
 8005acc:	463b      	mov	r3, r7
 8005ace:	f7fa fb43 	bl	8000158 <__aeabi_dsub>
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460f      	mov	r7, r1
 8005ad6:	e75f      	b.n	8005998 <__ieee754_rem_pio2+0x180>
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <__ieee754_rem_pio2+0x328>)
 8005ada:	4592      	cmp	sl, r2
 8005adc:	dd32      	ble.n	8005b44 <__ieee754_rem_pio2+0x32c>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	f7fa fb39 	bl	8000158 <__aeabi_dsub>
 8005ae6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005aea:	e9c4 0100 	strd	r0, r1, [r4]
 8005aee:	e6a3      	b.n	8005838 <__ieee754_rem_pio2+0x20>
 8005af0:	54400000 	.word	0x54400000
 8005af4:	3ff921fb 	.word	0x3ff921fb
 8005af8:	1a626331 	.word	0x1a626331
 8005afc:	3dd0b461 	.word	0x3dd0b461
 8005b00:	1a600000 	.word	0x1a600000
 8005b04:	3dd0b461 	.word	0x3dd0b461
 8005b08:	2e037073 	.word	0x2e037073
 8005b0c:	3ba3198a 	.word	0x3ba3198a
 8005b10:	6dc9c883 	.word	0x6dc9c883
 8005b14:	3fe45f30 	.word	0x3fe45f30
 8005b18:	2e000000 	.word	0x2e000000
 8005b1c:	3ba3198a 	.word	0x3ba3198a
 8005b20:	252049c1 	.word	0x252049c1
 8005b24:	397b839a 	.word	0x397b839a
 8005b28:	3fe921fb 	.word	0x3fe921fb
 8005b2c:	4002d97b 	.word	0x4002d97b
 8005b30:	3ff921fb 	.word	0x3ff921fb
 8005b34:	413921fb 	.word	0x413921fb
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	080066f8 	.word	0x080066f8
 8005b40:	7fefffff 	.word	0x7fefffff
 8005b44:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005b48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005b4c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005b50:	460f      	mov	r7, r1
 8005b52:	4606      	mov	r6, r0
 8005b54:	f7fa ff68 	bl	8000a28 <__aeabi_d2iz>
 8005b58:	f7fa fc4c 	bl	80003f4 <__aeabi_i2d>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b68:	f7fa faf6 	bl	8000158 <__aeabi_dsub>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <__ieee754_rem_pio2+0x3e0>)
 8005b70:	f7fa fcaa 	bl	80004c8 <__aeabi_dmul>
 8005b74:	460f      	mov	r7, r1
 8005b76:	4606      	mov	r6, r0
 8005b78:	f7fa ff56 	bl	8000a28 <__aeabi_d2iz>
 8005b7c:	f7fa fc3a 	bl	80003f4 <__aeabi_i2d>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4630      	mov	r0, r6
 8005b86:	4639      	mov	r1, r7
 8005b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b8c:	f7fa fae4 	bl	8000158 <__aeabi_dsub>
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <__ieee754_rem_pio2+0x3e0>)
 8005b94:	f7fa fc98 	bl	80004c8 <__aeabi_dmul>
 8005b98:	f04f 0803 	mov.w	r8, #3
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	2700      	movs	r7, #0
 8005ba0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ba4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005ba8:	4632      	mov	r2, r6
 8005baa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005bae:	463b      	mov	r3, r7
 8005bb0:	46c2      	mov	sl, r8
 8005bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bb6:	f7fa feef 	bl	8000998 <__aeabi_dcmpeq>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d1f4      	bne.n	8005ba8 <__ieee754_rem_pio2+0x390>
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <__ieee754_rem_pio2+0x3e4>)
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	a806      	add	r0, sp, #24
 8005bcc:	4653      	mov	r3, sl
 8005bce:	f000 f999 	bl	8005f04 <__kernel_rem_pio2>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f6bf ae55 	bge.w	8005886 <__ieee754_rem_pio2+0x6e>
 8005bdc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005be0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005be4:	e9c4 2300 	strd	r2, r3, [r4]
 8005be8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bf0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005bf4:	e706      	b.n	8005a04 <__ieee754_rem_pio2+0x1ec>
 8005bf6:	bf00      	nop
 8005bf8:	41700000 	.word	0x41700000
 8005bfc:	08006778 	.word	0x08006778

08005c00 <fabs>:
 8005c00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c04:	4619      	mov	r1, r3
 8005c06:	4770      	bx	lr

08005c08 <scalbn>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	4616      	mov	r6, r2
 8005c0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	460b      	mov	r3, r1
 8005c16:	b992      	cbnz	r2, 8005c3e <scalbn+0x36>
 8005c18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c1c:	4303      	orrs	r3, r0
 8005c1e:	d03c      	beq.n	8005c9a <scalbn+0x92>
 8005c20:	4b31      	ldr	r3, [pc, #196]	; (8005ce8 <scalbn+0xe0>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	f7fa fc50 	bl	80004c8 <__aeabi_dmul>
 8005c28:	4b30      	ldr	r3, [pc, #192]	; (8005cec <scalbn+0xe4>)
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	429e      	cmp	r6, r3
 8005c2e:	460d      	mov	r5, r1
 8005c30:	da0f      	bge.n	8005c52 <scalbn+0x4a>
 8005c32:	a329      	add	r3, pc, #164	; (adr r3, 8005cd8 <scalbn+0xd0>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fc46 	bl	80004c8 <__aeabi_dmul>
 8005c3c:	e006      	b.n	8005c4c <scalbn+0x44>
 8005c3e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005c42:	42ba      	cmp	r2, r7
 8005c44:	d109      	bne.n	8005c5a <scalbn+0x52>
 8005c46:	4602      	mov	r2, r0
 8005c48:	f7fa fa88 	bl	800015c <__adddf3>
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	460d      	mov	r5, r1
 8005c50:	e023      	b.n	8005c9a <scalbn+0x92>
 8005c52:	460b      	mov	r3, r1
 8005c54:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c58:	3a36      	subs	r2, #54	; 0x36
 8005c5a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005c5e:	428e      	cmp	r6, r1
 8005c60:	dd0e      	ble.n	8005c80 <scalbn+0x78>
 8005c62:	a31f      	add	r3, pc, #124	; (adr r3, 8005ce0 <scalbn+0xd8>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005c6c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005c70:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005c74:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005c78:	481d      	ldr	r0, [pc, #116]	; (8005cf0 <scalbn+0xe8>)
 8005c7a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005c7e:	e7db      	b.n	8005c38 <scalbn+0x30>
 8005c80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c84:	4432      	add	r2, r6
 8005c86:	428a      	cmp	r2, r1
 8005c88:	dceb      	bgt.n	8005c62 <scalbn+0x5a>
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	dd08      	ble.n	8005ca0 <scalbn+0x98>
 8005c8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c96:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ca4:	da0c      	bge.n	8005cc0 <scalbn+0xb8>
 8005ca6:	a30c      	add	r3, pc, #48	; (adr r3, 8005cd8 <scalbn+0xd0>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005cb0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005cb4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005cb8:	480e      	ldr	r0, [pc, #56]	; (8005cf4 <scalbn+0xec>)
 8005cba:	f041 011f 	orr.w	r1, r1, #31
 8005cbe:	e7bb      	b.n	8005c38 <scalbn+0x30>
 8005cc0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cc4:	3236      	adds	r2, #54	; 0x36
 8005cc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <scalbn+0xf0>)
 8005cd6:	e7af      	b.n	8005c38 <scalbn+0x30>
 8005cd8:	c2f8f359 	.word	0xc2f8f359
 8005cdc:	01a56e1f 	.word	0x01a56e1f
 8005ce0:	8800759c 	.word	0x8800759c
 8005ce4:	7e37e43c 	.word	0x7e37e43c
 8005ce8:	43500000 	.word	0x43500000
 8005cec:	ffff3cb0 	.word	0xffff3cb0
 8005cf0:	8800759c 	.word	0x8800759c
 8005cf4:	c2f8f359 	.word	0xc2f8f359
 8005cf8:	3c900000 	.word	0x3c900000

08005cfc <with_errno>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	460d      	mov	r5, r1
 8005d02:	4616      	mov	r6, r2
 8005d04:	f7fe fd8a 	bl	800481c <__errno>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	6006      	str	r6, [r0, #0]
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}

08005d10 <xflow>:
 8005d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d12:	4615      	mov	r5, r2
 8005d14:	461c      	mov	r4, r3
 8005d16:	b180      	cbz	r0, 8005d3a <xflow+0x2a>
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005d1e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d26:	4628      	mov	r0, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7fa fbcd 	bl	80004c8 <__aeabi_dmul>
 8005d2e:	2222      	movs	r2, #34	; 0x22
 8005d30:	b003      	add	sp, #12
 8005d32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d36:	f7ff bfe1 	b.w	8005cfc <with_errno>
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	e7ee      	b.n	8005d1e <xflow+0xe>

08005d40 <__math_uflow>:
 8005d40:	2200      	movs	r2, #0
 8005d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d46:	f7ff bfe3 	b.w	8005d10 <xflow>

08005d4a <__math_oflow>:
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005d50:	f7ff bfde 	b.w	8005d10 <xflow>

08005d54 <__ieee754_sqrt>:
 8005d54:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005ef8 <__ieee754_sqrt+0x1a4>
 8005d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005d60:	460b      	mov	r3, r1
 8005d62:	4606      	mov	r6, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	460a      	mov	r2, r1
 8005d68:	4604      	mov	r4, r0
 8005d6a:	d10e      	bne.n	8005d8a <__ieee754_sqrt+0x36>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	f7fa fbab 	bl	80004c8 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4630      	mov	r0, r6
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa f9ef 	bl	800015c <__adddf3>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	4630      	mov	r0, r6
 8005d84:	4629      	mov	r1, r5
 8005d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	dc0d      	bgt.n	8005daa <__ieee754_sqrt+0x56>
 8005d8e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005d92:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005d96:	d0f4      	beq.n	8005d82 <__ieee754_sqrt+0x2e>
 8005d98:	b139      	cbz	r1, 8005daa <__ieee754_sqrt+0x56>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f7fa f9dc 	bl	8000158 <__aeabi_dsub>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	f7fa fcba 	bl	800071c <__aeabi_ddiv>
 8005da8:	e7e9      	b.n	8005d7e <__ieee754_sqrt+0x2a>
 8005daa:	1512      	asrs	r2, r2, #20
 8005dac:	f000 8089 	beq.w	8005ec2 <__ieee754_sqrt+0x16e>
 8005db0:	2500      	movs	r5, #0
 8005db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dbe:	07d2      	lsls	r2, r2, #31
 8005dc0:	bf5c      	itt	pl
 8005dc2:	005b      	lslpl	r3, r3, #1
 8005dc4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005dc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dcc:	bf58      	it	pl
 8005dce:	0064      	lslpl	r4, r4, #1
 8005dd0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005dd4:	0062      	lsls	r2, r4, #1
 8005dd6:	2016      	movs	r0, #22
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8005dde:	1076      	asrs	r6, r6, #1
 8005de0:	190f      	adds	r7, r1, r4
 8005de2:	429f      	cmp	r7, r3
 8005de4:	bfde      	ittt	le
 8005de6:	1bdb      	suble	r3, r3, r7
 8005de8:	1939      	addle	r1, r7, r4
 8005dea:	192d      	addle	r5, r5, r4
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	3801      	subs	r0, #1
 8005df0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005df4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005df8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005dfc:	d1f0      	bne.n	8005de0 <__ieee754_sqrt+0x8c>
 8005dfe:	4604      	mov	r4, r0
 8005e00:	2720      	movs	r7, #32
 8005e02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005e06:	428b      	cmp	r3, r1
 8005e08:	eb0c 0e00 	add.w	lr, ip, r0
 8005e0c:	dc02      	bgt.n	8005e14 <__ieee754_sqrt+0xc0>
 8005e0e:	d113      	bne.n	8005e38 <__ieee754_sqrt+0xe4>
 8005e10:	4596      	cmp	lr, r2
 8005e12:	d811      	bhi.n	8005e38 <__ieee754_sqrt+0xe4>
 8005e14:	f1be 0f00 	cmp.w	lr, #0
 8005e18:	eb0e 000c 	add.w	r0, lr, ip
 8005e1c:	da56      	bge.n	8005ecc <__ieee754_sqrt+0x178>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	db54      	blt.n	8005ecc <__ieee754_sqrt+0x178>
 8005e22:	f101 0801 	add.w	r8, r1, #1
 8005e26:	1a5b      	subs	r3, r3, r1
 8005e28:	4641      	mov	r1, r8
 8005e2a:	4596      	cmp	lr, r2
 8005e2c:	bf88      	it	hi
 8005e2e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005e32:	eba2 020e 	sub.w	r2, r2, lr
 8005e36:	4464      	add	r4, ip
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	3f01      	subs	r7, #1
 8005e3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005e40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005e44:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005e48:	d1dd      	bne.n	8005e06 <__ieee754_sqrt+0xb2>
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d01b      	beq.n	8005e86 <__ieee754_sqrt+0x132>
 8005e4e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005efc <__ieee754_sqrt+0x1a8>
 8005e52:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005f00 <__ieee754_sqrt+0x1ac>
 8005e56:	e9da 0100 	ldrd	r0, r1, [sl]
 8005e5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8005e5e:	f7fa f97b 	bl	8000158 <__aeabi_dsub>
 8005e62:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa fda7 	bl	80009c0 <__aeabi_dcmple>
 8005e72:	b140      	cbz	r0, 8005e86 <__ieee754_sqrt+0x132>
 8005e74:	e9da 0100 	ldrd	r0, r1, [sl]
 8005e78:	e9db 2300 	ldrd	r2, r3, [fp]
 8005e7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005e80:	d126      	bne.n	8005ed0 <__ieee754_sqrt+0x17c>
 8005e82:	463c      	mov	r4, r7
 8005e84:	3501      	adds	r5, #1
 8005e86:	106b      	asrs	r3, r5, #1
 8005e88:	0864      	lsrs	r4, r4, #1
 8005e8a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e8e:	07ea      	lsls	r2, r5, #31
 8005e90:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e94:	bf48      	it	mi
 8005e96:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005ea0:	e76d      	b.n	8005d7e <__ieee754_sqrt+0x2a>
 8005ea2:	0ae3      	lsrs	r3, r4, #11
 8005ea4:	3915      	subs	r1, #21
 8005ea6:	0564      	lsls	r4, r4, #21
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0fa      	beq.n	8005ea2 <__ieee754_sqrt+0x14e>
 8005eac:	02d8      	lsls	r0, r3, #11
 8005eae:	d50a      	bpl.n	8005ec6 <__ieee754_sqrt+0x172>
 8005eb0:	f1c2 0020 	rsb	r0, r2, #32
 8005eb4:	fa24 f000 	lsr.w	r0, r4, r0
 8005eb8:	1e55      	subs	r5, r2, #1
 8005eba:	4094      	lsls	r4, r2
 8005ebc:	4303      	orrs	r3, r0
 8005ebe:	1b4a      	subs	r2, r1, r5
 8005ec0:	e776      	b.n	8005db0 <__ieee754_sqrt+0x5c>
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	e7f0      	b.n	8005ea8 <__ieee754_sqrt+0x154>
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	3201      	adds	r2, #1
 8005eca:	e7ef      	b.n	8005eac <__ieee754_sqrt+0x158>
 8005ecc:	4688      	mov	r8, r1
 8005ece:	e7aa      	b.n	8005e26 <__ieee754_sqrt+0xd2>
 8005ed0:	f7fa f944 	bl	800015c <__adddf3>
 8005ed4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4640      	mov	r0, r8
 8005ede:	4649      	mov	r1, r9
 8005ee0:	f7fa fd64 	bl	80009ac <__aeabi_dcmplt>
 8005ee4:	b120      	cbz	r0, 8005ef0 <__ieee754_sqrt+0x19c>
 8005ee6:	1ca1      	adds	r1, r4, #2
 8005ee8:	bf08      	it	eq
 8005eea:	3501      	addeq	r5, #1
 8005eec:	3402      	adds	r4, #2
 8005eee:	e7ca      	b.n	8005e86 <__ieee754_sqrt+0x132>
 8005ef0:	3401      	adds	r4, #1
 8005ef2:	f024 0401 	bic.w	r4, r4, #1
 8005ef6:	e7c6      	b.n	8005e86 <__ieee754_sqrt+0x132>
 8005ef8:	7ff00000 	.word	0x7ff00000
 8005efc:	200000e0 	.word	0x200000e0
 8005f00:	200000e8 	.word	0x200000e8

08005f04 <__kernel_rem_pio2>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005f0c:	9308      	str	r3, [sp, #32]
 8005f0e:	9106      	str	r1, [sp, #24]
 8005f10:	4bb6      	ldr	r3, [pc, #728]	; (80061ec <__kernel_rem_pio2+0x2e8>)
 8005f12:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005f14:	f112 0f14 	cmn.w	r2, #20
 8005f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f1c:	bfa8      	it	ge
 8005f1e:	1ed4      	subge	r4, r2, #3
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	9b08      	ldr	r3, [sp, #32]
 8005f24:	bfb8      	it	lt
 8005f26:	2400      	movlt	r4, #0
 8005f28:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f2c:	9307      	str	r3, [sp, #28]
 8005f2e:	bfa4      	itt	ge
 8005f30:	2318      	movge	r3, #24
 8005f32:	fb94 f4f3 	sdivge	r4, r4, r3
 8005f36:	f06f 0317 	mvn.w	r3, #23
 8005f3a:	fb04 3303 	mla	r3, r4, r3, r3
 8005f3e:	eb03 0b02 	add.w	fp, r3, r2
 8005f42:	9a07      	ldr	r2, [sp, #28]
 8005f44:	9b02      	ldr	r3, [sp, #8]
 8005f46:	1aa7      	subs	r7, r4, r2
 8005f48:	eb03 0802 	add.w	r8, r3, r2
 8005f4c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005f4e:	2500      	movs	r5, #0
 8005f50:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	9009      	str	r0, [sp, #36]	; 0x24
 8005f5a:	ae20      	add	r6, sp, #128	; 0x80
 8005f5c:	4545      	cmp	r5, r8
 8005f5e:	dd14      	ble.n	8005f8a <__kernel_rem_pio2+0x86>
 8005f60:	f04f 0800 	mov.w	r8, #0
 8005f64:	9a08      	ldr	r2, [sp, #32]
 8005f66:	ab20      	add	r3, sp, #128	; 0x80
 8005f68:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005f6c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8005f70:	9b02      	ldr	r3, [sp, #8]
 8005f72:	4598      	cmp	r8, r3
 8005f74:	dc35      	bgt.n	8005fe2 <__kernel_rem_pio2+0xde>
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f1a3 0908 	sub.w	r9, r3, #8
 8005f7e:	2300      	movs	r3, #0
 8005f80:	462f      	mov	r7, r5
 8005f82:	2600      	movs	r6, #0
 8005f84:	e9cd 2300 	strd	r2, r3, [sp]
 8005f88:	e01f      	b.n	8005fca <__kernel_rem_pio2+0xc6>
 8005f8a:	42ef      	cmn	r7, r5
 8005f8c:	d40b      	bmi.n	8005fa6 <__kernel_rem_pio2+0xa2>
 8005f8e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f92:	e9cd 2300 	strd	r2, r3, [sp]
 8005f96:	f7fa fa2d 	bl	80003f4 <__aeabi_i2d>
 8005f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f9e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	e7da      	b.n	8005f5c <__kernel_rem_pio2+0x58>
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	e7f8      	b.n	8005f9e <__kernel_rem_pio2+0x9a>
 8005fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005fb4:	f7fa fa88 	bl	80004c8 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc0:	f7fa f8cc 	bl	800015c <__adddf3>
 8005fc4:	e9cd 0100 	strd	r0, r1, [sp]
 8005fc8:	3601      	adds	r6, #1
 8005fca:	9b07      	ldr	r3, [sp, #28]
 8005fcc:	3f08      	subs	r7, #8
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	ddec      	ble.n	8005fac <__kernel_rem_pio2+0xa8>
 8005fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e8ea 2302 	strd	r2, r3, [sl], #8
 8005fde:	3508      	adds	r5, #8
 8005fe0:	e7c6      	b.n	8005f70 <__kernel_rem_pio2+0x6c>
 8005fe2:	9b02      	ldr	r3, [sp, #8]
 8005fe4:	aa0c      	add	r2, sp, #48	; 0x30
 8005fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005fee:	9e02      	ldr	r6, [sp, #8]
 8005ff0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff6:	ab98      	add	r3, sp, #608	; 0x260
 8005ff8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ffc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006000:	ab70      	add	r3, sp, #448	; 0x1c0
 8006002:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006006:	46d0      	mov	r8, sl
 8006008:	46b1      	mov	r9, r6
 800600a:	af0c      	add	r7, sp, #48	; 0x30
 800600c:	9700      	str	r7, [sp, #0]
 800600e:	f1b9 0f00 	cmp.w	r9, #0
 8006012:	f1a8 0808 	sub.w	r8, r8, #8
 8006016:	dc70      	bgt.n	80060fa <__kernel_rem_pio2+0x1f6>
 8006018:	465a      	mov	r2, fp
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7ff fdf3 	bl	8005c08 <scalbn>
 8006022:	2200      	movs	r2, #0
 8006024:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006028:	4604      	mov	r4, r0
 800602a:	460d      	mov	r5, r1
 800602c:	f7fa fa4c 	bl	80004c8 <__aeabi_dmul>
 8006030:	f000 faaa 	bl	8006588 <floor>
 8006034:	2200      	movs	r2, #0
 8006036:	4b6e      	ldr	r3, [pc, #440]	; (80061f0 <__kernel_rem_pio2+0x2ec>)
 8006038:	f7fa fa46 	bl	80004c8 <__aeabi_dmul>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4620      	mov	r0, r4
 8006042:	4629      	mov	r1, r5
 8006044:	f7fa f888 	bl	8000158 <__aeabi_dsub>
 8006048:	460d      	mov	r5, r1
 800604a:	4604      	mov	r4, r0
 800604c:	f7fa fcec 	bl	8000a28 <__aeabi_d2iz>
 8006050:	9004      	str	r0, [sp, #16]
 8006052:	f7fa f9cf 	bl	80003f4 <__aeabi_i2d>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4620      	mov	r0, r4
 800605c:	4629      	mov	r1, r5
 800605e:	f7fa f87b 	bl	8000158 <__aeabi_dsub>
 8006062:	f1bb 0f00 	cmp.w	fp, #0
 8006066:	4680      	mov	r8, r0
 8006068:	4689      	mov	r9, r1
 800606a:	dd6f      	ble.n	800614c <__kernel_rem_pio2+0x248>
 800606c:	1e71      	subs	r1, r6, #1
 800606e:	ab0c      	add	r3, sp, #48	; 0x30
 8006070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006074:	9c04      	ldr	r4, [sp, #16]
 8006076:	f1cb 0018 	rsb	r0, fp, #24
 800607a:	fa43 f200 	asr.w	r2, r3, r0
 800607e:	4414      	add	r4, r2
 8006080:	4082      	lsls	r2, r0
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	aa0c      	add	r2, sp, #48	; 0x30
 8006086:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800608a:	f1cb 0217 	rsb	r2, fp, #23
 800608e:	9404      	str	r4, [sp, #16]
 8006090:	4113      	asrs	r3, r2
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dd66      	ble.n	8006168 <__kernel_rem_pio2+0x264>
 800609a:	2200      	movs	r2, #0
 800609c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80060a0:	4614      	mov	r4, r2
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	3301      	adds	r3, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	4296      	cmp	r6, r2
 80060aa:	f300 80ad 	bgt.w	8006208 <__kernel_rem_pio2+0x304>
 80060ae:	f1bb 0f00 	cmp.w	fp, #0
 80060b2:	dd07      	ble.n	80060c4 <__kernel_rem_pio2+0x1c0>
 80060b4:	f1bb 0f01 	cmp.w	fp, #1
 80060b8:	f000 80b5 	beq.w	8006226 <__kernel_rem_pio2+0x322>
 80060bc:	f1bb 0f02 	cmp.w	fp, #2
 80060c0:	f000 80bb 	beq.w	800623a <__kernel_rem_pio2+0x336>
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d14e      	bne.n	8006168 <__kernel_rem_pio2+0x264>
 80060ca:	4642      	mov	r2, r8
 80060cc:	464b      	mov	r3, r9
 80060ce:	2000      	movs	r0, #0
 80060d0:	4948      	ldr	r1, [pc, #288]	; (80061f4 <__kernel_rem_pio2+0x2f0>)
 80060d2:	f7fa f841 	bl	8000158 <__aeabi_dsub>
 80060d6:	4680      	mov	r8, r0
 80060d8:	4689      	mov	r9, r1
 80060da:	2c00      	cmp	r4, #0
 80060dc:	d044      	beq.n	8006168 <__kernel_rem_pio2+0x264>
 80060de:	465a      	mov	r2, fp
 80060e0:	2000      	movs	r0, #0
 80060e2:	4944      	ldr	r1, [pc, #272]	; (80061f4 <__kernel_rem_pio2+0x2f0>)
 80060e4:	f7ff fd90 	bl	8005c08 <scalbn>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4640      	mov	r0, r8
 80060ee:	4649      	mov	r1, r9
 80060f0:	f7fa f832 	bl	8000158 <__aeabi_dsub>
 80060f4:	4680      	mov	r8, r0
 80060f6:	4689      	mov	r9, r1
 80060f8:	e036      	b.n	8006168 <__kernel_rem_pio2+0x264>
 80060fa:	2200      	movs	r2, #0
 80060fc:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <__kernel_rem_pio2+0x2f4>)
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa f9e1 	bl	80004c8 <__aeabi_dmul>
 8006106:	f7fa fc8f 	bl	8000a28 <__aeabi_d2iz>
 800610a:	f7fa f973 	bl	80003f4 <__aeabi_i2d>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006116:	2200      	movs	r2, #0
 8006118:	4b38      	ldr	r3, [pc, #224]	; (80061fc <__kernel_rem_pio2+0x2f8>)
 800611a:	f7fa f9d5 	bl	80004c8 <__aeabi_dmul>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa f817 	bl	8000158 <__aeabi_dsub>
 800612a:	f7fa fc7d 	bl	8000a28 <__aeabi_d2iz>
 800612e:	9b00      	ldr	r3, [sp, #0]
 8006130:	f109 39ff 	add.w	r9, r9, #4294967295
 8006134:	f843 0b04 	str.w	r0, [r3], #4
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006142:	f7fa f80b 	bl	800015c <__adddf3>
 8006146:	4604      	mov	r4, r0
 8006148:	460d      	mov	r5, r1
 800614a:	e760      	b.n	800600e <__kernel_rem_pio2+0x10a>
 800614c:	d105      	bne.n	800615a <__kernel_rem_pio2+0x256>
 800614e:	1e73      	subs	r3, r6, #1
 8006150:	aa0c      	add	r2, sp, #48	; 0x30
 8006152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006156:	15db      	asrs	r3, r3, #23
 8006158:	e79b      	b.n	8006092 <__kernel_rem_pio2+0x18e>
 800615a:	2200      	movs	r2, #0
 800615c:	4b28      	ldr	r3, [pc, #160]	; (8006200 <__kernel_rem_pio2+0x2fc>)
 800615e:	f7fa fc39 	bl	80009d4 <__aeabi_dcmpge>
 8006162:	2800      	cmp	r0, #0
 8006164:	d13e      	bne.n	80061e4 <__kernel_rem_pio2+0x2e0>
 8006166:	9000      	str	r0, [sp, #0]
 8006168:	2200      	movs	r2, #0
 800616a:	2300      	movs	r3, #0
 800616c:	4640      	mov	r0, r8
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa fc12 	bl	8000998 <__aeabi_dcmpeq>
 8006174:	2800      	cmp	r0, #0
 8006176:	f000 80b2 	beq.w	80062de <__kernel_rem_pio2+0x3da>
 800617a:	1e74      	subs	r4, r6, #1
 800617c:	4623      	mov	r3, r4
 800617e:	2200      	movs	r2, #0
 8006180:	9902      	ldr	r1, [sp, #8]
 8006182:	428b      	cmp	r3, r1
 8006184:	da60      	bge.n	8006248 <__kernel_rem_pio2+0x344>
 8006186:	2a00      	cmp	r2, #0
 8006188:	d075      	beq.n	8006276 <__kernel_rem_pio2+0x372>
 800618a:	ab0c      	add	r3, sp, #48	; 0x30
 800618c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006190:	f1ab 0b18 	sub.w	fp, fp, #24
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a0 	beq.w	80062da <__kernel_rem_pio2+0x3d6>
 800619a:	465a      	mov	r2, fp
 800619c:	2000      	movs	r0, #0
 800619e:	4915      	ldr	r1, [pc, #84]	; (80061f4 <__kernel_rem_pio2+0x2f0>)
 80061a0:	f7ff fd32 	bl	8005c08 <scalbn>
 80061a4:	46a2      	mov	sl, r4
 80061a6:	4606      	mov	r6, r0
 80061a8:	460f      	mov	r7, r1
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80061b0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80061f8 <__kernel_rem_pio2+0x2f4>
 80061b4:	00e5      	lsls	r5, r4, #3
 80061b6:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80061ba:	f1ba 0f00 	cmp.w	sl, #0
 80061be:	f280 80c4 	bge.w	800634a <__kernel_rem_pio2+0x446>
 80061c2:	4626      	mov	r6, r4
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	f2c0 80f6 	blt.w	80063b6 <__kernel_rem_pio2+0x4b2>
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <__kernel_rem_pio2+0x300>)
 80061cc:	f04f 0a00 	mov.w	sl, #0
 80061d0:	9307      	str	r3, [sp, #28]
 80061d2:	ab70      	add	r3, sp, #448	; 0x1c0
 80061d4:	f04f 0b00 	mov.w	fp, #0
 80061d8:	f04f 0800 	mov.w	r8, #0
 80061dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80061e0:	1ba7      	subs	r7, r4, r6
 80061e2:	e0dc      	b.n	800639e <__kernel_rem_pio2+0x49a>
 80061e4:	2302      	movs	r3, #2
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	e757      	b.n	800609a <__kernel_rem_pio2+0x196>
 80061ea:	bf00      	nop
 80061ec:	080068c0 	.word	0x080068c0
 80061f0:	40200000 	.word	0x40200000
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	3e700000 	.word	0x3e700000
 80061fc:	41700000 	.word	0x41700000
 8006200:	3fe00000 	.word	0x3fe00000
 8006204:	08006880 	.word	0x08006880
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	b944      	cbnz	r4, 800621e <__kernel_rem_pio2+0x31a>
 800620c:	b11b      	cbz	r3, 8006216 <__kernel_rem_pio2+0x312>
 800620e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	2301      	movs	r3, #1
 8006216:	461c      	mov	r4, r3
 8006218:	3201      	adds	r2, #1
 800621a:	3704      	adds	r7, #4
 800621c:	e744      	b.n	80060a8 <__kernel_rem_pio2+0x1a4>
 800621e:	1acb      	subs	r3, r1, r3
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	4623      	mov	r3, r4
 8006224:	e7f7      	b.n	8006216 <__kernel_rem_pio2+0x312>
 8006226:	1e72      	subs	r2, r6, #1
 8006228:	ab0c      	add	r3, sp, #48	; 0x30
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006232:	a90c      	add	r1, sp, #48	; 0x30
 8006234:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006238:	e744      	b.n	80060c4 <__kernel_rem_pio2+0x1c0>
 800623a:	1e72      	subs	r2, r6, #1
 800623c:	ab0c      	add	r3, sp, #48	; 0x30
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006246:	e7f4      	b.n	8006232 <__kernel_rem_pio2+0x32e>
 8006248:	a90c      	add	r1, sp, #48	; 0x30
 800624a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800624e:	3b01      	subs	r3, #1
 8006250:	430a      	orrs	r2, r1
 8006252:	e795      	b.n	8006180 <__kernel_rem_pio2+0x27c>
 8006254:	3301      	adds	r3, #1
 8006256:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800625a:	2900      	cmp	r1, #0
 800625c:	d0fa      	beq.n	8006254 <__kernel_rem_pio2+0x350>
 800625e:	9a08      	ldr	r2, [sp, #32]
 8006260:	a920      	add	r1, sp, #128	; 0x80
 8006262:	18b2      	adds	r2, r6, r2
 8006264:	f106 0801 	add.w	r8, r6, #1
 8006268:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800626c:	18f4      	adds	r4, r6, r3
 800626e:	4544      	cmp	r4, r8
 8006270:	da04      	bge.n	800627c <__kernel_rem_pio2+0x378>
 8006272:	4626      	mov	r6, r4
 8006274:	e6bf      	b.n	8005ff6 <__kernel_rem_pio2+0xf2>
 8006276:	2301      	movs	r3, #1
 8006278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800627a:	e7ec      	b.n	8006256 <__kernel_rem_pio2+0x352>
 800627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627e:	f04f 0900 	mov.w	r9, #0
 8006282:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006286:	f7fa f8b5 	bl	80003f4 <__aeabi_i2d>
 800628a:	2600      	movs	r6, #0
 800628c:	2700      	movs	r7, #0
 800628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006290:	e9c5 0100 	strd	r0, r1, [r5]
 8006294:	3b08      	subs	r3, #8
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	9504      	str	r5, [sp, #16]
 800629a:	9b07      	ldr	r3, [sp, #28]
 800629c:	4599      	cmp	r9, r3
 800629e:	dd05      	ble.n	80062ac <__kernel_rem_pio2+0x3a8>
 80062a0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80062a4:	f108 0801 	add.w	r8, r8, #1
 80062a8:	3508      	adds	r5, #8
 80062aa:	e7e0      	b.n	800626e <__kernel_rem_pio2+0x36a>
 80062ac:	f8dd c010 	ldr.w	ip, [sp, #16]
 80062b0:	9900      	ldr	r1, [sp, #0]
 80062b2:	f109 0901 	add.w	r9, r9, #1
 80062b6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80062ba:	9100      	str	r1, [sp, #0]
 80062bc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80062c0:	f8cd c010 	str.w	ip, [sp, #16]
 80062c4:	f7fa f900 	bl	80004c8 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7f9 ff44 	bl	800015c <__adddf3>
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	e7df      	b.n	800629a <__kernel_rem_pio2+0x396>
 80062da:	3c01      	subs	r4, #1
 80062dc:	e755      	b.n	800618a <__kernel_rem_pio2+0x286>
 80062de:	f1cb 0200 	rsb	r2, fp, #0
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7ff fc8f 	bl	8005c08 <scalbn>
 80062ea:	2200      	movs	r2, #0
 80062ec:	4ba3      	ldr	r3, [pc, #652]	; (800657c <__kernel_rem_pio2+0x678>)
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	f7fa fb6f 	bl	80009d4 <__aeabi_dcmpge>
 80062f6:	b1f8      	cbz	r0, 8006338 <__kernel_rem_pio2+0x434>
 80062f8:	2200      	movs	r2, #0
 80062fa:	4ba1      	ldr	r3, [pc, #644]	; (8006580 <__kernel_rem_pio2+0x67c>)
 80062fc:	4620      	mov	r0, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	f7fa f8e2 	bl	80004c8 <__aeabi_dmul>
 8006304:	f7fa fb90 	bl	8000a28 <__aeabi_d2iz>
 8006308:	4607      	mov	r7, r0
 800630a:	f7fa f873 	bl	80003f4 <__aeabi_i2d>
 800630e:	2200      	movs	r2, #0
 8006310:	4b9a      	ldr	r3, [pc, #616]	; (800657c <__kernel_rem_pio2+0x678>)
 8006312:	f7fa f8d9 	bl	80004c8 <__aeabi_dmul>
 8006316:	460b      	mov	r3, r1
 8006318:	4602      	mov	r2, r0
 800631a:	4629      	mov	r1, r5
 800631c:	4620      	mov	r0, r4
 800631e:	f7f9 ff1b 	bl	8000158 <__aeabi_dsub>
 8006322:	f7fa fb81 	bl	8000a28 <__aeabi_d2iz>
 8006326:	1c74      	adds	r4, r6, #1
 8006328:	ab0c      	add	r3, sp, #48	; 0x30
 800632a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800632e:	f10b 0b18 	add.w	fp, fp, #24
 8006332:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8006336:	e730      	b.n	800619a <__kernel_rem_pio2+0x296>
 8006338:	4620      	mov	r0, r4
 800633a:	4629      	mov	r1, r5
 800633c:	f7fa fb74 	bl	8000a28 <__aeabi_d2iz>
 8006340:	ab0c      	add	r3, sp, #48	; 0x30
 8006342:	4634      	mov	r4, r6
 8006344:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006348:	e727      	b.n	800619a <__kernel_rem_pio2+0x296>
 800634a:	ab0c      	add	r3, sp, #48	; 0x30
 800634c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006350:	f7fa f850 	bl	80003f4 <__aeabi_i2d>
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	f7fa f8b6 	bl	80004c8 <__aeabi_dmul>
 800635c:	4642      	mov	r2, r8
 800635e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006362:	464b      	mov	r3, r9
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa f8ae 	bl	80004c8 <__aeabi_dmul>
 800636c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006370:	4606      	mov	r6, r0
 8006372:	460f      	mov	r7, r1
 8006374:	e721      	b.n	80061ba <__kernel_rem_pio2+0x2b6>
 8006376:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800637a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800637e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006382:	f8cd c01c 	str.w	ip, [sp, #28]
 8006386:	f7fa f89f 	bl	80004c8 <__aeabi_dmul>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4650      	mov	r0, sl
 8006390:	4659      	mov	r1, fp
 8006392:	f7f9 fee3 	bl	800015c <__adddf3>
 8006396:	4682      	mov	sl, r0
 8006398:	468b      	mov	fp, r1
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	4598      	cmp	r8, r3
 80063a2:	dc01      	bgt.n	80063a8 <__kernel_rem_pio2+0x4a4>
 80063a4:	45b8      	cmp	r8, r7
 80063a6:	dde6      	ble.n	8006376 <__kernel_rem_pio2+0x472>
 80063a8:	ab48      	add	r3, sp, #288	; 0x120
 80063aa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80063ae:	e9c7 ab00 	strd	sl, fp, [r7]
 80063b2:	3e01      	subs	r6, #1
 80063b4:	e706      	b.n	80061c4 <__kernel_rem_pio2+0x2c0>
 80063b6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	dc09      	bgt.n	80063d0 <__kernel_rem_pio2+0x4cc>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dc32      	bgt.n	8006426 <__kernel_rem_pio2+0x522>
 80063c0:	d058      	beq.n	8006474 <__kernel_rem_pio2+0x570>
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	f003 0007 	and.w	r0, r3, #7
 80063c8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d1f5      	bne.n	80063c2 <__kernel_rem_pio2+0x4be>
 80063d6:	ab48      	add	r3, sp, #288	; 0x120
 80063d8:	441d      	add	r5, r3
 80063da:	46aa      	mov	sl, r5
 80063dc:	46a3      	mov	fp, r4
 80063de:	f1bb 0f00 	cmp.w	fp, #0
 80063e2:	dc74      	bgt.n	80064ce <__kernel_rem_pio2+0x5ca>
 80063e4:	46aa      	mov	sl, r5
 80063e6:	46a3      	mov	fp, r4
 80063e8:	f1bb 0f01 	cmp.w	fp, #1
 80063ec:	f300 808e 	bgt.w	800650c <__kernel_rem_pio2+0x608>
 80063f0:	2700      	movs	r7, #0
 80063f2:	463e      	mov	r6, r7
 80063f4:	2c01      	cmp	r4, #1
 80063f6:	f300 80a8 	bgt.w	800654a <__kernel_rem_pio2+0x646>
 80063fa:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80063fe:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 80aa 	bne.w	800655e <__kernel_rem_pio2+0x65a>
 800640a:	4603      	mov	r3, r0
 800640c:	462a      	mov	r2, r5
 800640e:	9806      	ldr	r0, [sp, #24]
 8006410:	e9c0 2300 	strd	r2, r3, [r0]
 8006414:	4622      	mov	r2, r4
 8006416:	460b      	mov	r3, r1
 8006418:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800641c:	463a      	mov	r2, r7
 800641e:	4633      	mov	r3, r6
 8006420:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006424:	e7cd      	b.n	80063c2 <__kernel_rem_pio2+0x4be>
 8006426:	2000      	movs	r0, #0
 8006428:	46a0      	mov	r8, r4
 800642a:	4601      	mov	r1, r0
 800642c:	ab48      	add	r3, sp, #288	; 0x120
 800642e:	441d      	add	r5, r3
 8006430:	f1b8 0f00 	cmp.w	r8, #0
 8006434:	da38      	bge.n	80064a8 <__kernel_rem_pio2+0x5a4>
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d03c      	beq.n	80064b6 <__kernel_rem_pio2+0x5b2>
 800643c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006440:	4602      	mov	r2, r0
 8006442:	462b      	mov	r3, r5
 8006444:	9d06      	ldr	r5, [sp, #24]
 8006446:	2601      	movs	r6, #1
 8006448:	e9c5 2300 	strd	r2, r3, [r5]
 800644c:	460b      	mov	r3, r1
 800644e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006452:	f7f9 fe81 	bl	8000158 <__aeabi_dsub>
 8006456:	4684      	mov	ip, r0
 8006458:	460f      	mov	r7, r1
 800645a:	ad48      	add	r5, sp, #288	; 0x120
 800645c:	42b4      	cmp	r4, r6
 800645e:	da2c      	bge.n	80064ba <__kernel_rem_pio2+0x5b6>
 8006460:	9b00      	ldr	r3, [sp, #0]
 8006462:	b10b      	cbz	r3, 8006468 <__kernel_rem_pio2+0x564>
 8006464:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006468:	4662      	mov	r2, ip
 800646a:	463b      	mov	r3, r7
 800646c:	9906      	ldr	r1, [sp, #24]
 800646e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006472:	e7a6      	b.n	80063c2 <__kernel_rem_pio2+0x4be>
 8006474:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006476:	ab48      	add	r3, sp, #288	; 0x120
 8006478:	4637      	mov	r7, r6
 800647a:	441d      	add	r5, r3
 800647c:	2c00      	cmp	r4, #0
 800647e:	da09      	bge.n	8006494 <__kernel_rem_pio2+0x590>
 8006480:	9b00      	ldr	r3, [sp, #0]
 8006482:	b10b      	cbz	r3, 8006488 <__kernel_rem_pio2+0x584>
 8006484:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006488:	4632      	mov	r2, r6
 800648a:	463b      	mov	r3, r7
 800648c:	9906      	ldr	r1, [sp, #24]
 800648e:	e9c1 2300 	strd	r2, r3, [r1]
 8006492:	e796      	b.n	80063c2 <__kernel_rem_pio2+0x4be>
 8006494:	4630      	mov	r0, r6
 8006496:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800649a:	4639      	mov	r1, r7
 800649c:	f7f9 fe5e 	bl	800015c <__adddf3>
 80064a0:	3c01      	subs	r4, #1
 80064a2:	4606      	mov	r6, r0
 80064a4:	460f      	mov	r7, r1
 80064a6:	e7e9      	b.n	800647c <__kernel_rem_pio2+0x578>
 80064a8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80064ac:	f7f9 fe56 	bl	800015c <__adddf3>
 80064b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80064b4:	e7bc      	b.n	8006430 <__kernel_rem_pio2+0x52c>
 80064b6:	460d      	mov	r5, r1
 80064b8:	e7c2      	b.n	8006440 <__kernel_rem_pio2+0x53c>
 80064ba:	4660      	mov	r0, ip
 80064bc:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7f9 fe4b 	bl	800015c <__adddf3>
 80064c6:	3601      	adds	r6, #1
 80064c8:	4684      	mov	ip, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	e7c6      	b.n	800645c <__kernel_rem_pio2+0x558>
 80064ce:	e9da 6700 	ldrd	r6, r7, [sl]
 80064d2:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80064d6:	4632      	mov	r2, r6
 80064d8:	463b      	mov	r3, r7
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7f9 fe3d 	bl	800015c <__adddf3>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ea:	4640      	mov	r0, r8
 80064ec:	4649      	mov	r1, r9
 80064ee:	f7f9 fe33 	bl	8000158 <__aeabi_dsub>
 80064f2:	4632      	mov	r2, r6
 80064f4:	463b      	mov	r3, r7
 80064f6:	f7f9 fe31 	bl	800015c <__adddf3>
 80064fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064fe:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006502:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006506:	e9ca 2300 	strd	r2, r3, [sl]
 800650a:	e768      	b.n	80063de <__kernel_rem_pio2+0x4da>
 800650c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006510:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	f7f9 fe1e 	bl	800015c <__adddf3>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 fe14 	bl	8000158 <__aeabi_dsub>
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	f7f9 fe12 	bl	800015c <__adddf3>
 8006538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800653c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006540:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006544:	e9ca 2300 	strd	r2, r3, [sl]
 8006548:	e74e      	b.n	80063e8 <__kernel_rem_pio2+0x4e4>
 800654a:	4638      	mov	r0, r7
 800654c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006550:	4631      	mov	r1, r6
 8006552:	f7f9 fe03 	bl	800015c <__adddf3>
 8006556:	3c01      	subs	r4, #1
 8006558:	4607      	mov	r7, r0
 800655a:	460e      	mov	r6, r1
 800655c:	e74a      	b.n	80063f4 <__kernel_rem_pio2+0x4f0>
 800655e:	9b06      	ldr	r3, [sp, #24]
 8006560:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006564:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006568:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800656c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006570:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006574:	601d      	str	r5, [r3, #0]
 8006576:	615e      	str	r6, [r3, #20]
 8006578:	e723      	b.n	80063c2 <__kernel_rem_pio2+0x4be>
 800657a:	bf00      	nop
 800657c:	41700000 	.word	0x41700000
 8006580:	3e700000 	.word	0x3e700000
 8006584:	00000000 	.word	0x00000000

08006588 <floor>:
 8006588:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800658c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006590:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006594:	2e13      	cmp	r6, #19
 8006596:	460b      	mov	r3, r1
 8006598:	4607      	mov	r7, r0
 800659a:	460c      	mov	r4, r1
 800659c:	4605      	mov	r5, r0
 800659e:	dc32      	bgt.n	8006606 <floor+0x7e>
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	da14      	bge.n	80065ce <floor+0x46>
 80065a4:	a334      	add	r3, pc, #208	; (adr r3, 8006678 <floor+0xf0>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f7f9 fdd7 	bl	800015c <__adddf3>
 80065ae:	2200      	movs	r2, #0
 80065b0:	2300      	movs	r3, #0
 80065b2:	f7fa fa19 	bl	80009e8 <__aeabi_dcmpgt>
 80065b6:	b138      	cbz	r0, 80065c8 <floor+0x40>
 80065b8:	2c00      	cmp	r4, #0
 80065ba:	da56      	bge.n	800666a <floor+0xe2>
 80065bc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80065c0:	4325      	orrs	r5, r4
 80065c2:	d055      	beq.n	8006670 <floor+0xe8>
 80065c4:	2500      	movs	r5, #0
 80065c6:	4c2e      	ldr	r4, [pc, #184]	; (8006680 <floor+0xf8>)
 80065c8:	4623      	mov	r3, r4
 80065ca:	462f      	mov	r7, r5
 80065cc:	e025      	b.n	800661a <floor+0x92>
 80065ce:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <floor+0xfc>)
 80065d0:	fa42 f806 	asr.w	r8, r2, r6
 80065d4:	ea01 0208 	and.w	r2, r1, r8
 80065d8:	4302      	orrs	r2, r0
 80065da:	d01e      	beq.n	800661a <floor+0x92>
 80065dc:	a326      	add	r3, pc, #152	; (adr r3, 8006678 <floor+0xf0>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7f9 fdbb 	bl	800015c <__adddf3>
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	f7fa f9fd 	bl	80009e8 <__aeabi_dcmpgt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d0ea      	beq.n	80065c8 <floor+0x40>
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	bfbe      	ittt	lt
 80065f6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80065fa:	4133      	asrlt	r3, r6
 80065fc:	18e4      	addlt	r4, r4, r3
 80065fe:	2500      	movs	r5, #0
 8006600:	ea24 0408 	bic.w	r4, r4, r8
 8006604:	e7e0      	b.n	80065c8 <floor+0x40>
 8006606:	2e33      	cmp	r6, #51	; 0x33
 8006608:	dd0b      	ble.n	8006622 <floor+0x9a>
 800660a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800660e:	d104      	bne.n	800661a <floor+0x92>
 8006610:	4602      	mov	r2, r0
 8006612:	f7f9 fda3 	bl	800015c <__adddf3>
 8006616:	4607      	mov	r7, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4638      	mov	r0, r7
 800661c:	4619      	mov	r1, r3
 800661e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006622:	f04f 38ff 	mov.w	r8, #4294967295
 8006626:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800662a:	fa28 f802 	lsr.w	r8, r8, r2
 800662e:	ea10 0f08 	tst.w	r0, r8
 8006632:	d0f2      	beq.n	800661a <floor+0x92>
 8006634:	a310      	add	r3, pc, #64	; (adr r3, 8006678 <floor+0xf0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 fd8f 	bl	800015c <__adddf3>
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	f7fa f9d1 	bl	80009e8 <__aeabi_dcmpgt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d0be      	beq.n	80065c8 <floor+0x40>
 800664a:	2c00      	cmp	r4, #0
 800664c:	da0a      	bge.n	8006664 <floor+0xdc>
 800664e:	2e14      	cmp	r6, #20
 8006650:	d101      	bne.n	8006656 <floor+0xce>
 8006652:	3401      	adds	r4, #1
 8006654:	e006      	b.n	8006664 <floor+0xdc>
 8006656:	2301      	movs	r3, #1
 8006658:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800665c:	40b3      	lsls	r3, r6
 800665e:	441d      	add	r5, r3
 8006660:	42af      	cmp	r7, r5
 8006662:	d8f6      	bhi.n	8006652 <floor+0xca>
 8006664:	ea25 0508 	bic.w	r5, r5, r8
 8006668:	e7ae      	b.n	80065c8 <floor+0x40>
 800666a:	2500      	movs	r5, #0
 800666c:	462c      	mov	r4, r5
 800666e:	e7ab      	b.n	80065c8 <floor+0x40>
 8006670:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006674:	e7a8      	b.n	80065c8 <floor+0x40>
 8006676:	bf00      	nop
 8006678:	8800759c 	.word	0x8800759c
 800667c:	7e37e43c 	.word	0x7e37e43c
 8006680:	bff00000 	.word	0xbff00000
 8006684:	000fffff 	.word	0x000fffff

08006688 <_init>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr

08006694 <_fini>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr
